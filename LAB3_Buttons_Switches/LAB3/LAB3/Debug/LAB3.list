
LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002674  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002780  08002780  00012780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027b8  080027b8  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080027b8  080027b8  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027b8  080027b8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027b8  080027b8  000127b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027bc  080027bc  000127bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080027c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000014  080027d4  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  080027d4  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009182  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018b3  00000000  00000000  000291bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a80  00000000  00000000  0002aa78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a0  00000000  00000000  0002b4f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000014da  00000000  00000000  0002be98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b963  00000000  00000000  0002d372  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000825f5  00000000  00000000  00038cd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000bb2ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a20  00000000  00000000  000bb320  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08002768 	.word	0x08002768

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08002768 	.word	0x08002768

0800014c <tens>:
#define BTN2_STEP 1

static uint8_t ns_green_snap, ns_yellow_snap, ns_red_snap;
static uint8_t ns_green_edit, ns_yellow_edit, ns_red_edit;

static inline uint8_t tens(uint8_t v){ return v / 10; }
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	4a04      	ldr	r2, [pc, #16]	; (800016c <tens+0x20>)
 800015a:	fba2 2303 	umull	r2, r3, r2, r3
 800015e:	08db      	lsrs	r3, r3, #3
 8000160:	b2db      	uxtb	r3, r3
 8000162:	4618      	mov	r0, r3
 8000164:	370c      	adds	r7, #12
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	cccccccd 	.word	0xcccccccd

08000170 <ones>:
static inline uint8_t ones(uint8_t v){ return v % 10; }
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
 800017a:	79fa      	ldrb	r2, [r7, #7]
 800017c:	4b07      	ldr	r3, [pc, #28]	; (800019c <ones+0x2c>)
 800017e:	fba3 1302 	umull	r1, r3, r3, r2
 8000182:	08d9      	lsrs	r1, r3, #3
 8000184:	460b      	mov	r3, r1
 8000186:	009b      	lsls	r3, r3, #2
 8000188:	440b      	add	r3, r1
 800018a:	005b      	lsls	r3, r3, #1
 800018c:	1ad3      	subs	r3, r2, r3
 800018e:	b2db      	uxtb	r3, r3
 8000190:	4618      	mov	r0, r3
 8000192:	370c      	adds	r7, #12
 8000194:	46bd      	mov	sp, r7
 8000196:	bc80      	pop	{r7}
 8000198:	4770      	bx	lr
 800019a:	bf00      	nop
 800019c:	cccccccd 	.word	0xcccccccd

080001a0 <leds_all_off>:

static inline void leds_all_off(void){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA,
 80001a4:	2200      	movs	r2, #0
 80001a6:	f640 71ff 	movw	r1, #4095	; 0xfff
 80001aa:	4802      	ldr	r0, [pc, #8]	; (80001b4 <leds_all_off+0x14>)
 80001ac:	f001 fadf 	bl	800176e <HAL_GPIO_WritePin>
    R1_W_Pin|R2_N_Pin|R3_E_Pin|R4_S_Pin|
    Y1_W_Pin|Y2_N_Pin|Y3_E_Pin|Y4_S_Pin|
    G1_W_Pin|G2_N_Pin|G3_E_Pin|G4_S_Pin, GPIO_PIN_RESET);
}
 80001b0:	bf00      	nop
 80001b2:	bd80      	pop	{r7, pc}
 80001b4:	40010800 	.word	0x40010800

080001b8 <we_red_on>:
static inline void we_red_on(void){ HAL_GPIO_WritePin(GPIOA, R1_W_Pin, GPIO_PIN_SET); }
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
 80001bc:	2201      	movs	r2, #1
 80001be:	2101      	movs	r1, #1
 80001c0:	4802      	ldr	r0, [pc, #8]	; (80001cc <we_red_on+0x14>)
 80001c2:	f001 fad4 	bl	800176e <HAL_GPIO_WritePin>
 80001c6:	bf00      	nop
 80001c8:	bd80      	pop	{r7, pc}
 80001ca:	bf00      	nop
 80001cc:	40010800 	.word	0x40010800

080001d0 <we_yel_on>:
static inline void we_yel_on(void){ HAL_GPIO_WritePin(GPIOA, Y1_W_Pin, GPIO_PIN_SET); }
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
 80001d4:	2201      	movs	r2, #1
 80001d6:	2110      	movs	r1, #16
 80001d8:	4802      	ldr	r0, [pc, #8]	; (80001e4 <we_yel_on+0x14>)
 80001da:	f001 fac8 	bl	800176e <HAL_GPIO_WritePin>
 80001de:	bf00      	nop
 80001e0:	bd80      	pop	{r7, pc}
 80001e2:	bf00      	nop
 80001e4:	40010800 	.word	0x40010800

080001e8 <we_grn_on>:
static inline void we_grn_on(void){ HAL_GPIO_WritePin(GPIOA, G1_W_Pin, GPIO_PIN_SET); }
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
 80001ec:	2201      	movs	r2, #1
 80001ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001f2:	4802      	ldr	r0, [pc, #8]	; (80001fc <we_grn_on+0x14>)
 80001f4:	f001 fabb 	bl	800176e <HAL_GPIO_WritePin>
 80001f8:	bf00      	nop
 80001fa:	bd80      	pop	{r7, pc}
 80001fc:	40010800 	.word	0x40010800

08000200 <ns_red_on>:
static inline void ns_red_on(void){ HAL_GPIO_WritePin(GPIOA, R2_N_Pin, GPIO_PIN_SET); }
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
 8000204:	2201      	movs	r2, #1
 8000206:	2102      	movs	r1, #2
 8000208:	4802      	ldr	r0, [pc, #8]	; (8000214 <ns_red_on+0x14>)
 800020a:	f001 fab0 	bl	800176e <HAL_GPIO_WritePin>
 800020e:	bf00      	nop
 8000210:	bd80      	pop	{r7, pc}
 8000212:	bf00      	nop
 8000214:	40010800 	.word	0x40010800

08000218 <ns_yel_on>:
static inline void ns_yel_on(void){ HAL_GPIO_WritePin(GPIOA, Y2_N_Pin, GPIO_PIN_SET); }
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
 800021c:	2201      	movs	r2, #1
 800021e:	2120      	movs	r1, #32
 8000220:	4802      	ldr	r0, [pc, #8]	; (800022c <ns_yel_on+0x14>)
 8000222:	f001 faa4 	bl	800176e <HAL_GPIO_WritePin>
 8000226:	bf00      	nop
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop
 800022c:	40010800 	.word	0x40010800

08000230 <ns_grn_on>:
static inline void ns_grn_on(void){ HAL_GPIO_WritePin(GPIOA, G2_N_Pin, GPIO_PIN_SET); }
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
 8000234:	2201      	movs	r2, #1
 8000236:	f44f 7100 	mov.w	r1, #512	; 0x200
 800023a:	4802      	ldr	r0, [pc, #8]	; (8000244 <ns_grn_on+0x14>)
 800023c:	f001 fa97 	bl	800176e <HAL_GPIO_WritePin>
 8000240:	bf00      	nop
 8000242:	bd80      	pop	{r7, pc}
 8000244:	40010800 	.word	0x40010800

08000248 <ea_red_on>:
static inline void ea_red_on(void){ HAL_GPIO_WritePin(GPIOA, R3_E_Pin, GPIO_PIN_SET); }
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
 800024c:	2201      	movs	r2, #1
 800024e:	2104      	movs	r1, #4
 8000250:	4802      	ldr	r0, [pc, #8]	; (800025c <ea_red_on+0x14>)
 8000252:	f001 fa8c 	bl	800176e <HAL_GPIO_WritePin>
 8000256:	bf00      	nop
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	40010800 	.word	0x40010800

08000260 <ea_yel_on>:
static inline void ea_yel_on(void){ HAL_GPIO_WritePin(GPIOA, Y3_E_Pin, GPIO_PIN_SET); }
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
 8000264:	2201      	movs	r2, #1
 8000266:	2140      	movs	r1, #64	; 0x40
 8000268:	4802      	ldr	r0, [pc, #8]	; (8000274 <ea_yel_on+0x14>)
 800026a:	f001 fa80 	bl	800176e <HAL_GPIO_WritePin>
 800026e:	bf00      	nop
 8000270:	bd80      	pop	{r7, pc}
 8000272:	bf00      	nop
 8000274:	40010800 	.word	0x40010800

08000278 <ea_grn_on>:
static inline void ea_grn_on(void){ HAL_GPIO_WritePin(GPIOA, G3_E_Pin, GPIO_PIN_SET); }
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
 800027c:	2201      	movs	r2, #1
 800027e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000282:	4802      	ldr	r0, [pc, #8]	; (800028c <ea_grn_on+0x14>)
 8000284:	f001 fa73 	bl	800176e <HAL_GPIO_WritePin>
 8000288:	bf00      	nop
 800028a:	bd80      	pop	{r7, pc}
 800028c:	40010800 	.word	0x40010800

08000290 <so_red_on>:
static inline void so_red_on(void){ HAL_GPIO_WritePin(GPIOA, R4_S_Pin, GPIO_PIN_SET); }
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
 8000294:	2201      	movs	r2, #1
 8000296:	2108      	movs	r1, #8
 8000298:	4802      	ldr	r0, [pc, #8]	; (80002a4 <so_red_on+0x14>)
 800029a:	f001 fa68 	bl	800176e <HAL_GPIO_WritePin>
 800029e:	bf00      	nop
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	40010800 	.word	0x40010800

080002a8 <so_yel_on>:
static inline void so_yel_on(void){ HAL_GPIO_WritePin(GPIOA, Y4_S_Pin, GPIO_PIN_SET); }
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
 80002ac:	2201      	movs	r2, #1
 80002ae:	2180      	movs	r1, #128	; 0x80
 80002b0:	4802      	ldr	r0, [pc, #8]	; (80002bc <so_yel_on+0x14>)
 80002b2:	f001 fa5c 	bl	800176e <HAL_GPIO_WritePin>
 80002b6:	bf00      	nop
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	40010800 	.word	0x40010800

080002c0 <so_grn_on>:
static inline void so_grn_on(void){ HAL_GPIO_WritePin(GPIOA, G4_S_Pin, GPIO_PIN_SET); }
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
 80002c4:	2201      	movs	r2, #1
 80002c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002ca:	4802      	ldr	r0, [pc, #8]	; (80002d4 <so_grn_on+0x14>)
 80002cc:	f001 fa4f 	bl	800176e <HAL_GPIO_WritePin>
 80002d0:	bf00      	nop
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	40010800 	.word	0x40010800

080002d8 <seg_write_digit>:
  SEG0_Pin|SEG1_Pin|SEG2_Pin,                                       // 7
  SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin,   // 8
  SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin|SEG5_Pin|SEG6_Pin             // 9
};

static inline void seg_write_digit(uint8_t val){
 80002d8:	b480      	push	{r7}
 80002da:	b085      	sub	sp, #20
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	71fb      	strb	r3, [r7, #7]
  uint16_t logical = (val <= 9) ? seg_font[val] : 0;
 80002e2:	79fb      	ldrb	r3, [r7, #7]
 80002e4:	2b09      	cmp	r3, #9
 80002e6:	d804      	bhi.n	80002f2 <seg_write_digit+0x1a>
 80002e8:	79fb      	ldrb	r3, [r7, #7]
 80002ea:	4a09      	ldr	r2, [pc, #36]	; (8000310 <seg_write_digit+0x38>)
 80002ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002f0:	e000      	b.n	80002f4 <seg_write_digit+0x1c>
 80002f2:	2300      	movs	r3, #0
 80002f4:	81fb      	strh	r3, [r7, #14]
  GPIOB->BSRR = (SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin|
 80002f6:	4b07      	ldr	r3, [pc, #28]	; (8000314 <seg_write_digit+0x3c>)
 80002f8:	f44f 427e 	mov.w	r2, #65024	; 0xfe00
 80002fc:	611a      	str	r2, [r3, #16]
                 SEG4_Pin|SEG5_Pin|SEG6_Pin);      // all OFF (set HIGH)
  GPIOB->BSRR = ((uint32_t)logical) << 16;         // selected ON (LOW)
 80002fe:	89fb      	ldrh	r3, [r7, #14]
 8000300:	4a04      	ldr	r2, [pc, #16]	; (8000314 <seg_write_digit+0x3c>)
 8000302:	041b      	lsls	r3, r3, #16
 8000304:	6113      	str	r3, [r2, #16]
}
 8000306:	bf00      	nop
 8000308:	3714      	adds	r7, #20
 800030a:	46bd      	mov	sp, r7
 800030c:	bc80      	pop	{r7}
 800030e:	4770      	bx	lr
 8000310:	08002780 	.word	0x08002780
 8000314:	40010c00 	.word	0x40010c00

08000318 <en_all_off>:
static inline void en_all_off(void){
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_SET);
 800031c:	2201      	movs	r2, #1
 800031e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8000322:	4802      	ldr	r0, [pc, #8]	; (800032c <en_all_off+0x14>)
 8000324:	f001 fa23 	bl	800176e <HAL_GPIO_WritePin>
}
 8000328:	bf00      	nop
 800032a:	bd80      	pop	{r7, pc}
 800032c:	40010c00 	.word	0x40010c00

08000330 <en_on>:
static inline void en_on(uint8_t i){
 8000330:	b580      	push	{r7, lr}
 8000332:	b084      	sub	sp, #16
 8000334:	af00      	add	r7, sp, #0
 8000336:	4603      	mov	r3, r0
 8000338:	71fb      	strb	r3, [r7, #7]
  uint16_t pin = (i==0)?EN0_Pin:(i==1)?EN1_Pin:(i==2)?EN2_Pin:EN3_Pin;
 800033a:	79fb      	ldrb	r3, [r7, #7]
 800033c:	2b00      	cmp	r3, #0
 800033e:	d00c      	beq.n	800035a <en_on+0x2a>
 8000340:	79fb      	ldrb	r3, [r7, #7]
 8000342:	2b01      	cmp	r3, #1
 8000344:	d007      	beq.n	8000356 <en_on+0x26>
 8000346:	79fb      	ldrb	r3, [r7, #7]
 8000348:	2b02      	cmp	r3, #2
 800034a:	d101      	bne.n	8000350 <en_on+0x20>
 800034c:	2380      	movs	r3, #128	; 0x80
 800034e:	e005      	b.n	800035c <en_on+0x2c>
 8000350:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000354:	e002      	b.n	800035c <en_on+0x2c>
 8000356:	2340      	movs	r3, #64	; 0x40
 8000358:	e000      	b.n	800035c <en_on+0x2c>
 800035a:	2320      	movs	r3, #32
 800035c:	81fb      	strh	r3, [r7, #14]
  HAL_GPIO_WritePin(GPIOB, pin, GPIO_PIN_RESET);
 800035e:	89fb      	ldrh	r3, [r7, #14]
 8000360:	2200      	movs	r2, #0
 8000362:	4619      	mov	r1, r3
 8000364:	4803      	ldr	r0, [pc, #12]	; (8000374 <en_on+0x44>)
 8000366:	f001 fa02 	bl	800176e <HAL_GPIO_WritePin>
}
 800036a:	bf00      	nop
 800036c:	3710      	adds	r7, #16
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	40010c00 	.word	0x40010c00

08000378 <compute_corridor_remaining>:

static void compute_corridor_remaining(uint8_t *we_sec, uint8_t *ns_sec){
 8000378:	b480      	push	{r7}
 800037a:	b085      	sub	sp, #20
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
 8000380:	6039      	str	r1, [r7, #0]
    uint8_t we = 0, ns = 0;
 8000382:	2300      	movs	r3, #0
 8000384:	73fb      	strb	r3, [r7, #15]
 8000386:	2300      	movs	r3, #0
 8000388:	73bb      	strb	r3, [r7, #14]

    switch (phase){
 800038a:	4b23      	ldr	r3, [pc, #140]	; (8000418 <compute_corridor_remaining+0xa0>)
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	2b03      	cmp	r3, #3
 8000390:	d82c      	bhi.n	80003ec <compute_corridor_remaining+0x74>
 8000392:	a201      	add	r2, pc, #4	; (adr r2, 8000398 <compute_corridor_remaining+0x20>)
 8000394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000398:	080003a9 	.word	0x080003a9
 800039c:	080003bd 	.word	0x080003bd
 80003a0:	080003cb 	.word	0x080003cb
 80003a4:	080003df 	.word	0x080003df
      case PH_WE_GREEN:
        we = phase_remain;                 // WE active
 80003a8:	4b1c      	ldr	r3, [pc, #112]	; (800041c <compute_corridor_remaining+0xa4>)
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	73fb      	strb	r3, [r7, #15]
        ns = ew_yellow + phase_remain;     // NS waiting
 80003ae:	4b1c      	ldr	r3, [pc, #112]	; (8000420 <compute_corridor_remaining+0xa8>)
 80003b0:	781a      	ldrb	r2, [r3, #0]
 80003b2:	4b1a      	ldr	r3, [pc, #104]	; (800041c <compute_corridor_remaining+0xa4>)
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	4413      	add	r3, r2
 80003b8:	73bb      	strb	r3, [r7, #14]
        break;
 80003ba:	e017      	b.n	80003ec <compute_corridor_remaining+0x74>
      case PH_WE_YELLOW:
        we = phase_remain;
 80003bc:	4b17      	ldr	r3, [pc, #92]	; (800041c <compute_corridor_remaining+0xa4>)
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	73fb      	strb	r3, [r7, #15]
        ns = phase_remain;
 80003c2:	4b16      	ldr	r3, [pc, #88]	; (800041c <compute_corridor_remaining+0xa4>)
 80003c4:	781b      	ldrb	r3, [r3, #0]
 80003c6:	73bb      	strb	r3, [r7, #14]
        break;
 80003c8:	e010      	b.n	80003ec <compute_corridor_remaining+0x74>
      case PH_NS_GREEN:
        ns = phase_remain;                 // NS active
 80003ca:	4b14      	ldr	r3, [pc, #80]	; (800041c <compute_corridor_remaining+0xa4>)
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	73bb      	strb	r3, [r7, #14]
        we = ns_yellow + phase_remain;     // WE waiting
 80003d0:	4b14      	ldr	r3, [pc, #80]	; (8000424 <compute_corridor_remaining+0xac>)
 80003d2:	781a      	ldrb	r2, [r3, #0]
 80003d4:	4b11      	ldr	r3, [pc, #68]	; (800041c <compute_corridor_remaining+0xa4>)
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	4413      	add	r3, r2
 80003da:	73fb      	strb	r3, [r7, #15]
        break;
 80003dc:	e006      	b.n	80003ec <compute_corridor_remaining+0x74>
      case PH_NS_YELLOW:
        ns = phase_remain;
 80003de:	4b0f      	ldr	r3, [pc, #60]	; (800041c <compute_corridor_remaining+0xa4>)
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	73bb      	strb	r3, [r7, #14]
        we = phase_remain;
 80003e4:	4b0d      	ldr	r3, [pc, #52]	; (800041c <compute_corridor_remaining+0xa4>)
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	73fb      	strb	r3, [r7, #15]
        break;
 80003ea:	bf00      	nop
    }
    if (we > 99) we = 99;
 80003ec:	7bfb      	ldrb	r3, [r7, #15]
 80003ee:	2b63      	cmp	r3, #99	; 0x63
 80003f0:	d901      	bls.n	80003f6 <compute_corridor_remaining+0x7e>
 80003f2:	2363      	movs	r3, #99	; 0x63
 80003f4:	73fb      	strb	r3, [r7, #15]
    if (ns > 99) ns = 99;
 80003f6:	7bbb      	ldrb	r3, [r7, #14]
 80003f8:	2b63      	cmp	r3, #99	; 0x63
 80003fa:	d901      	bls.n	8000400 <compute_corridor_remaining+0x88>
 80003fc:	2363      	movs	r3, #99	; 0x63
 80003fe:	73bb      	strb	r3, [r7, #14]
    *we_sec = we;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	7bfa      	ldrb	r2, [r7, #15]
 8000404:	701a      	strb	r2, [r3, #0]
    *ns_sec = ns;
 8000406:	683b      	ldr	r3, [r7, #0]
 8000408:	7bba      	ldrb	r2, [r7, #14]
 800040a:	701a      	strb	r2, [r3, #0]
}
 800040c:	bf00      	nop
 800040e:	3714      	adds	r7, #20
 8000410:	46bd      	mov	sp, r7
 8000412:	bc80      	pop	{r7}
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	20000037 	.word	0x20000037
 800041c:	20000038 	.word	0x20000038
 8000420:	20000005 	.word	0x20000005
 8000424:	20000002 	.word	0x20000002

08000428 <display_mode_update_250ms>:


static void display_mode_update_250ms(uint8_t mode_num, uint8_t value){
 8000428:	b580      	push	{r7, lr}
 800042a:	b084      	sub	sp, #16
 800042c:	af00      	add	r7, sp, #0
 800042e:	4603      	mov	r3, r0
 8000430:	460a      	mov	r2, r1
 8000432:	71fb      	strb	r3, [r7, #7]
 8000434:	4613      	mov	r3, r2
 8000436:	71bb      	strb	r3, [r7, #6]
  static uint8_t cur = 0;
  static uint32_t next_ms = 0;
  static uint8_t blink = 0;

  if ((int32_t)(sys_ms - next_ms) < 0) return;
 8000438:	4b4a      	ldr	r3, [pc, #296]	; (8000564 <display_mode_update_250ms+0x13c>)
 800043a:	681a      	ldr	r2, [r3, #0]
 800043c:	4b4a      	ldr	r3, [pc, #296]	; (8000568 <display_mode_update_250ms+0x140>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	1ad3      	subs	r3, r2, r3
 8000442:	2b00      	cmp	r3, #0
 8000444:	f2c0 8089 	blt.w	800055a <display_mode_update_250ms+0x132>
  next_ms = sys_ms + 250;
 8000448:	4b46      	ldr	r3, [pc, #280]	; (8000564 <display_mode_update_250ms+0x13c>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	33fa      	adds	r3, #250	; 0xfa
 800044e:	4a46      	ldr	r2, [pc, #280]	; (8000568 <display_mode_update_250ms+0x140>)
 8000450:	6013      	str	r3, [r2, #0]
  blink ^= 1;
 8000452:	4b46      	ldr	r3, [pc, #280]	; (800056c <display_mode_update_250ms+0x144>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	f083 0301 	eor.w	r3, r3, #1
 800045a:	b2da      	uxtb	r2, r3
 800045c:	4b43      	ldr	r3, [pc, #268]	; (800056c <display_mode_update_250ms+0x144>)
 800045e:	701a      	strb	r2, [r3, #0]

  leds_all_off();
 8000460:	f7ff fe9e 	bl	80001a0 <leds_all_off>
  if (blink) {
 8000464:	4b41      	ldr	r3, [pc, #260]	; (800056c <display_mode_update_250ms+0x144>)
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d024      	beq.n	80004b6 <display_mode_update_250ms+0x8e>
    switch(mode_num){
 800046c:	79fb      	ldrb	r3, [r7, #7]
 800046e:	2b04      	cmp	r3, #4
 8000470:	d018      	beq.n	80004a4 <display_mode_update_250ms+0x7c>
 8000472:	2b04      	cmp	r3, #4
 8000474:	dc20      	bgt.n	80004b8 <display_mode_update_250ms+0x90>
 8000476:	2b02      	cmp	r3, #2
 8000478:	d002      	beq.n	8000480 <display_mode_update_250ms+0x58>
 800047a:	2b03      	cmp	r3, #3
 800047c:	d009      	beq.n	8000492 <display_mode_update_250ms+0x6a>
 800047e:	e01b      	b.n	80004b8 <display_mode_update_250ms+0x90>
      case 2: we_red_on(); ns_red_on(); ea_red_on(); so_red_on(); break;
 8000480:	f7ff fe9a 	bl	80001b8 <we_red_on>
 8000484:	f7ff febc 	bl	8000200 <ns_red_on>
 8000488:	f7ff fede 	bl	8000248 <ea_red_on>
 800048c:	f7ff ff00 	bl	8000290 <so_red_on>
 8000490:	e012      	b.n	80004b8 <display_mode_update_250ms+0x90>
      case 3: we_yel_on(); ns_yel_on(); ea_yel_on(); so_yel_on(); break;
 8000492:	f7ff fe9d 	bl	80001d0 <we_yel_on>
 8000496:	f7ff febf 	bl	8000218 <ns_yel_on>
 800049a:	f7ff fee1 	bl	8000260 <ea_yel_on>
 800049e:	f7ff ff03 	bl	80002a8 <so_yel_on>
 80004a2:	e009      	b.n	80004b8 <display_mode_update_250ms+0x90>
      case 4: we_grn_on(); ns_grn_on(); ea_grn_on(); so_grn_on(); break;
 80004a4:	f7ff fea0 	bl	80001e8 <we_grn_on>
 80004a8:	f7ff fec2 	bl	8000230 <ns_grn_on>
 80004ac:	f7ff fee4 	bl	8000278 <ea_grn_on>
 80004b0:	f7ff ff06 	bl	80002c0 <so_grn_on>
 80004b4:	e000      	b.n	80004b8 <display_mode_update_250ms+0x90>
    }
  }
 80004b6:	bf00      	nop

  uint8_t lt=0, lo=mode_num%10;
 80004b8:	2300      	movs	r3, #0
 80004ba:	73fb      	strb	r3, [r7, #15]
 80004bc:	79fa      	ldrb	r2, [r7, #7]
 80004be:	4b2c      	ldr	r3, [pc, #176]	; (8000570 <display_mode_update_250ms+0x148>)
 80004c0:	fba3 1302 	umull	r1, r3, r3, r2
 80004c4:	08d9      	lsrs	r1, r3, #3
 80004c6:	460b      	mov	r3, r1
 80004c8:	009b      	lsls	r3, r3, #2
 80004ca:	440b      	add	r3, r1
 80004cc:	005b      	lsls	r3, r3, #1
 80004ce:	1ad3      	subs	r3, r2, r3
 80004d0:	73bb      	strb	r3, [r7, #14]
  uint8_t rt=(value/10)%10, ro=value%10;
 80004d2:	79bb      	ldrb	r3, [r7, #6]
 80004d4:	4a26      	ldr	r2, [pc, #152]	; (8000570 <display_mode_update_250ms+0x148>)
 80004d6:	fba2 2303 	umull	r2, r3, r2, r3
 80004da:	08db      	lsrs	r3, r3, #3
 80004dc:	b2da      	uxtb	r2, r3
 80004de:	4b24      	ldr	r3, [pc, #144]	; (8000570 <display_mode_update_250ms+0x148>)
 80004e0:	fba3 1302 	umull	r1, r3, r3, r2
 80004e4:	08d9      	lsrs	r1, r3, #3
 80004e6:	460b      	mov	r3, r1
 80004e8:	009b      	lsls	r3, r3, #2
 80004ea:	440b      	add	r3, r1
 80004ec:	005b      	lsls	r3, r3, #1
 80004ee:	1ad3      	subs	r3, r2, r3
 80004f0:	737b      	strb	r3, [r7, #13]
 80004f2:	79ba      	ldrb	r2, [r7, #6]
 80004f4:	4b1e      	ldr	r3, [pc, #120]	; (8000570 <display_mode_update_250ms+0x148>)
 80004f6:	fba3 1302 	umull	r1, r3, r3, r2
 80004fa:	08d9      	lsrs	r1, r3, #3
 80004fc:	460b      	mov	r3, r1
 80004fe:	009b      	lsls	r3, r3, #2
 8000500:	440b      	add	r3, r1
 8000502:	005b      	lsls	r3, r3, #1
 8000504:	1ad3      	subs	r3, r2, r3
 8000506:	733b      	strb	r3, [r7, #12]
  uint8_t val = (cur==0)?lt:(cur==1)?lo:(cur==2)?rt:ro;
 8000508:	4b1a      	ldr	r3, [pc, #104]	; (8000574 <display_mode_update_250ms+0x14c>)
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d00d      	beq.n	800052c <display_mode_update_250ms+0x104>
 8000510:	4b18      	ldr	r3, [pc, #96]	; (8000574 <display_mode_update_250ms+0x14c>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	2b01      	cmp	r3, #1
 8000516:	d007      	beq.n	8000528 <display_mode_update_250ms+0x100>
 8000518:	4b16      	ldr	r3, [pc, #88]	; (8000574 <display_mode_update_250ms+0x14c>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	2b02      	cmp	r3, #2
 800051e:	d101      	bne.n	8000524 <display_mode_update_250ms+0xfc>
 8000520:	7b7b      	ldrb	r3, [r7, #13]
 8000522:	e004      	b.n	800052e <display_mode_update_250ms+0x106>
 8000524:	7b3b      	ldrb	r3, [r7, #12]
 8000526:	e002      	b.n	800052e <display_mode_update_250ms+0x106>
 8000528:	7bbb      	ldrb	r3, [r7, #14]
 800052a:	e000      	b.n	800052e <display_mode_update_250ms+0x106>
 800052c:	7bfb      	ldrb	r3, [r7, #15]
 800052e:	72fb      	strb	r3, [r7, #11]

  en_all_off();
 8000530:	f7ff fef2 	bl	8000318 <en_all_off>
  seg_write_digit(val);
 8000534:	7afb      	ldrb	r3, [r7, #11]
 8000536:	4618      	mov	r0, r3
 8000538:	f7ff fece 	bl	80002d8 <seg_write_digit>
  en_on(cur);
 800053c:	4b0d      	ldr	r3, [pc, #52]	; (8000574 <display_mode_update_250ms+0x14c>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	4618      	mov	r0, r3
 8000542:	f7ff fef5 	bl	8000330 <en_on>
  cur = (uint8_t)((cur + 1) & 0x03);
 8000546:	4b0b      	ldr	r3, [pc, #44]	; (8000574 <display_mode_update_250ms+0x14c>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	3301      	adds	r3, #1
 800054c:	b2db      	uxtb	r3, r3
 800054e:	f003 0303 	and.w	r3, r3, #3
 8000552:	b2da      	uxtb	r2, r3
 8000554:	4b07      	ldr	r3, [pc, #28]	; (8000574 <display_mode_update_250ms+0x14c>)
 8000556:	701a      	strb	r2, [r3, #0]
 8000558:	e000      	b.n	800055c <display_mode_update_250ms+0x134>
  if ((int32_t)(sys_ms - next_ms) < 0) return;
 800055a:	bf00      	nop
}
 800055c:	3710      	adds	r7, #16
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	20000078 	.word	0x20000078
 8000568:	20000040 	.word	0x20000040
 800056c:	20000044 	.word	0x20000044
 8000570:	cccccccd 	.word	0xcccccccd
 8000574:	20000045 	.word	0x20000045

08000578 <display_update_250ms>:

static void display_update_250ms(void){
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
  static uint8_t cur = 0;
  static uint32_t next_ms = 0;
  if ((int32_t)(sys_ms - next_ms) < 0) return;
 800057e:	4b2c      	ldr	r3, [pc, #176]	; (8000630 <display_update_250ms+0xb8>)
 8000580:	681a      	ldr	r2, [r3, #0]
 8000582:	4b2c      	ldr	r3, [pc, #176]	; (8000634 <display_update_250ms+0xbc>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	1ad3      	subs	r3, r2, r3
 8000588:	2b00      	cmp	r3, #0
 800058a:	db4c      	blt.n	8000626 <display_update_250ms+0xae>
  next_ms = sys_ms + 250;
 800058c:	4b28      	ldr	r3, [pc, #160]	; (8000630 <display_update_250ms+0xb8>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	33fa      	adds	r3, #250	; 0xfa
 8000592:	4a28      	ldr	r2, [pc, #160]	; (8000634 <display_update_250ms+0xbc>)
 8000594:	6013      	str	r3, [r2, #0]

  uint8_t we_sec, ns_sec;
  compute_corridor_remaining(&we_sec, &ns_sec);
 8000596:	1d7a      	adds	r2, r7, #5
 8000598:	1dbb      	adds	r3, r7, #6
 800059a:	4611      	mov	r1, r2
 800059c:	4618      	mov	r0, r3
 800059e:	f7ff feeb 	bl	8000378 <compute_corridor_remaining>

  uint8_t val = 0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	71fb      	strb	r3, [r7, #7]
  switch (cur){
 80005a6:	4b24      	ldr	r3, [pc, #144]	; (8000638 <display_update_250ms+0xc0>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	2b03      	cmp	r3, #3
 80005ac:	d826      	bhi.n	80005fc <display_update_250ms+0x84>
 80005ae:	a201      	add	r2, pc, #4	; (adr r2, 80005b4 <display_update_250ms+0x3c>)
 80005b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005b4:	080005c5 	.word	0x080005c5
 80005b8:	080005d3 	.word	0x080005d3
 80005bc:	080005e1 	.word	0x080005e1
 80005c0:	080005ef 	.word	0x080005ef
    case 0: val = tens(ns_sec); break;
 80005c4:	797b      	ldrb	r3, [r7, #5]
 80005c6:	4618      	mov	r0, r3
 80005c8:	f7ff fdc0 	bl	800014c <tens>
 80005cc:	4603      	mov	r3, r0
 80005ce:	71fb      	strb	r3, [r7, #7]
 80005d0:	e014      	b.n	80005fc <display_update_250ms+0x84>
    case 1: val = ones(ns_sec); break;
 80005d2:	797b      	ldrb	r3, [r7, #5]
 80005d4:	4618      	mov	r0, r3
 80005d6:	f7ff fdcb 	bl	8000170 <ones>
 80005da:	4603      	mov	r3, r0
 80005dc:	71fb      	strb	r3, [r7, #7]
 80005de:	e00d      	b.n	80005fc <display_update_250ms+0x84>
    case 2: val = tens(we_sec); break;
 80005e0:	79bb      	ldrb	r3, [r7, #6]
 80005e2:	4618      	mov	r0, r3
 80005e4:	f7ff fdb2 	bl	800014c <tens>
 80005e8:	4603      	mov	r3, r0
 80005ea:	71fb      	strb	r3, [r7, #7]
 80005ec:	e006      	b.n	80005fc <display_update_250ms+0x84>
    case 3: val = ones(we_sec); break;
 80005ee:	79bb      	ldrb	r3, [r7, #6]
 80005f0:	4618      	mov	r0, r3
 80005f2:	f7ff fdbd 	bl	8000170 <ones>
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
 80005fa:	bf00      	nop
  }

  en_all_off();
 80005fc:	f7ff fe8c 	bl	8000318 <en_all_off>
  seg_write_digit(val);
 8000600:	79fb      	ldrb	r3, [r7, #7]
 8000602:	4618      	mov	r0, r3
 8000604:	f7ff fe68 	bl	80002d8 <seg_write_digit>
  en_on(cur);
 8000608:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <display_update_250ms+0xc0>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff fe8f 	bl	8000330 <en_on>
  cur = (uint8_t)((cur + 1) & 0x03);
 8000612:	4b09      	ldr	r3, [pc, #36]	; (8000638 <display_update_250ms+0xc0>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	3301      	adds	r3, #1
 8000618:	b2db      	uxtb	r3, r3
 800061a:	f003 0303 	and.w	r3, r3, #3
 800061e:	b2da      	uxtb	r2, r3
 8000620:	4b05      	ldr	r3, [pc, #20]	; (8000638 <display_update_250ms+0xc0>)
 8000622:	701a      	strb	r2, [r3, #0]
 8000624:	e000      	b.n	8000628 <display_update_250ms+0xb0>
  if ((int32_t)(sys_ms - next_ms) < 0) return;
 8000626:	bf00      	nop
}
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	20000078 	.word	0x20000078
 8000634:	20000048 	.word	0x20000048
 8000638:	2000004c 	.word	0x2000004c

0800063c <traffic_leds_apply>:

static void traffic_leds_apply(void){
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  leds_all_off();
 8000640:	f7ff fdae 	bl	80001a0 <leds_all_off>
  switch (phase){
 8000644:	4b1a      	ldr	r3, [pc, #104]	; (80006b0 <traffic_leds_apply+0x74>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b03      	cmp	r3, #3
 800064a:	d82f      	bhi.n	80006ac <traffic_leds_apply+0x70>
 800064c:	a201      	add	r2, pc, #4	; (adr r2, 8000654 <traffic_leds_apply+0x18>)
 800064e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000652:	bf00      	nop
 8000654:	08000665 	.word	0x08000665
 8000658:	08000677 	.word	0x08000677
 800065c:	08000689 	.word	0x08000689
 8000660:	0800069b 	.word	0x0800069b
    case PH_WE_GREEN:   we_grn_on(); ns_red_on(); ea_grn_on(); so_red_on(); break;
 8000664:	f7ff fdc0 	bl	80001e8 <we_grn_on>
 8000668:	f7ff fdca 	bl	8000200 <ns_red_on>
 800066c:	f7ff fe04 	bl	8000278 <ea_grn_on>
 8000670:	f7ff fe0e 	bl	8000290 <so_red_on>
 8000674:	e01a      	b.n	80006ac <traffic_leds_apply+0x70>
    case PH_WE_YELLOW:  we_yel_on(); ns_red_on(); ea_yel_on(); so_red_on(); break;
 8000676:	f7ff fdab 	bl	80001d0 <we_yel_on>
 800067a:	f7ff fdc1 	bl	8000200 <ns_red_on>
 800067e:	f7ff fdef 	bl	8000260 <ea_yel_on>
 8000682:	f7ff fe05 	bl	8000290 <so_red_on>
 8000686:	e011      	b.n	80006ac <traffic_leds_apply+0x70>
    case PH_NS_GREEN:   we_red_on(); ns_grn_on(); ea_red_on(); so_grn_on(); break;
 8000688:	f7ff fd96 	bl	80001b8 <we_red_on>
 800068c:	f7ff fdd0 	bl	8000230 <ns_grn_on>
 8000690:	f7ff fdda 	bl	8000248 <ea_red_on>
 8000694:	f7ff fe14 	bl	80002c0 <so_grn_on>
 8000698:	e008      	b.n	80006ac <traffic_leds_apply+0x70>
    case PH_NS_YELLOW:  we_red_on(); ns_yel_on(); ea_red_on(); so_yel_on(); break;
 800069a:	f7ff fd8d 	bl	80001b8 <we_red_on>
 800069e:	f7ff fdbb 	bl	8000218 <ns_yel_on>
 80006a2:	f7ff fdd1 	bl	8000248 <ea_red_on>
 80006a6:	f7ff fdff 	bl	80002a8 <so_yel_on>
 80006aa:	bf00      	nop
  }
}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000037 	.word	0x20000037

080006b4 <traffic_phase_start>:

static void traffic_phase_start(phase_t ph){
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	71fb      	strb	r3, [r7, #7]
  phase = ph;
 80006be:	4a19      	ldr	r2, [pc, #100]	; (8000724 <traffic_phase_start+0x70>)
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	7013      	strb	r3, [r2, #0]
  switch (phase){
 80006c4:	4b17      	ldr	r3, [pc, #92]	; (8000724 <traffic_phase_start+0x70>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	2b03      	cmp	r3, #3
 80006ca:	d81f      	bhi.n	800070c <traffic_phase_start+0x58>
 80006cc:	a201      	add	r2, pc, #4	; (adr r2, 80006d4 <traffic_phase_start+0x20>)
 80006ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006d2:	bf00      	nop
 80006d4:	080006e5 	.word	0x080006e5
 80006d8:	080006ef 	.word	0x080006ef
 80006dc:	080006f9 	.word	0x080006f9
 80006e0:	08000703 	.word	0x08000703
    case PH_WE_GREEN:   phase_remain = ew_green;  break;
 80006e4:	4b10      	ldr	r3, [pc, #64]	; (8000728 <traffic_phase_start+0x74>)
 80006e6:	781a      	ldrb	r2, [r3, #0]
 80006e8:	4b10      	ldr	r3, [pc, #64]	; (800072c <traffic_phase_start+0x78>)
 80006ea:	701a      	strb	r2, [r3, #0]
 80006ec:	e00e      	b.n	800070c <traffic_phase_start+0x58>
    case PH_WE_YELLOW:  phase_remain = ew_yellow; break;
 80006ee:	4b10      	ldr	r3, [pc, #64]	; (8000730 <traffic_phase_start+0x7c>)
 80006f0:	781a      	ldrb	r2, [r3, #0]
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <traffic_phase_start+0x78>)
 80006f4:	701a      	strb	r2, [r3, #0]
 80006f6:	e009      	b.n	800070c <traffic_phase_start+0x58>
    case PH_NS_GREEN:   phase_remain = ns_green;  break;
 80006f8:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <traffic_phase_start+0x80>)
 80006fa:	781a      	ldrb	r2, [r3, #0]
 80006fc:	4b0b      	ldr	r3, [pc, #44]	; (800072c <traffic_phase_start+0x78>)
 80006fe:	701a      	strb	r2, [r3, #0]
 8000700:	e004      	b.n	800070c <traffic_phase_start+0x58>
    case PH_NS_YELLOW:  phase_remain = ns_yellow; break;
 8000702:	4b0d      	ldr	r3, [pc, #52]	; (8000738 <traffic_phase_start+0x84>)
 8000704:	781a      	ldrb	r2, [r3, #0]
 8000706:	4b09      	ldr	r3, [pc, #36]	; (800072c <traffic_phase_start+0x78>)
 8000708:	701a      	strb	r2, [r3, #0]
 800070a:	bf00      	nop
  }
  next_1s_ms = sys_ms + 1000;
 800070c:	4b0b      	ldr	r3, [pc, #44]	; (800073c <traffic_phase_start+0x88>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000714:	4a0a      	ldr	r2, [pc, #40]	; (8000740 <traffic_phase_start+0x8c>)
 8000716:	6013      	str	r3, [r2, #0]
  traffic_leds_apply();
 8000718:	f7ff ff90 	bl	800063c <traffic_leds_apply>
}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000037 	.word	0x20000037
 8000728:	20000004 	.word	0x20000004
 800072c:	20000038 	.word	0x20000038
 8000730:	20000005 	.word	0x20000005
 8000734:	20000001 	.word	0x20000001
 8000738:	20000002 	.word	0x20000002
 800073c:	20000078 	.word	0x20000078
 8000740:	2000003c 	.word	0x2000003c

08000744 <traffic_tick_1s>:

static void traffic_tick_1s(void){
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  if ((int32_t)(sys_ms - next_1s_ms) < 0) return;
 8000748:	4b1d      	ldr	r3, [pc, #116]	; (80007c0 <traffic_tick_1s+0x7c>)
 800074a:	681a      	ldr	r2, [r3, #0]
 800074c:	4b1d      	ldr	r3, [pc, #116]	; (80007c4 <traffic_tick_1s+0x80>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	1ad3      	subs	r3, r2, r3
 8000752:	2b00      	cmp	r3, #0
 8000754:	db32      	blt.n	80007bc <traffic_tick_1s+0x78>
  next_1s_ms += 1000;
 8000756:	4b1b      	ldr	r3, [pc, #108]	; (80007c4 <traffic_tick_1s+0x80>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800075e:	4a19      	ldr	r2, [pc, #100]	; (80007c4 <traffic_tick_1s+0x80>)
 8000760:	6013      	str	r3, [r2, #0]

  if (phase_remain > 0) phase_remain--;
 8000762:	4b19      	ldr	r3, [pc, #100]	; (80007c8 <traffic_tick_1s+0x84>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d005      	beq.n	8000776 <traffic_tick_1s+0x32>
 800076a:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <traffic_tick_1s+0x84>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	3b01      	subs	r3, #1
 8000770:	b2da      	uxtb	r2, r3
 8000772:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <traffic_tick_1s+0x84>)
 8000774:	701a      	strb	r2, [r3, #0]
  if (phase_remain == 0){
 8000776:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <traffic_tick_1s+0x84>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d11f      	bne.n	80007be <traffic_tick_1s+0x7a>
    switch (phase){
 800077e:	4b13      	ldr	r3, [pc, #76]	; (80007cc <traffic_tick_1s+0x88>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	2b03      	cmp	r3, #3
 8000784:	d81b      	bhi.n	80007be <traffic_tick_1s+0x7a>
 8000786:	a201      	add	r2, pc, #4	; (adr r2, 800078c <traffic_tick_1s+0x48>)
 8000788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800078c:	0800079d 	.word	0x0800079d
 8000790:	080007a5 	.word	0x080007a5
 8000794:	080007ad 	.word	0x080007ad
 8000798:	080007b5 	.word	0x080007b5
      case PH_WE_GREEN:   traffic_phase_start(PH_WE_YELLOW);  break;
 800079c:	2001      	movs	r0, #1
 800079e:	f7ff ff89 	bl	80006b4 <traffic_phase_start>
 80007a2:	e00c      	b.n	80007be <traffic_tick_1s+0x7a>
      case PH_WE_YELLOW:  traffic_phase_start(PH_NS_GREEN);   break;
 80007a4:	2002      	movs	r0, #2
 80007a6:	f7ff ff85 	bl	80006b4 <traffic_phase_start>
 80007aa:	e008      	b.n	80007be <traffic_tick_1s+0x7a>
      case PH_NS_GREEN:   traffic_phase_start(PH_NS_YELLOW);  break;
 80007ac:	2003      	movs	r0, #3
 80007ae:	f7ff ff81 	bl	80006b4 <traffic_phase_start>
 80007b2:	e004      	b.n	80007be <traffic_tick_1s+0x7a>
      case PH_NS_YELLOW:  traffic_phase_start(PH_WE_GREEN);   break;
 80007b4:	2000      	movs	r0, #0
 80007b6:	f7ff ff7d 	bl	80006b4 <traffic_phase_start>
 80007ba:	e000      	b.n	80007be <traffic_tick_1s+0x7a>
  if ((int32_t)(sys_ms - next_1s_ms) < 0) return;
 80007bc:	bf00      	nop
    }
  }
}
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000078 	.word	0x20000078
 80007c4:	2000003c 	.word	0x2000003c
 80007c8:	20000038 	.word	0x20000038
 80007cc:	20000037 	.word	0x20000037

080007d0 <recalc_times>:

static void recalc_times(void){
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  ns_red = ew_green + ew_yellow;
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <recalc_times+0x2c>)
 80007d6:	781a      	ldrb	r2, [r3, #0]
 80007d8:	4b09      	ldr	r3, [pc, #36]	; (8000800 <recalc_times+0x30>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	4413      	add	r3, r2
 80007de:	b2da      	uxtb	r2, r3
 80007e0:	4b08      	ldr	r3, [pc, #32]	; (8000804 <recalc_times+0x34>)
 80007e2:	701a      	strb	r2, [r3, #0]
  ew_red = ns_green + ns_yellow;
 80007e4:	4b08      	ldr	r3, [pc, #32]	; (8000808 <recalc_times+0x38>)
 80007e6:	781a      	ldrb	r2, [r3, #0]
 80007e8:	4b08      	ldr	r3, [pc, #32]	; (800080c <recalc_times+0x3c>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	4413      	add	r3, r2
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	4b07      	ldr	r3, [pc, #28]	; (8000810 <recalc_times+0x40>)
 80007f2:	701a      	strb	r2, [r3, #0]
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr
 80007fc:	20000004 	.word	0x20000004
 8000800:	20000005 	.word	0x20000005
 8000804:	20000003 	.word	0x20000003
 8000808:	20000001 	.word	0x20000001
 800080c:	20000002 	.word	0x20000002
 8000810:	20000006 	.word	0x20000006

08000814 <fsm_mode_processing>:

void fsm_mode_processing(void){
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
//  // --- BTN1 cycles modes ---
//  if (button_pressed_edge(0)){
//    mode = (mode == MODE_4) ? MODE_1 : (mode_t)(mode + 1);
//  }

  if (mode != last_mode){
 8000818:	4bad      	ldr	r3, [pc, #692]	; (8000ad0 <fsm_mode_processing+0x2bc>)
 800081a:	781a      	ldrb	r2, [r3, #0]
 800081c:	4bad      	ldr	r3, [pc, #692]	; (8000ad4 <fsm_mode_processing+0x2c0>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	429a      	cmp	r2, r3
 8000822:	d04d      	beq.n	80008c0 <fsm_mode_processing+0xac>
    last_mode = mode;
 8000824:	4baa      	ldr	r3, [pc, #680]	; (8000ad0 <fsm_mode_processing+0x2bc>)
 8000826:	781a      	ldrb	r2, [r3, #0]
 8000828:	4baa      	ldr	r3, [pc, #680]	; (8000ad4 <fsm_mode_processing+0x2c0>)
 800082a:	701a      	strb	r2, [r3, #0]
    if (mode == MODE_1){
 800082c:	4ba8      	ldr	r3, [pc, #672]	; (8000ad0 <fsm_mode_processing+0x2bc>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d103      	bne.n	800083c <fsm_mode_processing+0x28>
      traffic_phase_start(PH_WE_GREEN);
 8000834:	2000      	movs	r0, #0
 8000836:	f7ff ff3d 	bl	80006b4 <traffic_phase_start>
 800083a:	e044      	b.n	80008c6 <fsm_mode_processing+0xb2>
    } else {
        leds_all_off();
 800083c:	f7ff fcb0 	bl	80001a0 <leds_all_off>
        en_all_off();
 8000840:	f7ff fd6a 	bl	8000318 <en_all_off>

        ns_green_snap  = ns_green;
 8000844:	4ba4      	ldr	r3, [pc, #656]	; (8000ad8 <fsm_mode_processing+0x2c4>)
 8000846:	781a      	ldrb	r2, [r3, #0]
 8000848:	4ba4      	ldr	r3, [pc, #656]	; (8000adc <fsm_mode_processing+0x2c8>)
 800084a:	701a      	strb	r2, [r3, #0]
        ns_yellow_snap = ns_yellow;
 800084c:	4ba4      	ldr	r3, [pc, #656]	; (8000ae0 <fsm_mode_processing+0x2cc>)
 800084e:	781a      	ldrb	r2, [r3, #0]
 8000850:	4ba4      	ldr	r3, [pc, #656]	; (8000ae4 <fsm_mode_processing+0x2d0>)
 8000852:	701a      	strb	r2, [r3, #0]
        ns_red_snap    = ns_red;
 8000854:	4ba4      	ldr	r3, [pc, #656]	; (8000ae8 <fsm_mode_processing+0x2d4>)
 8000856:	781a      	ldrb	r2, [r3, #0]
 8000858:	4ba4      	ldr	r3, [pc, #656]	; (8000aec <fsm_mode_processing+0x2d8>)
 800085a:	701a      	strb	r2, [r3, #0]

        ns_green_edit  = ns_green;
 800085c:	4b9e      	ldr	r3, [pc, #632]	; (8000ad8 <fsm_mode_processing+0x2c4>)
 800085e:	781a      	ldrb	r2, [r3, #0]
 8000860:	4ba3      	ldr	r3, [pc, #652]	; (8000af0 <fsm_mode_processing+0x2dc>)
 8000862:	701a      	strb	r2, [r3, #0]
        ns_yellow_edit = ns_yellow;
 8000864:	4b9e      	ldr	r3, [pc, #632]	; (8000ae0 <fsm_mode_processing+0x2cc>)
 8000866:	781a      	ldrb	r2, [r3, #0]
 8000868:	4ba2      	ldr	r3, [pc, #648]	; (8000af4 <fsm_mode_processing+0x2e0>)
 800086a:	701a      	strb	r2, [r3, #0]
        ns_red_edit    = ns_red;
 800086c:	4b9e      	ldr	r3, [pc, #632]	; (8000ae8 <fsm_mode_processing+0x2d4>)
 800086e:	781a      	ldrb	r2, [r3, #0]
 8000870:	4ba1      	ldr	r3, [pc, #644]	; (8000af8 <fsm_mode_processing+0x2e4>)
 8000872:	701a      	strb	r2, [r3, #0]

        switch (mode){
 8000874:	4b96      	ldr	r3, [pc, #600]	; (8000ad0 <fsm_mode_processing+0x2bc>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b03      	cmp	r3, #3
 800087a:	d018      	beq.n	80008ae <fsm_mode_processing+0x9a>
 800087c:	2b03      	cmp	r3, #3
 800087e:	dc21      	bgt.n	80008c4 <fsm_mode_processing+0xb0>
 8000880:	2b01      	cmp	r3, #1
 8000882:	d002      	beq.n	800088a <fsm_mode_processing+0x76>
 8000884:	2b02      	cmp	r3, #2
 8000886:	d009      	beq.n	800089c <fsm_mode_processing+0x88>
          case MODE_2: we_red_on(); ns_red_on(); ea_red_on(); so_red_on(); break;
          case MODE_3: we_yel_on(); ns_yel_on(); ea_yel_on(); so_yel_on(); break;
          case MODE_4: we_grn_on(); ns_grn_on(); ea_grn_on(); so_grn_on(); break;
          break;
          default:
          break;
 8000888:	e01c      	b.n	80008c4 <fsm_mode_processing+0xb0>
          case MODE_2: we_red_on(); ns_red_on(); ea_red_on(); so_red_on(); break;
 800088a:	f7ff fc95 	bl	80001b8 <we_red_on>
 800088e:	f7ff fcb7 	bl	8000200 <ns_red_on>
 8000892:	f7ff fcd9 	bl	8000248 <ea_red_on>
 8000896:	f7ff fcfb 	bl	8000290 <so_red_on>
 800089a:	e014      	b.n	80008c6 <fsm_mode_processing+0xb2>
          case MODE_3: we_yel_on(); ns_yel_on(); ea_yel_on(); so_yel_on(); break;
 800089c:	f7ff fc98 	bl	80001d0 <we_yel_on>
 80008a0:	f7ff fcba 	bl	8000218 <ns_yel_on>
 80008a4:	f7ff fcdc 	bl	8000260 <ea_yel_on>
 80008a8:	f7ff fcfe 	bl	80002a8 <so_yel_on>
 80008ac:	e00b      	b.n	80008c6 <fsm_mode_processing+0xb2>
          case MODE_4: we_grn_on(); ns_grn_on(); ea_grn_on(); so_grn_on(); break;
 80008ae:	f7ff fc9b 	bl	80001e8 <we_grn_on>
 80008b2:	f7ff fcbd 	bl	8000230 <ns_grn_on>
 80008b6:	f7ff fcdf 	bl	8000278 <ea_grn_on>
 80008ba:	f7ff fd01 	bl	80002c0 <so_grn_on>
 80008be:	e002      	b.n	80008c6 <fsm_mode_processing+0xb2>
        }
      }
 80008c0:	bf00      	nop
 80008c2:	e000      	b.n	80008c6 <fsm_mode_processing+0xb2>
          break;
 80008c4:	bf00      	nop
  }

  switch (mode){
 80008c6:	4b82      	ldr	r3, [pc, #520]	; (8000ad0 <fsm_mode_processing+0x2bc>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	2b03      	cmp	r3, #3
 80008cc:	f200 8121 	bhi.w	8000b12 <fsm_mode_processing+0x2fe>
 80008d0:	a201      	add	r2, pc, #4	; (adr r2, 80008d8 <fsm_mode_processing+0xc4>)
 80008d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008d6:	bf00      	nop
 80008d8:	080008e9 	.word	0x080008e9
 80008dc:	0800090d 	.word	0x0800090d
 80008e0:	080009bd 	.word	0x080009bd
 80008e4:	08000a4d 	.word	0x08000a4d
  case MODE_1:
    if (button_pressed_edge(BTN1)) { mode = MODE_2; last_mode = 255; break; }
 80008e8:	2000      	movs	r0, #0
 80008ea:	f000 fa35 	bl	8000d58 <button_pressed_edge>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d006      	beq.n	8000902 <fsm_mode_processing+0xee>
 80008f4:	4b76      	ldr	r3, [pc, #472]	; (8000ad0 <fsm_mode_processing+0x2bc>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	701a      	strb	r2, [r3, #0]
 80008fa:	4b76      	ldr	r3, [pc, #472]	; (8000ad4 <fsm_mode_processing+0x2c0>)
 80008fc:	22ff      	movs	r2, #255	; 0xff
 80008fe:	701a      	strb	r2, [r3, #0]
 8000900:	e107      	b.n	8000b12 <fsm_mode_processing+0x2fe>
    traffic_tick_1s();
 8000902:	f7ff ff1f 	bl	8000744 <traffic_tick_1s>
    display_update_250ms();
 8000906:	f7ff fe37 	bl	8000578 <display_update_250ms>
    break;
 800090a:	e102      	b.n	8000b12 <fsm_mode_processing+0x2fe>

    case MODE_2:
      if (button_pressed_edge(BTN2)) {
 800090c:	2001      	movs	r0, #1
 800090e:	f000 fa23 	bl	8000d58 <button_pressed_edge>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d00c      	beq.n	8000932 <fsm_mode_processing+0x11e>
    	  ns_red_edit = (ns_red_edit + BTN2_STEP);
 8000918:	4b77      	ldr	r3, [pc, #476]	; (8000af8 <fsm_mode_processing+0x2e4>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	3301      	adds	r3, #1
 800091e:	b2da      	uxtb	r2, r3
 8000920:	4b75      	ldr	r3, [pc, #468]	; (8000af8 <fsm_mode_processing+0x2e4>)
 8000922:	701a      	strb	r2, [r3, #0]
        if (ns_red_edit > 99) ns_red_edit = 1;
 8000924:	4b74      	ldr	r3, [pc, #464]	; (8000af8 <fsm_mode_processing+0x2e4>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2b63      	cmp	r3, #99	; 0x63
 800092a:	d902      	bls.n	8000932 <fsm_mode_processing+0x11e>
 800092c:	4b72      	ldr	r3, [pc, #456]	; (8000af8 <fsm_mode_processing+0x2e4>)
 800092e:	2201      	movs	r2, #1
 8000930:	701a      	strb	r2, [r3, #0]
      }
      if (button_pressed_edge(BTN3)) {
 8000932:	2002      	movs	r0, #2
 8000934:	f000 fa10 	bl	8000d58 <button_pressed_edge>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d01c      	beq.n	8000978 <fsm_mode_processing+0x164>
        ns_red = ns_red_edit;
 800093e:	4b6e      	ldr	r3, [pc, #440]	; (8000af8 <fsm_mode_processing+0x2e4>)
 8000940:	781a      	ldrb	r2, [r3, #0]
 8000942:	4b69      	ldr	r3, [pc, #420]	; (8000ae8 <fsm_mode_processing+0x2d4>)
 8000944:	701a      	strb	r2, [r3, #0]
        ew_green = (ns_red > ew_yellow) ? (ns_red - ew_yellow) : 1;
 8000946:	4b68      	ldr	r3, [pc, #416]	; (8000ae8 <fsm_mode_processing+0x2d4>)
 8000948:	781a      	ldrb	r2, [r3, #0]
 800094a:	4b6c      	ldr	r3, [pc, #432]	; (8000afc <fsm_mode_processing+0x2e8>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	429a      	cmp	r2, r3
 8000950:	d906      	bls.n	8000960 <fsm_mode_processing+0x14c>
 8000952:	4b65      	ldr	r3, [pc, #404]	; (8000ae8 <fsm_mode_processing+0x2d4>)
 8000954:	781a      	ldrb	r2, [r3, #0]
 8000956:	4b69      	ldr	r3, [pc, #420]	; (8000afc <fsm_mode_processing+0x2e8>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	1ad3      	subs	r3, r2, r3
 800095c:	b2db      	uxtb	r3, r3
 800095e:	e000      	b.n	8000962 <fsm_mode_processing+0x14e>
 8000960:	2301      	movs	r3, #1
 8000962:	4a67      	ldr	r2, [pc, #412]	; (8000b00 <fsm_mode_processing+0x2ec>)
 8000964:	7013      	strb	r3, [r2, #0]
        recalc_times();
 8000966:	f7ff ff33 	bl	80007d0 <recalc_times>
        mode = MODE_1; last_mode = 255; break;
 800096a:	4b59      	ldr	r3, [pc, #356]	; (8000ad0 <fsm_mode_processing+0x2bc>)
 800096c:	2200      	movs	r2, #0
 800096e:	701a      	strb	r2, [r3, #0]
 8000970:	4b58      	ldr	r3, [pc, #352]	; (8000ad4 <fsm_mode_processing+0x2c0>)
 8000972:	22ff      	movs	r2, #255	; 0xff
 8000974:	701a      	strb	r2, [r3, #0]
 8000976:	e0cc      	b.n	8000b12 <fsm_mode_processing+0x2fe>
      }
      if (button_pressed_edge(BTN1)) {
 8000978:	2000      	movs	r0, #0
 800097a:	f000 f9ed 	bl	8000d58 <button_pressed_edge>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d014      	beq.n	80009ae <fsm_mode_processing+0x19a>
        ns_green  = ns_green_snap;
 8000984:	4b55      	ldr	r3, [pc, #340]	; (8000adc <fsm_mode_processing+0x2c8>)
 8000986:	781a      	ldrb	r2, [r3, #0]
 8000988:	4b53      	ldr	r3, [pc, #332]	; (8000ad8 <fsm_mode_processing+0x2c4>)
 800098a:	701a      	strb	r2, [r3, #0]
        ns_yellow = ns_yellow_snap;
 800098c:	4b55      	ldr	r3, [pc, #340]	; (8000ae4 <fsm_mode_processing+0x2d0>)
 800098e:	781a      	ldrb	r2, [r3, #0]
 8000990:	4b53      	ldr	r3, [pc, #332]	; (8000ae0 <fsm_mode_processing+0x2cc>)
 8000992:	701a      	strb	r2, [r3, #0]
        ns_red    = ns_red_snap;
 8000994:	4b55      	ldr	r3, [pc, #340]	; (8000aec <fsm_mode_processing+0x2d8>)
 8000996:	781a      	ldrb	r2, [r3, #0]
 8000998:	4b53      	ldr	r3, [pc, #332]	; (8000ae8 <fsm_mode_processing+0x2d4>)
 800099a:	701a      	strb	r2, [r3, #0]
        recalc_times();
 800099c:	f7ff ff18 	bl	80007d0 <recalc_times>
        mode = MODE_3; last_mode = 255; break;
 80009a0:	4b4b      	ldr	r3, [pc, #300]	; (8000ad0 <fsm_mode_processing+0x2bc>)
 80009a2:	2202      	movs	r2, #2
 80009a4:	701a      	strb	r2, [r3, #0]
 80009a6:	4b4b      	ldr	r3, [pc, #300]	; (8000ad4 <fsm_mode_processing+0x2c0>)
 80009a8:	22ff      	movs	r2, #255	; 0xff
 80009aa:	701a      	strb	r2, [r3, #0]
 80009ac:	e0b1      	b.n	8000b12 <fsm_mode_processing+0x2fe>
      }

      display_mode_update_250ms(2, ns_red_edit);
 80009ae:	4b52      	ldr	r3, [pc, #328]	; (8000af8 <fsm_mode_processing+0x2e4>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	4619      	mov	r1, r3
 80009b4:	2002      	movs	r0, #2
 80009b6:	f7ff fd37 	bl	8000428 <display_mode_update_250ms>
      break;
 80009ba:	e0aa      	b.n	8000b12 <fsm_mode_processing+0x2fe>

    case MODE_3:
      if (button_pressed_edge(BTN2)) {
 80009bc:	2001      	movs	r0, #1
 80009be:	f000 f9cb 	bl	8000d58 <button_pressed_edge>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d00c      	beq.n	80009e2 <fsm_mode_processing+0x1ce>
    	  ns_yellow_edit = (ns_yellow_edit + BTN2_STEP);
 80009c8:	4b4a      	ldr	r3, [pc, #296]	; (8000af4 <fsm_mode_processing+0x2e0>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	3301      	adds	r3, #1
 80009ce:	b2da      	uxtb	r2, r3
 80009d0:	4b48      	ldr	r3, [pc, #288]	; (8000af4 <fsm_mode_processing+0x2e0>)
 80009d2:	701a      	strb	r2, [r3, #0]
        if (ns_yellow_edit > 99) ns_yellow_edit = 1;
 80009d4:	4b47      	ldr	r3, [pc, #284]	; (8000af4 <fsm_mode_processing+0x2e0>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b63      	cmp	r3, #99	; 0x63
 80009da:	d902      	bls.n	80009e2 <fsm_mode_processing+0x1ce>
 80009dc:	4b45      	ldr	r3, [pc, #276]	; (8000af4 <fsm_mode_processing+0x2e0>)
 80009de:	2201      	movs	r2, #1
 80009e0:	701a      	strb	r2, [r3, #0]
      }
      if (button_pressed_edge(BTN3)) {
 80009e2:	2002      	movs	r0, #2
 80009e4:	f000 f9b8 	bl	8000d58 <button_pressed_edge>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d00c      	beq.n	8000a08 <fsm_mode_processing+0x1f4>
        ns_yellow = ns_yellow_edit;
 80009ee:	4b41      	ldr	r3, [pc, #260]	; (8000af4 <fsm_mode_processing+0x2e0>)
 80009f0:	781a      	ldrb	r2, [r3, #0]
 80009f2:	4b3b      	ldr	r3, [pc, #236]	; (8000ae0 <fsm_mode_processing+0x2cc>)
 80009f4:	701a      	strb	r2, [r3, #0]
        recalc_times();
 80009f6:	f7ff feeb 	bl	80007d0 <recalc_times>
        mode = MODE_1; last_mode = 255; break;
 80009fa:	4b35      	ldr	r3, [pc, #212]	; (8000ad0 <fsm_mode_processing+0x2bc>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	701a      	strb	r2, [r3, #0]
 8000a00:	4b34      	ldr	r3, [pc, #208]	; (8000ad4 <fsm_mode_processing+0x2c0>)
 8000a02:	22ff      	movs	r2, #255	; 0xff
 8000a04:	701a      	strb	r2, [r3, #0]
 8000a06:	e084      	b.n	8000b12 <fsm_mode_processing+0x2fe>
      }
      if (button_pressed_edge(BTN1)) {
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f000 f9a5 	bl	8000d58 <button_pressed_edge>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d014      	beq.n	8000a3e <fsm_mode_processing+0x22a>
        ns_green  = ns_green_snap;
 8000a14:	4b31      	ldr	r3, [pc, #196]	; (8000adc <fsm_mode_processing+0x2c8>)
 8000a16:	781a      	ldrb	r2, [r3, #0]
 8000a18:	4b2f      	ldr	r3, [pc, #188]	; (8000ad8 <fsm_mode_processing+0x2c4>)
 8000a1a:	701a      	strb	r2, [r3, #0]
        ns_yellow = ns_yellow_snap;
 8000a1c:	4b31      	ldr	r3, [pc, #196]	; (8000ae4 <fsm_mode_processing+0x2d0>)
 8000a1e:	781a      	ldrb	r2, [r3, #0]
 8000a20:	4b2f      	ldr	r3, [pc, #188]	; (8000ae0 <fsm_mode_processing+0x2cc>)
 8000a22:	701a      	strb	r2, [r3, #0]
        ns_red    = ns_red_snap;
 8000a24:	4b31      	ldr	r3, [pc, #196]	; (8000aec <fsm_mode_processing+0x2d8>)
 8000a26:	781a      	ldrb	r2, [r3, #0]
 8000a28:	4b2f      	ldr	r3, [pc, #188]	; (8000ae8 <fsm_mode_processing+0x2d4>)
 8000a2a:	701a      	strb	r2, [r3, #0]
        recalc_times();
 8000a2c:	f7ff fed0 	bl	80007d0 <recalc_times>
        mode = MODE_4; last_mode = 255; break;
 8000a30:	4b27      	ldr	r3, [pc, #156]	; (8000ad0 <fsm_mode_processing+0x2bc>)
 8000a32:	2203      	movs	r2, #3
 8000a34:	701a      	strb	r2, [r3, #0]
 8000a36:	4b27      	ldr	r3, [pc, #156]	; (8000ad4 <fsm_mode_processing+0x2c0>)
 8000a38:	22ff      	movs	r2, #255	; 0xff
 8000a3a:	701a      	strb	r2, [r3, #0]
 8000a3c:	e069      	b.n	8000b12 <fsm_mode_processing+0x2fe>
      }

      display_mode_update_250ms(3, ns_yellow_edit);
 8000a3e:	4b2d      	ldr	r3, [pc, #180]	; (8000af4 <fsm_mode_processing+0x2e0>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	4619      	mov	r1, r3
 8000a44:	2003      	movs	r0, #3
 8000a46:	f7ff fcef 	bl	8000428 <display_mode_update_250ms>
      break;
 8000a4a:	e062      	b.n	8000b12 <fsm_mode_processing+0x2fe>

    case MODE_4:
      if (button_pressed_edge(BTN2)) {
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	f000 f983 	bl	8000d58 <button_pressed_edge>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d00c      	beq.n	8000a72 <fsm_mode_processing+0x25e>
    	  ns_green_edit = (ns_green_edit + BTN2_STEP);
 8000a58:	4b25      	ldr	r3, [pc, #148]	; (8000af0 <fsm_mode_processing+0x2dc>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	b2da      	uxtb	r2, r3
 8000a60:	4b23      	ldr	r3, [pc, #140]	; (8000af0 <fsm_mode_processing+0x2dc>)
 8000a62:	701a      	strb	r2, [r3, #0]
        if (ns_green_edit > 99) ns_green_edit = 1;
 8000a64:	4b22      	ldr	r3, [pc, #136]	; (8000af0 <fsm_mode_processing+0x2dc>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b63      	cmp	r3, #99	; 0x63
 8000a6a:	d902      	bls.n	8000a72 <fsm_mode_processing+0x25e>
 8000a6c:	4b20      	ldr	r3, [pc, #128]	; (8000af0 <fsm_mode_processing+0x2dc>)
 8000a6e:	2201      	movs	r2, #1
 8000a70:	701a      	strb	r2, [r3, #0]
      }
      if (button_pressed_edge(BTN3)) {
 8000a72:	2002      	movs	r0, #2
 8000a74:	f000 f970 	bl	8000d58 <button_pressed_edge>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d00c      	beq.n	8000a98 <fsm_mode_processing+0x284>
        ns_green = ns_green_edit;
 8000a7e:	4b1c      	ldr	r3, [pc, #112]	; (8000af0 <fsm_mode_processing+0x2dc>)
 8000a80:	781a      	ldrb	r2, [r3, #0]
 8000a82:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <fsm_mode_processing+0x2c4>)
 8000a84:	701a      	strb	r2, [r3, #0]
        recalc_times();
 8000a86:	f7ff fea3 	bl	80007d0 <recalc_times>
        mode = MODE_1; last_mode = 255; break;
 8000a8a:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <fsm_mode_processing+0x2bc>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	701a      	strb	r2, [r3, #0]
 8000a90:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <fsm_mode_processing+0x2c0>)
 8000a92:	22ff      	movs	r2, #255	; 0xff
 8000a94:	701a      	strb	r2, [r3, #0]
 8000a96:	e03c      	b.n	8000b12 <fsm_mode_processing+0x2fe>
      }
      if (button_pressed_edge(BTN1)) {
 8000a98:	2000      	movs	r0, #0
 8000a9a:	f000 f95d 	bl	8000d58 <button_pressed_edge>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d02f      	beq.n	8000b04 <fsm_mode_processing+0x2f0>
        ns_green  = ns_green_snap;
 8000aa4:	4b0d      	ldr	r3, [pc, #52]	; (8000adc <fsm_mode_processing+0x2c8>)
 8000aa6:	781a      	ldrb	r2, [r3, #0]
 8000aa8:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <fsm_mode_processing+0x2c4>)
 8000aaa:	701a      	strb	r2, [r3, #0]
        ns_yellow = ns_yellow_snap;
 8000aac:	4b0d      	ldr	r3, [pc, #52]	; (8000ae4 <fsm_mode_processing+0x2d0>)
 8000aae:	781a      	ldrb	r2, [r3, #0]
 8000ab0:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <fsm_mode_processing+0x2cc>)
 8000ab2:	701a      	strb	r2, [r3, #0]
        ns_red    = ns_red_snap;
 8000ab4:	4b0d      	ldr	r3, [pc, #52]	; (8000aec <fsm_mode_processing+0x2d8>)
 8000ab6:	781a      	ldrb	r2, [r3, #0]
 8000ab8:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <fsm_mode_processing+0x2d4>)
 8000aba:	701a      	strb	r2, [r3, #0]
        recalc_times();
 8000abc:	f7ff fe88 	bl	80007d0 <recalc_times>
        mode = MODE_1; last_mode = 255; break;
 8000ac0:	4b03      	ldr	r3, [pc, #12]	; (8000ad0 <fsm_mode_processing+0x2bc>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	701a      	strb	r2, [r3, #0]
 8000ac6:	4b03      	ldr	r3, [pc, #12]	; (8000ad4 <fsm_mode_processing+0x2c0>)
 8000ac8:	22ff      	movs	r2, #255	; 0xff
 8000aca:	701a      	strb	r2, [r3, #0]
 8000acc:	e021      	b.n	8000b12 <fsm_mode_processing+0x2fe>
 8000ace:	bf00      	nop
 8000ad0:	20000036 	.word	0x20000036
 8000ad4:	20000000 	.word	0x20000000
 8000ad8:	20000001 	.word	0x20000001
 8000adc:	20000030 	.word	0x20000030
 8000ae0:	20000002 	.word	0x20000002
 8000ae4:	20000031 	.word	0x20000031
 8000ae8:	20000003 	.word	0x20000003
 8000aec:	20000032 	.word	0x20000032
 8000af0:	20000033 	.word	0x20000033
 8000af4:	20000034 	.word	0x20000034
 8000af8:	20000035 	.word	0x20000035
 8000afc:	20000005 	.word	0x20000005
 8000b00:	20000004 	.word	0x20000004
      }

      display_mode_update_250ms(4, ns_green_edit);
 8000b04:	4b04      	ldr	r3, [pc, #16]	; (8000b18 <fsm_mode_processing+0x304>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	4619      	mov	r1, r3
 8000b0a:	2004      	movs	r0, #4
 8000b0c:	f7ff fc8c 	bl	8000428 <display_mode_update_250ms>
      break;
 8000b10:	bf00      	nop
  }
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000033 	.word	0x20000033

08000b1c <read_hw>:

// edge one-shots (latched until read)
static uint8_t pressed_edge_oneshot[NUM_BUTTONS];
static uint8_t released_edge_oneshot[NUM_BUTTONS];

static inline GPIO_PinState read_hw(button_id_t id){
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	71fb      	strb	r3, [r7, #7]
  switch (id){
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d002      	beq.n	8000b32 <read_hw+0x16>
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d006      	beq.n	8000b3e <read_hw+0x22>
 8000b30:	e00b      	b.n	8000b4a <read_hw+0x2e>
    case BTN1: return HAL_GPIO_ReadPin(GPIOB, BTN1_Pin);
 8000b32:	2101      	movs	r1, #1
 8000b34:	4809      	ldr	r0, [pc, #36]	; (8000b5c <read_hw+0x40>)
 8000b36:	f000 fe03 	bl	8001740 <HAL_GPIO_ReadPin>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	e00a      	b.n	8000b54 <read_hw+0x38>
    case BTN2: return HAL_GPIO_ReadPin(GPIOB, BTN2_Pin);
 8000b3e:	2102      	movs	r1, #2
 8000b40:	4806      	ldr	r0, [pc, #24]	; (8000b5c <read_hw+0x40>)
 8000b42:	f000 fdfd 	bl	8001740 <HAL_GPIO_ReadPin>
 8000b46:	4603      	mov	r3, r0
 8000b48:	e004      	b.n	8000b54 <read_hw+0x38>
    default:   return HAL_GPIO_ReadPin(GPIOB, BTN3_Pin);
 8000b4a:	2104      	movs	r1, #4
 8000b4c:	4803      	ldr	r0, [pc, #12]	; (8000b5c <read_hw+0x40>)
 8000b4e:	f000 fdf7 	bl	8001740 <HAL_GPIO_ReadPin>
 8000b52:	4603      	mov	r3, r0
  }
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40010c00 	.word	0x40010c00

08000b60 <buttons_init>:

void buttons_init(void){
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
  for (int i = 0; i < NUM_BUTTONS; ++i){
 8000b66:	2300      	movs	r3, #0
 8000b68:	607b      	str	r3, [r7, #4]
 8000b6a:	e032      	b.n	8000bd2 <buttons_init+0x72>
    dbuf1[i] = dbuf2[i] = BUTTON_IS_RELEASED_LEVEL;
 8000b6c:	4a1d      	ldr	r2, [pc, #116]	; (8000be4 <buttons_init+0x84>)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4413      	add	r3, r2
 8000b72:	2201      	movs	r2, #1
 8000b74:	701a      	strb	r2, [r3, #0]
 8000b76:	4a1b      	ldr	r2, [pc, #108]	; (8000be4 <buttons_init+0x84>)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	7819      	ldrb	r1, [r3, #0]
 8000b7e:	4a1a      	ldr	r2, [pc, #104]	; (8000be8 <buttons_init+0x88>)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4413      	add	r3, r2
 8000b84:	460a      	mov	r2, r1
 8000b86:	701a      	strb	r2, [r3, #0]
    stable_prev[i] = stable_pressed[i] = 0; // logical released
 8000b88:	4a18      	ldr	r2, [pc, #96]	; (8000bec <buttons_init+0x8c>)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	2200      	movs	r2, #0
 8000b90:	701a      	strb	r2, [r3, #0]
 8000b92:	4a16      	ldr	r2, [pc, #88]	; (8000bec <buttons_init+0x8c>)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	4413      	add	r3, r2
 8000b98:	7819      	ldrb	r1, [r3, #0]
 8000b9a:	4a15      	ldr	r2, [pc, #84]	; (8000bf0 <buttons_init+0x90>)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	460a      	mov	r2, r1
 8000ba2:	701a      	strb	r2, [r3, #0]
    hold_cnt[i] = 0;
 8000ba4:	4a13      	ldr	r2, [pc, #76]	; (8000bf4 <buttons_init+0x94>)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2100      	movs	r1, #0
 8000baa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    long_pressed[i] = 0;
 8000bae:	4a12      	ldr	r2, [pc, #72]	; (8000bf8 <buttons_init+0x98>)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	701a      	strb	r2, [r3, #0]
    pressed_edge_oneshot[i] = 0;
 8000bb8:	4a10      	ldr	r2, [pc, #64]	; (8000bfc <buttons_init+0x9c>)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	701a      	strb	r2, [r3, #0]
    released_edge_oneshot[i] = 0;
 8000bc2:	4a0f      	ldr	r2, [pc, #60]	; (8000c00 <buttons_init+0xa0>)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	2200      	movs	r2, #0
 8000bca:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < NUM_BUTTONS; ++i){
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	607b      	str	r3, [r7, #4]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2b02      	cmp	r3, #2
 8000bd6:	ddc9      	ble.n	8000b6c <buttons_init+0xc>
  }
}
 8000bd8:	bf00      	nop
 8000bda:	bf00      	nop
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bc80      	pop	{r7}
 8000be2:	4770      	bx	lr
 8000be4:	2000005c 	.word	0x2000005c
 8000be8:	20000058 	.word	0x20000058
 8000bec:	20000050 	.word	0x20000050
 8000bf0:	20000054 	.word	0x20000054
 8000bf4:	20000060 	.word	0x20000060
 8000bf8:	20000068 	.word	0x20000068
 8000bfc:	2000006c 	.word	0x2000006c
 8000c00:	20000070 	.word	0x20000070

08000c04 <buttons_reading_10ms>:

// Call every 10 ms (e.g., from TIM2 timebase)
void buttons_reading_10ms(void){
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
  for (int i = 0; i < NUM_BUTTONS; ++i){
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	607b      	str	r3, [r7, #4]
 8000c0e:	e089      	b.n	8000d24 <buttons_reading_10ms+0x120>
    dbuf2[i] = dbuf1[i];
 8000c10:	4a49      	ldr	r2, [pc, #292]	; (8000d38 <buttons_reading_10ms+0x134>)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4413      	add	r3, r2
 8000c16:	7819      	ldrb	r1, [r3, #0]
 8000c18:	4a48      	ldr	r2, [pc, #288]	; (8000d3c <buttons_reading_10ms+0x138>)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	460a      	mov	r2, r1
 8000c20:	701a      	strb	r2, [r3, #0]
    dbuf1[i] = read_hw((button_id_t)i);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff ff78 	bl	8000b1c <read_hw>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4a41      	ldr	r2, [pc, #260]	; (8000d38 <buttons_reading_10ms+0x134>)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4413      	add	r3, r2
 8000c36:	460a      	mov	r2, r1
 8000c38:	701a      	strb	r2, [r3, #0]

    if (dbuf1[i] == dbuf2[i]){
 8000c3a:	4a3f      	ldr	r2, [pc, #252]	; (8000d38 <buttons_reading_10ms+0x134>)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	4413      	add	r3, r2
 8000c40:	781a      	ldrb	r2, [r3, #0]
 8000c42:	493e      	ldr	r1, [pc, #248]	; (8000d3c <buttons_reading_10ms+0x138>)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	440b      	add	r3, r1
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d167      	bne.n	8000d1e <buttons_reading_10ms+0x11a>
      uint8_t new_pressed = (dbuf1[i] == BUTTON_IS_PRESSED_LEVEL) ? 1u : 0u;
 8000c4e:	4a3a      	ldr	r2, [pc, #232]	; (8000d38 <buttons_reading_10ms+0x134>)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4413      	add	r3, r2
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d101      	bne.n	8000c5e <buttons_reading_10ms+0x5a>
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e000      	b.n	8000c60 <buttons_reading_10ms+0x5c>
 8000c5e:	2300      	movs	r3, #0
 8000c60:	70fb      	strb	r3, [r7, #3]

      if (new_pressed != stable_pressed[i]){
 8000c62:	4a37      	ldr	r2, [pc, #220]	; (8000d40 <buttons_reading_10ms+0x13c>)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	4413      	add	r3, r2
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	78fa      	ldrb	r2, [r7, #3]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d02f      	beq.n	8000cd0 <buttons_reading_10ms+0xcc>
        if (new_pressed){
 8000c70:	78fb      	ldrb	r3, [r7, #3]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d00f      	beq.n	8000c96 <buttons_reading_10ms+0x92>
          pressed_edge_oneshot[i] = 1;
 8000c76:	4a33      	ldr	r2, [pc, #204]	; (8000d44 <buttons_reading_10ms+0x140>)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	701a      	strb	r2, [r3, #0]
          hold_cnt[i] = 0;
 8000c80:	4a31      	ldr	r2, [pc, #196]	; (8000d48 <buttons_reading_10ms+0x144>)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2100      	movs	r1, #0
 8000c86:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
          long_pressed[i] = 0;
 8000c8a:	4a30      	ldr	r2, [pc, #192]	; (8000d4c <buttons_reading_10ms+0x148>)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4413      	add	r3, r2
 8000c90:	2200      	movs	r2, #0
 8000c92:	701a      	strb	r2, [r3, #0]
 8000c94:	e00e      	b.n	8000cb4 <buttons_reading_10ms+0xb0>
        } else {
          released_edge_oneshot[i] = 1;
 8000c96:	4a2e      	ldr	r2, [pc, #184]	; (8000d50 <buttons_reading_10ms+0x14c>)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	701a      	strb	r2, [r3, #0]
          hold_cnt[i] = 0;
 8000ca0:	4a29      	ldr	r2, [pc, #164]	; (8000d48 <buttons_reading_10ms+0x144>)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
          long_pressed[i] = 0;
 8000caa:	4a28      	ldr	r2, [pc, #160]	; (8000d4c <buttons_reading_10ms+0x148>)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4413      	add	r3, r2
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	701a      	strb	r2, [r3, #0]
        }
        stable_prev[i]    = stable_pressed[i];
 8000cb4:	4a22      	ldr	r2, [pc, #136]	; (8000d40 <buttons_reading_10ms+0x13c>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4413      	add	r3, r2
 8000cba:	7819      	ldrb	r1, [r3, #0]
 8000cbc:	4a25      	ldr	r2, [pc, #148]	; (8000d54 <buttons_reading_10ms+0x150>)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	460a      	mov	r2, r1
 8000cc4:	701a      	strb	r2, [r3, #0]
        stable_pressed[i] = new_pressed;
 8000cc6:	4a1e      	ldr	r2, [pc, #120]	; (8000d40 <buttons_reading_10ms+0x13c>)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4413      	add	r3, r2
 8000ccc:	78fa      	ldrb	r2, [r7, #3]
 8000cce:	701a      	strb	r2, [r3, #0]
      }

      if (stable_pressed[i]){
 8000cd0:	4a1b      	ldr	r2, [pc, #108]	; (8000d40 <buttons_reading_10ms+0x13c>)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d020      	beq.n	8000d1e <buttons_reading_10ms+0x11a>
        if (hold_cnt[i] < DURATION_FOR_LONGPRESS_1S) {
 8000cdc:	4a1a      	ldr	r2, [pc, #104]	; (8000d48 <buttons_reading_10ms+0x144>)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ce4:	2b63      	cmp	r3, #99	; 0x63
 8000ce6:	d815      	bhi.n	8000d14 <buttons_reading_10ms+0x110>
          hold_cnt[i]++;
 8000ce8:	4a17      	ldr	r2, [pc, #92]	; (8000d48 <buttons_reading_10ms+0x144>)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	b299      	uxth	r1, r3
 8000cf4:	4a14      	ldr	r2, [pc, #80]	; (8000d48 <buttons_reading_10ms+0x144>)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
          if (hold_cnt[i] >= DURATION_FOR_LONGPRESS_1S){
 8000cfc:	4a12      	ldr	r2, [pc, #72]	; (8000d48 <buttons_reading_10ms+0x144>)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d04:	2b63      	cmp	r3, #99	; 0x63
 8000d06:	d90a      	bls.n	8000d1e <buttons_reading_10ms+0x11a>
            long_pressed[i] = 1;
 8000d08:	4a10      	ldr	r2, [pc, #64]	; (8000d4c <buttons_reading_10ms+0x148>)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	2201      	movs	r2, #1
 8000d10:	701a      	strb	r2, [r3, #0]
 8000d12:	e004      	b.n	8000d1e <buttons_reading_10ms+0x11a>
          }
        } else {
          long_pressed[i] = 1;
 8000d14:	4a0d      	ldr	r2, [pc, #52]	; (8000d4c <buttons_reading_10ms+0x148>)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4413      	add	r3, r2
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < NUM_BUTTONS; ++i){
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	3301      	adds	r3, #1
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2b02      	cmp	r3, #2
 8000d28:	f77f af72 	ble.w	8000c10 <buttons_reading_10ms+0xc>
        }
      }
    }
  }
}
 8000d2c:	bf00      	nop
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000058 	.word	0x20000058
 8000d3c:	2000005c 	.word	0x2000005c
 8000d40:	20000050 	.word	0x20000050
 8000d44:	2000006c 	.word	0x2000006c
 8000d48:	20000060 	.word	0x20000060
 8000d4c:	20000068 	.word	0x20000068
 8000d50:	20000070 	.word	0x20000070
 8000d54:	20000054 	.word	0x20000054

08000d58 <button_pressed_edge>:

uint8_t button_is_long_pressed(button_id_t id){
  return (id < NUM_BUTTONS) ? long_pressed[id] : 0;
}

uint8_t button_pressed_edge(button_id_t id){
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	71fb      	strb	r3, [r7, #7]
  if (id >= NUM_BUTTONS) return 0;
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d901      	bls.n	8000d6c <button_pressed_edge+0x14>
 8000d68:	2300      	movs	r3, #0
 8000d6a:	e008      	b.n	8000d7e <button_pressed_edge+0x26>
  uint8_t v = pressed_edge_oneshot[id];
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	4a06      	ldr	r2, [pc, #24]	; (8000d88 <button_pressed_edge+0x30>)
 8000d70:	5cd3      	ldrb	r3, [r2, r3]
 8000d72:	73fb      	strb	r3, [r7, #15]
  pressed_edge_oneshot[id] = 0;
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	4a04      	ldr	r2, [pc, #16]	; (8000d88 <button_pressed_edge+0x30>)
 8000d78:	2100      	movs	r1, #0
 8000d7a:	54d1      	strb	r1, [r2, r3]
  return v;
 8000d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3714      	adds	r7, #20
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bc80      	pop	{r7}
 8000d86:	4770      	bx	lr
 8000d88:	2000006c 	.word	0x2000006c

08000d8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d90:	f000 f9ec 	bl	800116c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d94:	f000 f81c 	bl	8000dd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d98:	f000 f8a2 	bl	8000ee0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000d9c:	f000 f854 	bl	8000e48 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // Segments HIGH = OFF (common–anode)
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin|
 8000da0:	2201      	movs	r2, #1
 8000da2:	f44f 417e 	mov.w	r1, #65024	; 0xfe00
 8000da6:	4808      	ldr	r0, [pc, #32]	; (8000dc8 <main+0x3c>)
 8000da8:	f000 fce1 	bl	800176e <HAL_GPIO_WritePin>
                           SEG4_Pin|SEG5_Pin|SEG6_Pin, GPIO_PIN_SET);
  // Digit enables HIGH = OFF (active-LOW)
  HAL_GPIO_WritePin(GPIOB, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_SET);
 8000dac:	2201      	movs	r2, #1
 8000dae:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8000db2:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <main+0x3c>)
 8000db4:	f000 fcdb 	bl	800176e <HAL_GPIO_WritePin>

  buttons_init();
 8000db8:	f7ff fed2 	bl	8000b60 <buttons_init>
  HAL_TIM_Base_Start_IT(&htim2);
 8000dbc:	4803      	ldr	r0, [pc, #12]	; (8000dcc <main+0x40>)
 8000dbe:	f001 f91b 	bl	8001ff8 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  fsm_mode_processing();
 8000dc2:	f7ff fd27 	bl	8000814 <fsm_mode_processing>
 8000dc6:	e7fc      	b.n	8000dc2 <main+0x36>
 8000dc8:	40010c00 	.word	0x40010c00
 8000dcc:	2000007c 	.word	0x2000007c

08000dd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b090      	sub	sp, #64	; 0x40
 8000dd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dd6:	f107 0318 	add.w	r3, r7, #24
 8000dda:	2228      	movs	r2, #40	; 0x28
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4618      	mov	r0, r3
 8000de0:	f001 fcba 	bl	8002758 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000de4:	1d3b      	adds	r3, r7, #4
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	60da      	str	r2, [r3, #12]
 8000df0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000df2:	2302      	movs	r3, #2
 8000df4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000df6:	2301      	movs	r3, #1
 8000df8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dfa:	2310      	movs	r3, #16
 8000dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e02:	f107 0318 	add.w	r3, r7, #24
 8000e06:	4618      	mov	r0, r3
 8000e08:	f000 fcca 	bl	80017a0 <HAL_RCC_OscConfig>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000e12:	f000 f8f1 	bl	8000ff8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e16:	230f      	movs	r3, #15
 8000e18:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e22:	2300      	movs	r3, #0
 8000e24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f000 ff36 	bl	8001ca0 <HAL_RCC_ClockConfig>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000e3a:	f000 f8dd 	bl	8000ff8 <Error_Handler>
  }
}
 8000e3e:	bf00      	nop
 8000e40:	3740      	adds	r7, #64	; 0x40
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
	...

08000e48 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e4e:	f107 0308 	add.w	r3, r7, #8
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]
 8000e5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e5c:	463b      	mov	r3, r7
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e64:	4b1d      	ldr	r3, [pc, #116]	; (8000edc <MX_TIM2_Init+0x94>)
 8000e66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e6a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000e6c:	4b1b      	ldr	r3, [pc, #108]	; (8000edc <MX_TIM2_Init+0x94>)
 8000e6e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000e72:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e74:	4b19      	ldr	r3, [pc, #100]	; (8000edc <MX_TIM2_Init+0x94>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8000e7a:	4b18      	ldr	r3, [pc, #96]	; (8000edc <MX_TIM2_Init+0x94>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e80:	4b16      	ldr	r3, [pc, #88]	; (8000edc <MX_TIM2_Init+0x94>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e86:	4b15      	ldr	r3, [pc, #84]	; (8000edc <MX_TIM2_Init+0x94>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e8c:	4813      	ldr	r0, [pc, #76]	; (8000edc <MX_TIM2_Init+0x94>)
 8000e8e:	f001 f863 	bl	8001f58 <HAL_TIM_Base_Init>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e98:	f000 f8ae 	bl	8000ff8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ea2:	f107 0308 	add.w	r3, r7, #8
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	480c      	ldr	r0, [pc, #48]	; (8000edc <MX_TIM2_Init+0x94>)
 8000eaa:	f001 f9e1 	bl	8002270 <HAL_TIM_ConfigClockSource>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000eb4:	f000 f8a0 	bl	8000ff8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ec0:	463b      	mov	r3, r7
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4805      	ldr	r0, [pc, #20]	; (8000edc <MX_TIM2_Init+0x94>)
 8000ec6:	f001 fbb9 	bl	800263c <HAL_TIMEx_MasterConfigSynchronization>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ed0:	f000 f892 	bl	8000ff8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ed4:	bf00      	nop
 8000ed6:	3718      	adds	r7, #24
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	2000007c 	.word	0x2000007c

08000ee0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee6:	f107 0308 	add.w	r3, r7, #8
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	605a      	str	r2, [r3, #4]
 8000ef0:	609a      	str	r2, [r3, #8]
 8000ef2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef4:	4b28      	ldr	r3, [pc, #160]	; (8000f98 <MX_GPIO_Init+0xb8>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	4a27      	ldr	r2, [pc, #156]	; (8000f98 <MX_GPIO_Init+0xb8>)
 8000efa:	f043 0304 	orr.w	r3, r3, #4
 8000efe:	6193      	str	r3, [r2, #24]
 8000f00:	4b25      	ldr	r3, [pc, #148]	; (8000f98 <MX_GPIO_Init+0xb8>)
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	f003 0304 	and.w	r3, r3, #4
 8000f08:	607b      	str	r3, [r7, #4]
 8000f0a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0c:	4b22      	ldr	r3, [pc, #136]	; (8000f98 <MX_GPIO_Init+0xb8>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	4a21      	ldr	r2, [pc, #132]	; (8000f98 <MX_GPIO_Init+0xb8>)
 8000f12:	f043 0308 	orr.w	r3, r3, #8
 8000f16:	6193      	str	r3, [r2, #24]
 8000f18:	4b1f      	ldr	r3, [pc, #124]	; (8000f98 <MX_GPIO_Init+0xb8>)
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	f003 0308 	and.w	r3, r3, #8
 8000f20:	603b      	str	r3, [r7, #0]
 8000f22:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, R1_W_Pin|R2_N_Pin|R3_E_Pin|R4_S_Pin
 8000f24:	2200      	movs	r2, #0
 8000f26:	f640 71ff 	movw	r1, #4095	; 0xfff
 8000f2a:	481c      	ldr	r0, [pc, #112]	; (8000f9c <MX_GPIO_Init+0xbc>)
 8000f2c:	f000 fc1f 	bl	800176e <HAL_GPIO_WritePin>
                          |Y1_W_Pin|Y2_N_Pin|Y3_E_Pin|Y4_S_Pin
                          |G1_W_Pin|G2_N_Pin|G3_E_Pin|G4_S_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG1_Pin|SEG2_Pin|SEG3_Pin|SEG4_Pin
 8000f30:	2200      	movs	r2, #0
 8000f32:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 8000f36:	481a      	ldr	r0, [pc, #104]	; (8000fa0 <MX_GPIO_Init+0xc0>)
 8000f38:	f000 fc19 	bl	800176e <HAL_GPIO_WritePin>
                          |EN2_Pin|EN3_Pin|SEG0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : R1_W_Pin R2_N_Pin R3_E_Pin R4_S_Pin
                           Y1_W_Pin Y2_N_Pin Y3_E_Pin Y4_S_Pin
                           G1_W_Pin G2_N_Pin G3_E_Pin G4_S_Pin */
  GPIO_InitStruct.Pin = R1_W_Pin|R2_N_Pin|R3_E_Pin|R4_S_Pin
 8000f3c:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000f40:	60bb      	str	r3, [r7, #8]
                          |Y1_W_Pin|Y2_N_Pin|Y3_E_Pin|Y4_S_Pin
                          |G1_W_Pin|G2_N_Pin|G3_E_Pin|G4_S_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f42:	2301      	movs	r3, #1
 8000f44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4e:	f107 0308 	add.w	r3, r7, #8
 8000f52:	4619      	mov	r1, r3
 8000f54:	4811      	ldr	r0, [pc, #68]	; (8000f9c <MX_GPIO_Init+0xbc>)
 8000f56:	f000 fa79 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin BTN3_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin|BTN3_Pin;
 8000f5a:	2307      	movs	r3, #7
 8000f5c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f62:	2301      	movs	r3, #1
 8000f64:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f66:	f107 0308 	add.w	r3, r7, #8
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	480c      	ldr	r0, [pc, #48]	; (8000fa0 <MX_GPIO_Init+0xc0>)
 8000f6e:	f000 fa6d 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG1_Pin SEG2_Pin SEG3_Pin SEG4_Pin
                           SEG5_Pin SEG6_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin SEG0_Pin */
  GPIO_InitStruct.Pin = SEG1_Pin|SEG2_Pin|SEG3_Pin|SEG4_Pin
 8000f72:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000f76:	60bb      	str	r3, [r7, #8]
                          |SEG5_Pin|SEG6_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin|SEG0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f80:	2302      	movs	r3, #2
 8000f82:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f84:	f107 0308 	add.w	r3, r7, #8
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <MX_GPIO_Init+0xc0>)
 8000f8c:	f000 fa5e 	bl	800144c <HAL_GPIO_Init>

}
 8000f90:	bf00      	nop
 8000f92:	3718      	adds	r7, #24
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	40010800 	.word	0x40010800
 8000fa0:	40010c00 	.word	0x40010c00

08000fa4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2){
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fb4:	d117      	bne.n	8000fe6 <HAL_TIM_PeriodElapsedCallback+0x42>
    sys_ms += TICK_MS;           // TICK_MS will be 2 in soft_timers.h
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	3302      	adds	r3, #2
 8000fbc:	4a0c      	ldr	r2, [pc, #48]	; (8000ff0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000fbe:	6013      	str	r3, [r2, #0]

    static uint16_t acc = 0;
    acc += TICK_MS;
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000fc2:	881b      	ldrh	r3, [r3, #0]
 8000fc4:	3302      	adds	r3, #2
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000fca:	801a      	strh	r2, [r3, #0]
    while (acc >= 10){
 8000fcc:	e007      	b.n	8000fde <HAL_TIM_PeriodElapsedCallback+0x3a>
      acc -= 10;
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000fd0:	881b      	ldrh	r3, [r3, #0]
 8000fd2:	3b0a      	subs	r3, #10
 8000fd4:	b29a      	uxth	r2, r3
 8000fd6:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000fd8:	801a      	strh	r2, [r3, #0]
      buttons_reading_10ms();    // debouncer every 10 ms
 8000fda:	f7ff fe13 	bl	8000c04 <buttons_reading_10ms>
    while (acc >= 10){
 8000fde:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000fe0:	881b      	ldrh	r3, [r3, #0]
 8000fe2:	2b09      	cmp	r3, #9
 8000fe4:	d8f3      	bhi.n	8000fce <HAL_TIM_PeriodElapsedCallback+0x2a>
    }
  }
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000078 	.word	0x20000078
 8000ff4:	20000074 	.word	0x20000074

08000ff8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ffc:	b672      	cpsid	i
}
 8000ffe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001000:	e7fe      	b.n	8001000 <Error_Handler+0x8>
	...

08001004 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800100a:	4b15      	ldr	r3, [pc, #84]	; (8001060 <HAL_MspInit+0x5c>)
 800100c:	699b      	ldr	r3, [r3, #24]
 800100e:	4a14      	ldr	r2, [pc, #80]	; (8001060 <HAL_MspInit+0x5c>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	6193      	str	r3, [r2, #24]
 8001016:	4b12      	ldr	r3, [pc, #72]	; (8001060 <HAL_MspInit+0x5c>)
 8001018:	699b      	ldr	r3, [r3, #24]
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001022:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <HAL_MspInit+0x5c>)
 8001024:	69db      	ldr	r3, [r3, #28]
 8001026:	4a0e      	ldr	r2, [pc, #56]	; (8001060 <HAL_MspInit+0x5c>)
 8001028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800102c:	61d3      	str	r3, [r2, #28]
 800102e:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <HAL_MspInit+0x5c>)
 8001030:	69db      	ldr	r3, [r3, #28]
 8001032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800103a:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <HAL_MspInit+0x60>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	4a04      	ldr	r2, [pc, #16]	; (8001064 <HAL_MspInit+0x60>)
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001056:	bf00      	nop
 8001058:	3714      	adds	r7, #20
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr
 8001060:	40021000 	.word	0x40021000
 8001064:	40010000 	.word	0x40010000

08001068 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001078:	d113      	bne.n	80010a2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800107a:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <HAL_TIM_Base_MspInit+0x44>)
 800107c:	69db      	ldr	r3, [r3, #28]
 800107e:	4a0b      	ldr	r2, [pc, #44]	; (80010ac <HAL_TIM_Base_MspInit+0x44>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	61d3      	str	r3, [r2, #28]
 8001086:	4b09      	ldr	r3, [pc, #36]	; (80010ac <HAL_TIM_Base_MspInit+0x44>)
 8001088:	69db      	ldr	r3, [r3, #28]
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001092:	2200      	movs	r2, #0
 8001094:	2100      	movs	r1, #0
 8001096:	201c      	movs	r0, #28
 8001098:	f000 f9a1 	bl	80013de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800109c:	201c      	movs	r0, #28
 800109e:	f000 f9ba 	bl	8001416 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010a2:	bf00      	nop
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40021000 	.word	0x40021000

080010b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010b4:	e7fe      	b.n	80010b4 <NMI_Handler+0x4>

080010b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ba:	e7fe      	b.n	80010ba <HardFault_Handler+0x4>

080010bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c0:	e7fe      	b.n	80010c0 <MemManage_Handler+0x4>

080010c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010c6:	e7fe      	b.n	80010c6 <BusFault_Handler+0x4>

080010c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010cc:	e7fe      	b.n	80010cc <UsageFault_Handler+0x4>

080010ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bc80      	pop	{r7}
 80010d8:	4770      	bx	lr

080010da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bc80      	pop	{r7}
 80010e4:	4770      	bx	lr

080010e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bc80      	pop	{r7}
 80010f0:	4770      	bx	lr

080010f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010f6:	f000 f87f 	bl	80011f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
	...

08001100 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001104:	4802      	ldr	r0, [pc, #8]	; (8001110 <TIM2_IRQHandler+0x10>)
 8001106:	f000 ffc3 	bl	8002090 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	2000007c 	.word	0x2000007c

08001114 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	bc80      	pop	{r7}
 800111e:	4770      	bx	lr

08001120 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001120:	f7ff fff8 	bl	8001114 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001124:	480b      	ldr	r0, [pc, #44]	; (8001154 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001126:	490c      	ldr	r1, [pc, #48]	; (8001158 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001128:	4a0c      	ldr	r2, [pc, #48]	; (800115c <LoopFillZerobss+0x16>)
  movs r3, #0
 800112a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800112c:	e002      	b.n	8001134 <LoopCopyDataInit>

0800112e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800112e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001130:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001132:	3304      	adds	r3, #4

08001134 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001134:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001136:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001138:	d3f9      	bcc.n	800112e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800113a:	4a09      	ldr	r2, [pc, #36]	; (8001160 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800113c:	4c09      	ldr	r4, [pc, #36]	; (8001164 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800113e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001140:	e001      	b.n	8001146 <LoopFillZerobss>

08001142 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001142:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001144:	3204      	adds	r2, #4

08001146 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001146:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001148:	d3fb      	bcc.n	8001142 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800114a:	f001 fae1 	bl	8002710 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800114e:	f7ff fe1d 	bl	8000d8c <main>
  bx lr
 8001152:	4770      	bx	lr
  ldr r0, =_sdata
 8001154:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001158:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800115c:	080027c0 	.word	0x080027c0
  ldr r2, =_sbss
 8001160:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001164:	200000c8 	.word	0x200000c8

08001168 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001168:	e7fe      	b.n	8001168 <ADC1_2_IRQHandler>
	...

0800116c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001170:	4b08      	ldr	r3, [pc, #32]	; (8001194 <HAL_Init+0x28>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a07      	ldr	r2, [pc, #28]	; (8001194 <HAL_Init+0x28>)
 8001176:	f043 0310 	orr.w	r3, r3, #16
 800117a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800117c:	2003      	movs	r0, #3
 800117e:	f000 f923 	bl	80013c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001182:	200f      	movs	r0, #15
 8001184:	f000 f808 	bl	8001198 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001188:	f7ff ff3c 	bl	8001004 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40022000 	.word	0x40022000

08001198 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011a0:	4b12      	ldr	r3, [pc, #72]	; (80011ec <HAL_InitTick+0x54>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <HAL_InitTick+0x58>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	4619      	mov	r1, r3
 80011aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80011b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b6:	4618      	mov	r0, r3
 80011b8:	f000 f93b 	bl	8001432 <HAL_SYSTICK_Config>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e00e      	b.n	80011e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2b0f      	cmp	r3, #15
 80011ca:	d80a      	bhi.n	80011e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011cc:	2200      	movs	r2, #0
 80011ce:	6879      	ldr	r1, [r7, #4]
 80011d0:	f04f 30ff 	mov.w	r0, #4294967295
 80011d4:	f000 f903 	bl	80013de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011d8:	4a06      	ldr	r2, [pc, #24]	; (80011f4 <HAL_InitTick+0x5c>)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011de:	2300      	movs	r3, #0
 80011e0:	e000      	b.n	80011e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000008 	.word	0x20000008
 80011f0:	20000010 	.word	0x20000010
 80011f4:	2000000c 	.word	0x2000000c

080011f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011fc:	4b05      	ldr	r3, [pc, #20]	; (8001214 <HAL_IncTick+0x1c>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	461a      	mov	r2, r3
 8001202:	4b05      	ldr	r3, [pc, #20]	; (8001218 <HAL_IncTick+0x20>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4413      	add	r3, r2
 8001208:	4a03      	ldr	r2, [pc, #12]	; (8001218 <HAL_IncTick+0x20>)
 800120a:	6013      	str	r3, [r2, #0]
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr
 8001214:	20000010 	.word	0x20000010
 8001218:	200000c4 	.word	0x200000c4

0800121c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  return uwTick;
 8001220:	4b02      	ldr	r3, [pc, #8]	; (800122c <HAL_GetTick+0x10>)
 8001222:	681b      	ldr	r3, [r3, #0]
}
 8001224:	4618      	mov	r0, r3
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr
 800122c:	200000c4 	.word	0x200000c4

08001230 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001240:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <__NVIC_SetPriorityGrouping+0x44>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001246:	68ba      	ldr	r2, [r7, #8]
 8001248:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800124c:	4013      	ands	r3, r2
 800124e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001258:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800125c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001260:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001262:	4a04      	ldr	r2, [pc, #16]	; (8001274 <__NVIC_SetPriorityGrouping+0x44>)
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	60d3      	str	r3, [r2, #12]
}
 8001268:	bf00      	nop
 800126a:	3714      	adds	r7, #20
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800127c:	4b04      	ldr	r3, [pc, #16]	; (8001290 <__NVIC_GetPriorityGrouping+0x18>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	0a1b      	lsrs	r3, r3, #8
 8001282:	f003 0307 	and.w	r3, r3, #7
}
 8001286:	4618      	mov	r0, r3
 8001288:	46bd      	mov	sp, r7
 800128a:	bc80      	pop	{r7}
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	db0b      	blt.n	80012be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	f003 021f 	and.w	r2, r3, #31
 80012ac:	4906      	ldr	r1, [pc, #24]	; (80012c8 <__NVIC_EnableIRQ+0x34>)
 80012ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b2:	095b      	lsrs	r3, r3, #5
 80012b4:	2001      	movs	r0, #1
 80012b6:	fa00 f202 	lsl.w	r2, r0, r2
 80012ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr
 80012c8:	e000e100 	.word	0xe000e100

080012cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	6039      	str	r1, [r7, #0]
 80012d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	db0a      	blt.n	80012f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	490c      	ldr	r1, [pc, #48]	; (8001318 <__NVIC_SetPriority+0x4c>)
 80012e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ea:	0112      	lsls	r2, r2, #4
 80012ec:	b2d2      	uxtb	r2, r2
 80012ee:	440b      	add	r3, r1
 80012f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012f4:	e00a      	b.n	800130c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	b2da      	uxtb	r2, r3
 80012fa:	4908      	ldr	r1, [pc, #32]	; (800131c <__NVIC_SetPriority+0x50>)
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	f003 030f 	and.w	r3, r3, #15
 8001302:	3b04      	subs	r3, #4
 8001304:	0112      	lsls	r2, r2, #4
 8001306:	b2d2      	uxtb	r2, r2
 8001308:	440b      	add	r3, r1
 800130a:	761a      	strb	r2, [r3, #24]
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	bc80      	pop	{r7}
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	e000e100 	.word	0xe000e100
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001320:	b480      	push	{r7}
 8001322:	b089      	sub	sp, #36	; 0x24
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	f1c3 0307 	rsb	r3, r3, #7
 800133a:	2b04      	cmp	r3, #4
 800133c:	bf28      	it	cs
 800133e:	2304      	movcs	r3, #4
 8001340:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	3304      	adds	r3, #4
 8001346:	2b06      	cmp	r3, #6
 8001348:	d902      	bls.n	8001350 <NVIC_EncodePriority+0x30>
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	3b03      	subs	r3, #3
 800134e:	e000      	b.n	8001352 <NVIC_EncodePriority+0x32>
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001354:	f04f 32ff 	mov.w	r2, #4294967295
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	43da      	mvns	r2, r3
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	401a      	ands	r2, r3
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001368:	f04f 31ff 	mov.w	r1, #4294967295
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	fa01 f303 	lsl.w	r3, r1, r3
 8001372:	43d9      	mvns	r1, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001378:	4313      	orrs	r3, r2
         );
}
 800137a:	4618      	mov	r0, r3
 800137c:	3724      	adds	r7, #36	; 0x24
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr

08001384 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	3b01      	subs	r3, #1
 8001390:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001394:	d301      	bcc.n	800139a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001396:	2301      	movs	r3, #1
 8001398:	e00f      	b.n	80013ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800139a:	4a0a      	ldr	r2, [pc, #40]	; (80013c4 <SysTick_Config+0x40>)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3b01      	subs	r3, #1
 80013a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013a2:	210f      	movs	r1, #15
 80013a4:	f04f 30ff 	mov.w	r0, #4294967295
 80013a8:	f7ff ff90 	bl	80012cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013ac:	4b05      	ldr	r3, [pc, #20]	; (80013c4 <SysTick_Config+0x40>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013b2:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <SysTick_Config+0x40>)
 80013b4:	2207      	movs	r2, #7
 80013b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	e000e010 	.word	0xe000e010

080013c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f7ff ff2d 	bl	8001230 <__NVIC_SetPriorityGrouping>
}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013de:	b580      	push	{r7, lr}
 80013e0:	b086      	sub	sp, #24
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	4603      	mov	r3, r0
 80013e6:	60b9      	str	r1, [r7, #8]
 80013e8:	607a      	str	r2, [r7, #4]
 80013ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013f0:	f7ff ff42 	bl	8001278 <__NVIC_GetPriorityGrouping>
 80013f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	68b9      	ldr	r1, [r7, #8]
 80013fa:	6978      	ldr	r0, [r7, #20]
 80013fc:	f7ff ff90 	bl	8001320 <NVIC_EncodePriority>
 8001400:	4602      	mov	r2, r0
 8001402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001406:	4611      	mov	r1, r2
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff ff5f 	bl	80012cc <__NVIC_SetPriority>
}
 800140e:	bf00      	nop
 8001410:	3718      	adds	r7, #24
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b082      	sub	sp, #8
 800141a:	af00      	add	r7, sp, #0
 800141c:	4603      	mov	r3, r0
 800141e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff ff35 	bl	8001294 <__NVIC_EnableIRQ>
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b082      	sub	sp, #8
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff ffa2 	bl	8001384 <SysTick_Config>
 8001440:	4603      	mov	r3, r0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
	...

0800144c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800144c:	b480      	push	{r7}
 800144e:	b08b      	sub	sp, #44	; 0x2c
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001456:	2300      	movs	r3, #0
 8001458:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800145a:	2300      	movs	r3, #0
 800145c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800145e:	e148      	b.n	80016f2 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001460:	2201      	movs	r2, #1
 8001462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	69fa      	ldr	r2, [r7, #28]
 8001470:	4013      	ands	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	429a      	cmp	r2, r3
 800147a:	f040 8137 	bne.w	80016ec <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	4aa3      	ldr	r2, [pc, #652]	; (8001710 <HAL_GPIO_Init+0x2c4>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d05e      	beq.n	8001546 <HAL_GPIO_Init+0xfa>
 8001488:	4aa1      	ldr	r2, [pc, #644]	; (8001710 <HAL_GPIO_Init+0x2c4>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d875      	bhi.n	800157a <HAL_GPIO_Init+0x12e>
 800148e:	4aa1      	ldr	r2, [pc, #644]	; (8001714 <HAL_GPIO_Init+0x2c8>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d058      	beq.n	8001546 <HAL_GPIO_Init+0xfa>
 8001494:	4a9f      	ldr	r2, [pc, #636]	; (8001714 <HAL_GPIO_Init+0x2c8>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d86f      	bhi.n	800157a <HAL_GPIO_Init+0x12e>
 800149a:	4a9f      	ldr	r2, [pc, #636]	; (8001718 <HAL_GPIO_Init+0x2cc>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d052      	beq.n	8001546 <HAL_GPIO_Init+0xfa>
 80014a0:	4a9d      	ldr	r2, [pc, #628]	; (8001718 <HAL_GPIO_Init+0x2cc>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d869      	bhi.n	800157a <HAL_GPIO_Init+0x12e>
 80014a6:	4a9d      	ldr	r2, [pc, #628]	; (800171c <HAL_GPIO_Init+0x2d0>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d04c      	beq.n	8001546 <HAL_GPIO_Init+0xfa>
 80014ac:	4a9b      	ldr	r2, [pc, #620]	; (800171c <HAL_GPIO_Init+0x2d0>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d863      	bhi.n	800157a <HAL_GPIO_Init+0x12e>
 80014b2:	4a9b      	ldr	r2, [pc, #620]	; (8001720 <HAL_GPIO_Init+0x2d4>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d046      	beq.n	8001546 <HAL_GPIO_Init+0xfa>
 80014b8:	4a99      	ldr	r2, [pc, #612]	; (8001720 <HAL_GPIO_Init+0x2d4>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d85d      	bhi.n	800157a <HAL_GPIO_Init+0x12e>
 80014be:	2b12      	cmp	r3, #18
 80014c0:	d82a      	bhi.n	8001518 <HAL_GPIO_Init+0xcc>
 80014c2:	2b12      	cmp	r3, #18
 80014c4:	d859      	bhi.n	800157a <HAL_GPIO_Init+0x12e>
 80014c6:	a201      	add	r2, pc, #4	; (adr r2, 80014cc <HAL_GPIO_Init+0x80>)
 80014c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014cc:	08001547 	.word	0x08001547
 80014d0:	08001521 	.word	0x08001521
 80014d4:	08001533 	.word	0x08001533
 80014d8:	08001575 	.word	0x08001575
 80014dc:	0800157b 	.word	0x0800157b
 80014e0:	0800157b 	.word	0x0800157b
 80014e4:	0800157b 	.word	0x0800157b
 80014e8:	0800157b 	.word	0x0800157b
 80014ec:	0800157b 	.word	0x0800157b
 80014f0:	0800157b 	.word	0x0800157b
 80014f4:	0800157b 	.word	0x0800157b
 80014f8:	0800157b 	.word	0x0800157b
 80014fc:	0800157b 	.word	0x0800157b
 8001500:	0800157b 	.word	0x0800157b
 8001504:	0800157b 	.word	0x0800157b
 8001508:	0800157b 	.word	0x0800157b
 800150c:	0800157b 	.word	0x0800157b
 8001510:	08001529 	.word	0x08001529
 8001514:	0800153d 	.word	0x0800153d
 8001518:	4a82      	ldr	r2, [pc, #520]	; (8001724 <HAL_GPIO_Init+0x2d8>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d013      	beq.n	8001546 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800151e:	e02c      	b.n	800157a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	623b      	str	r3, [r7, #32]
          break;
 8001526:	e029      	b.n	800157c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	3304      	adds	r3, #4
 800152e:	623b      	str	r3, [r7, #32]
          break;
 8001530:	e024      	b.n	800157c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	68db      	ldr	r3, [r3, #12]
 8001536:	3308      	adds	r3, #8
 8001538:	623b      	str	r3, [r7, #32]
          break;
 800153a:	e01f      	b.n	800157c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	330c      	adds	r3, #12
 8001542:	623b      	str	r3, [r7, #32]
          break;
 8001544:	e01a      	b.n	800157c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d102      	bne.n	8001554 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800154e:	2304      	movs	r3, #4
 8001550:	623b      	str	r3, [r7, #32]
          break;
 8001552:	e013      	b.n	800157c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d105      	bne.n	8001568 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800155c:	2308      	movs	r3, #8
 800155e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	69fa      	ldr	r2, [r7, #28]
 8001564:	611a      	str	r2, [r3, #16]
          break;
 8001566:	e009      	b.n	800157c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001568:	2308      	movs	r3, #8
 800156a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	69fa      	ldr	r2, [r7, #28]
 8001570:	615a      	str	r2, [r3, #20]
          break;
 8001572:	e003      	b.n	800157c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001574:	2300      	movs	r3, #0
 8001576:	623b      	str	r3, [r7, #32]
          break;
 8001578:	e000      	b.n	800157c <HAL_GPIO_Init+0x130>
          break;
 800157a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	2bff      	cmp	r3, #255	; 0xff
 8001580:	d801      	bhi.n	8001586 <HAL_GPIO_Init+0x13a>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	e001      	b.n	800158a <HAL_GPIO_Init+0x13e>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	3304      	adds	r3, #4
 800158a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	2bff      	cmp	r3, #255	; 0xff
 8001590:	d802      	bhi.n	8001598 <HAL_GPIO_Init+0x14c>
 8001592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	e002      	b.n	800159e <HAL_GPIO_Init+0x152>
 8001598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159a:	3b08      	subs	r3, #8
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	210f      	movs	r1, #15
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	fa01 f303 	lsl.w	r3, r1, r3
 80015ac:	43db      	mvns	r3, r3
 80015ae:	401a      	ands	r2, r3
 80015b0:	6a39      	ldr	r1, [r7, #32]
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	fa01 f303 	lsl.w	r3, r1, r3
 80015b8:	431a      	orrs	r2, r3
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f000 8090 	beq.w	80016ec <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015cc:	4b56      	ldr	r3, [pc, #344]	; (8001728 <HAL_GPIO_Init+0x2dc>)
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	4a55      	ldr	r2, [pc, #340]	; (8001728 <HAL_GPIO_Init+0x2dc>)
 80015d2:	f043 0301 	orr.w	r3, r3, #1
 80015d6:	6193      	str	r3, [r2, #24]
 80015d8:	4b53      	ldr	r3, [pc, #332]	; (8001728 <HAL_GPIO_Init+0x2dc>)
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	f003 0301 	and.w	r3, r3, #1
 80015e0:	60bb      	str	r3, [r7, #8]
 80015e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015e4:	4a51      	ldr	r2, [pc, #324]	; (800172c <HAL_GPIO_Init+0x2e0>)
 80015e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e8:	089b      	lsrs	r3, r3, #2
 80015ea:	3302      	adds	r3, #2
 80015ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f4:	f003 0303 	and.w	r3, r3, #3
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	220f      	movs	r2, #15
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	43db      	mvns	r3, r3
 8001602:	68fa      	ldr	r2, [r7, #12]
 8001604:	4013      	ands	r3, r2
 8001606:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4a49      	ldr	r2, [pc, #292]	; (8001730 <HAL_GPIO_Init+0x2e4>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d00d      	beq.n	800162c <HAL_GPIO_Init+0x1e0>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4a48      	ldr	r2, [pc, #288]	; (8001734 <HAL_GPIO_Init+0x2e8>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d007      	beq.n	8001628 <HAL_GPIO_Init+0x1dc>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4a47      	ldr	r2, [pc, #284]	; (8001738 <HAL_GPIO_Init+0x2ec>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d101      	bne.n	8001624 <HAL_GPIO_Init+0x1d8>
 8001620:	2302      	movs	r3, #2
 8001622:	e004      	b.n	800162e <HAL_GPIO_Init+0x1e2>
 8001624:	2303      	movs	r3, #3
 8001626:	e002      	b.n	800162e <HAL_GPIO_Init+0x1e2>
 8001628:	2301      	movs	r3, #1
 800162a:	e000      	b.n	800162e <HAL_GPIO_Init+0x1e2>
 800162c:	2300      	movs	r3, #0
 800162e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001630:	f002 0203 	and.w	r2, r2, #3
 8001634:	0092      	lsls	r2, r2, #2
 8001636:	4093      	lsls	r3, r2
 8001638:	68fa      	ldr	r2, [r7, #12]
 800163a:	4313      	orrs	r3, r2
 800163c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800163e:	493b      	ldr	r1, [pc, #236]	; (800172c <HAL_GPIO_Init+0x2e0>)
 8001640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001642:	089b      	lsrs	r3, r3, #2
 8001644:	3302      	adds	r3, #2
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d006      	beq.n	8001666 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001658:	4b38      	ldr	r3, [pc, #224]	; (800173c <HAL_GPIO_Init+0x2f0>)
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	4937      	ldr	r1, [pc, #220]	; (800173c <HAL_GPIO_Init+0x2f0>)
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	4313      	orrs	r3, r2
 8001662:	608b      	str	r3, [r1, #8]
 8001664:	e006      	b.n	8001674 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001666:	4b35      	ldr	r3, [pc, #212]	; (800173c <HAL_GPIO_Init+0x2f0>)
 8001668:	689a      	ldr	r2, [r3, #8]
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	43db      	mvns	r3, r3
 800166e:	4933      	ldr	r1, [pc, #204]	; (800173c <HAL_GPIO_Init+0x2f0>)
 8001670:	4013      	ands	r3, r2
 8001672:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d006      	beq.n	800168e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001680:	4b2e      	ldr	r3, [pc, #184]	; (800173c <HAL_GPIO_Init+0x2f0>)
 8001682:	68da      	ldr	r2, [r3, #12]
 8001684:	492d      	ldr	r1, [pc, #180]	; (800173c <HAL_GPIO_Init+0x2f0>)
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	4313      	orrs	r3, r2
 800168a:	60cb      	str	r3, [r1, #12]
 800168c:	e006      	b.n	800169c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800168e:	4b2b      	ldr	r3, [pc, #172]	; (800173c <HAL_GPIO_Init+0x2f0>)
 8001690:	68da      	ldr	r2, [r3, #12]
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	43db      	mvns	r3, r3
 8001696:	4929      	ldr	r1, [pc, #164]	; (800173c <HAL_GPIO_Init+0x2f0>)
 8001698:	4013      	ands	r3, r2
 800169a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d006      	beq.n	80016b6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016a8:	4b24      	ldr	r3, [pc, #144]	; (800173c <HAL_GPIO_Init+0x2f0>)
 80016aa:	685a      	ldr	r2, [r3, #4]
 80016ac:	4923      	ldr	r1, [pc, #140]	; (800173c <HAL_GPIO_Init+0x2f0>)
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	604b      	str	r3, [r1, #4]
 80016b4:	e006      	b.n	80016c4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016b6:	4b21      	ldr	r3, [pc, #132]	; (800173c <HAL_GPIO_Init+0x2f0>)
 80016b8:	685a      	ldr	r2, [r3, #4]
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	43db      	mvns	r3, r3
 80016be:	491f      	ldr	r1, [pc, #124]	; (800173c <HAL_GPIO_Init+0x2f0>)
 80016c0:	4013      	ands	r3, r2
 80016c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d006      	beq.n	80016de <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016d0:	4b1a      	ldr	r3, [pc, #104]	; (800173c <HAL_GPIO_Init+0x2f0>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	4919      	ldr	r1, [pc, #100]	; (800173c <HAL_GPIO_Init+0x2f0>)
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	4313      	orrs	r3, r2
 80016da:	600b      	str	r3, [r1, #0]
 80016dc:	e006      	b.n	80016ec <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016de:	4b17      	ldr	r3, [pc, #92]	; (800173c <HAL_GPIO_Init+0x2f0>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	43db      	mvns	r3, r3
 80016e6:	4915      	ldr	r1, [pc, #84]	; (800173c <HAL_GPIO_Init+0x2f0>)
 80016e8:	4013      	ands	r3, r2
 80016ea:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80016ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ee:	3301      	adds	r3, #1
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f8:	fa22 f303 	lsr.w	r3, r2, r3
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	f47f aeaf 	bne.w	8001460 <HAL_GPIO_Init+0x14>
  }
}
 8001702:	bf00      	nop
 8001704:	bf00      	nop
 8001706:	372c      	adds	r7, #44	; 0x2c
 8001708:	46bd      	mov	sp, r7
 800170a:	bc80      	pop	{r7}
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	10320000 	.word	0x10320000
 8001714:	10310000 	.word	0x10310000
 8001718:	10220000 	.word	0x10220000
 800171c:	10210000 	.word	0x10210000
 8001720:	10120000 	.word	0x10120000
 8001724:	10110000 	.word	0x10110000
 8001728:	40021000 	.word	0x40021000
 800172c:	40010000 	.word	0x40010000
 8001730:	40010800 	.word	0x40010800
 8001734:	40010c00 	.word	0x40010c00
 8001738:	40011000 	.word	0x40011000
 800173c:	40010400 	.word	0x40010400

08001740 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	460b      	mov	r3, r1
 800174a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689a      	ldr	r2, [r3, #8]
 8001750:	887b      	ldrh	r3, [r7, #2]
 8001752:	4013      	ands	r3, r2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d002      	beq.n	800175e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001758:	2301      	movs	r3, #1
 800175a:	73fb      	strb	r3, [r7, #15]
 800175c:	e001      	b.n	8001762 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800175e:	2300      	movs	r3, #0
 8001760:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001762:	7bfb      	ldrb	r3, [r7, #15]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3714      	adds	r7, #20
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr

0800176e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800176e:	b480      	push	{r7}
 8001770:	b083      	sub	sp, #12
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
 8001776:	460b      	mov	r3, r1
 8001778:	807b      	strh	r3, [r7, #2]
 800177a:	4613      	mov	r3, r2
 800177c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800177e:	787b      	ldrb	r3, [r7, #1]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d003      	beq.n	800178c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001784:	887a      	ldrh	r2, [r7, #2]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800178a:	e003      	b.n	8001794 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800178c:	887b      	ldrh	r3, [r7, #2]
 800178e:	041a      	lsls	r2, r3, #16
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	611a      	str	r2, [r3, #16]
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	bc80      	pop	{r7}
 800179c:	4770      	bx	lr
	...

080017a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d101      	bne.n	80017b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e26c      	b.n	8001c8c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f000 8087 	beq.w	80018ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017c0:	4b92      	ldr	r3, [pc, #584]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f003 030c 	and.w	r3, r3, #12
 80017c8:	2b04      	cmp	r3, #4
 80017ca:	d00c      	beq.n	80017e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017cc:	4b8f      	ldr	r3, [pc, #572]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f003 030c 	and.w	r3, r3, #12
 80017d4:	2b08      	cmp	r3, #8
 80017d6:	d112      	bne.n	80017fe <HAL_RCC_OscConfig+0x5e>
 80017d8:	4b8c      	ldr	r3, [pc, #560]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017e4:	d10b      	bne.n	80017fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e6:	4b89      	ldr	r3, [pc, #548]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d06c      	beq.n	80018cc <HAL_RCC_OscConfig+0x12c>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d168      	bne.n	80018cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e246      	b.n	8001c8c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001806:	d106      	bne.n	8001816 <HAL_RCC_OscConfig+0x76>
 8001808:	4b80      	ldr	r3, [pc, #512]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a7f      	ldr	r2, [pc, #508]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 800180e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001812:	6013      	str	r3, [r2, #0]
 8001814:	e02e      	b.n	8001874 <HAL_RCC_OscConfig+0xd4>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d10c      	bne.n	8001838 <HAL_RCC_OscConfig+0x98>
 800181e:	4b7b      	ldr	r3, [pc, #492]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a7a      	ldr	r2, [pc, #488]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001824:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	4b78      	ldr	r3, [pc, #480]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a77      	ldr	r2, [pc, #476]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001830:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001834:	6013      	str	r3, [r2, #0]
 8001836:	e01d      	b.n	8001874 <HAL_RCC_OscConfig+0xd4>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001840:	d10c      	bne.n	800185c <HAL_RCC_OscConfig+0xbc>
 8001842:	4b72      	ldr	r3, [pc, #456]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a71      	ldr	r2, [pc, #452]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001848:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800184c:	6013      	str	r3, [r2, #0]
 800184e:	4b6f      	ldr	r3, [pc, #444]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a6e      	ldr	r2, [pc, #440]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001858:	6013      	str	r3, [r2, #0]
 800185a:	e00b      	b.n	8001874 <HAL_RCC_OscConfig+0xd4>
 800185c:	4b6b      	ldr	r3, [pc, #428]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a6a      	ldr	r2, [pc, #424]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001862:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001866:	6013      	str	r3, [r2, #0]
 8001868:	4b68      	ldr	r3, [pc, #416]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a67      	ldr	r2, [pc, #412]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 800186e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001872:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d013      	beq.n	80018a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187c:	f7ff fcce 	bl	800121c <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001884:	f7ff fcca 	bl	800121c <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b64      	cmp	r3, #100	; 0x64
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e1fa      	b.n	8001c8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001896:	4b5d      	ldr	r3, [pc, #372]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d0f0      	beq.n	8001884 <HAL_RCC_OscConfig+0xe4>
 80018a2:	e014      	b.n	80018ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a4:	f7ff fcba 	bl	800121c <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018ac:	f7ff fcb6 	bl	800121c <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b64      	cmp	r3, #100	; 0x64
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e1e6      	b.n	8001c8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018be:	4b53      	ldr	r3, [pc, #332]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1f0      	bne.n	80018ac <HAL_RCC_OscConfig+0x10c>
 80018ca:	e000      	b.n	80018ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d063      	beq.n	80019a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018da:	4b4c      	ldr	r3, [pc, #304]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f003 030c 	and.w	r3, r3, #12
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d00b      	beq.n	80018fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018e6:	4b49      	ldr	r3, [pc, #292]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f003 030c 	and.w	r3, r3, #12
 80018ee:	2b08      	cmp	r3, #8
 80018f0:	d11c      	bne.n	800192c <HAL_RCC_OscConfig+0x18c>
 80018f2:	4b46      	ldr	r3, [pc, #280]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d116      	bne.n	800192c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018fe:	4b43      	ldr	r3, [pc, #268]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d005      	beq.n	8001916 <HAL_RCC_OscConfig+0x176>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d001      	beq.n	8001916 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e1ba      	b.n	8001c8c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001916:	4b3d      	ldr	r3, [pc, #244]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	4939      	ldr	r1, [pc, #228]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001926:	4313      	orrs	r3, r2
 8001928:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800192a:	e03a      	b.n	80019a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	691b      	ldr	r3, [r3, #16]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d020      	beq.n	8001976 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001934:	4b36      	ldr	r3, [pc, #216]	; (8001a10 <HAL_RCC_OscConfig+0x270>)
 8001936:	2201      	movs	r2, #1
 8001938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193a:	f7ff fc6f 	bl	800121c <HAL_GetTick>
 800193e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001940:	e008      	b.n	8001954 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001942:	f7ff fc6b 	bl	800121c <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e19b      	b.n	8001c8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001954:	4b2d      	ldr	r3, [pc, #180]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d0f0      	beq.n	8001942 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001960:	4b2a      	ldr	r3, [pc, #168]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	695b      	ldr	r3, [r3, #20]
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	4927      	ldr	r1, [pc, #156]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001970:	4313      	orrs	r3, r2
 8001972:	600b      	str	r3, [r1, #0]
 8001974:	e015      	b.n	80019a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001976:	4b26      	ldr	r3, [pc, #152]	; (8001a10 <HAL_RCC_OscConfig+0x270>)
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197c:	f7ff fc4e 	bl	800121c <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001984:	f7ff fc4a 	bl	800121c <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e17a      	b.n	8001c8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001996:	4b1d      	ldr	r3, [pc, #116]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1f0      	bne.n	8001984 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0308 	and.w	r3, r3, #8
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d03a      	beq.n	8001a24 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	699b      	ldr	r3, [r3, #24]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d019      	beq.n	80019ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019b6:	4b17      	ldr	r3, [pc, #92]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 80019b8:	2201      	movs	r2, #1
 80019ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019bc:	f7ff fc2e 	bl	800121c <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019c4:	f7ff fc2a 	bl	800121c <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e15a      	b.n	8001c8c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019d6:	4b0d      	ldr	r3, [pc, #52]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 80019d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0f0      	beq.n	80019c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019e2:	2001      	movs	r0, #1
 80019e4:	f000 fa9a 	bl	8001f1c <RCC_Delay>
 80019e8:	e01c      	b.n	8001a24 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019ea:	4b0a      	ldr	r3, [pc, #40]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019f0:	f7ff fc14 	bl	800121c <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019f6:	e00f      	b.n	8001a18 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019f8:	f7ff fc10 	bl	800121c <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d908      	bls.n	8001a18 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e140      	b.n	8001c8c <HAL_RCC_OscConfig+0x4ec>
 8001a0a:	bf00      	nop
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	42420000 	.word	0x42420000
 8001a14:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a18:	4b9e      	ldr	r3, [pc, #632]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d1e9      	bne.n	80019f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0304 	and.w	r3, r3, #4
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f000 80a6 	beq.w	8001b7e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a32:	2300      	movs	r3, #0
 8001a34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a36:	4b97      	ldr	r3, [pc, #604]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d10d      	bne.n	8001a5e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a42:	4b94      	ldr	r3, [pc, #592]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	4a93      	ldr	r2, [pc, #588]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a4c:	61d3      	str	r3, [r2, #28]
 8001a4e:	4b91      	ldr	r3, [pc, #580]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001a50:	69db      	ldr	r3, [r3, #28]
 8001a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a56:	60bb      	str	r3, [r7, #8]
 8001a58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a5e:	4b8e      	ldr	r3, [pc, #568]	; (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d118      	bne.n	8001a9c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a6a:	4b8b      	ldr	r3, [pc, #556]	; (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a8a      	ldr	r2, [pc, #552]	; (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a76:	f7ff fbd1 	bl	800121c <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a7e:	f7ff fbcd 	bl	800121c <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b64      	cmp	r3, #100	; 0x64
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e0fd      	b.n	8001c8c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a90:	4b81      	ldr	r3, [pc, #516]	; (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d0f0      	beq.n	8001a7e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d106      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x312>
 8001aa4:	4b7b      	ldr	r3, [pc, #492]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001aa6:	6a1b      	ldr	r3, [r3, #32]
 8001aa8:	4a7a      	ldr	r2, [pc, #488]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001aaa:	f043 0301 	orr.w	r3, r3, #1
 8001aae:	6213      	str	r3, [r2, #32]
 8001ab0:	e02d      	b.n	8001b0e <HAL_RCC_OscConfig+0x36e>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d10c      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x334>
 8001aba:	4b76      	ldr	r3, [pc, #472]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001abc:	6a1b      	ldr	r3, [r3, #32]
 8001abe:	4a75      	ldr	r2, [pc, #468]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001ac0:	f023 0301 	bic.w	r3, r3, #1
 8001ac4:	6213      	str	r3, [r2, #32]
 8001ac6:	4b73      	ldr	r3, [pc, #460]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001ac8:	6a1b      	ldr	r3, [r3, #32]
 8001aca:	4a72      	ldr	r2, [pc, #456]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001acc:	f023 0304 	bic.w	r3, r3, #4
 8001ad0:	6213      	str	r3, [r2, #32]
 8001ad2:	e01c      	b.n	8001b0e <HAL_RCC_OscConfig+0x36e>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	2b05      	cmp	r3, #5
 8001ada:	d10c      	bne.n	8001af6 <HAL_RCC_OscConfig+0x356>
 8001adc:	4b6d      	ldr	r3, [pc, #436]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001ade:	6a1b      	ldr	r3, [r3, #32]
 8001ae0:	4a6c      	ldr	r2, [pc, #432]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001ae2:	f043 0304 	orr.w	r3, r3, #4
 8001ae6:	6213      	str	r3, [r2, #32]
 8001ae8:	4b6a      	ldr	r3, [pc, #424]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001aea:	6a1b      	ldr	r3, [r3, #32]
 8001aec:	4a69      	ldr	r2, [pc, #420]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001aee:	f043 0301 	orr.w	r3, r3, #1
 8001af2:	6213      	str	r3, [r2, #32]
 8001af4:	e00b      	b.n	8001b0e <HAL_RCC_OscConfig+0x36e>
 8001af6:	4b67      	ldr	r3, [pc, #412]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001af8:	6a1b      	ldr	r3, [r3, #32]
 8001afa:	4a66      	ldr	r2, [pc, #408]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001afc:	f023 0301 	bic.w	r3, r3, #1
 8001b00:	6213      	str	r3, [r2, #32]
 8001b02:	4b64      	ldr	r3, [pc, #400]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001b04:	6a1b      	ldr	r3, [r3, #32]
 8001b06:	4a63      	ldr	r2, [pc, #396]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001b08:	f023 0304 	bic.w	r3, r3, #4
 8001b0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d015      	beq.n	8001b42 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b16:	f7ff fb81 	bl	800121c <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b1c:	e00a      	b.n	8001b34 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b1e:	f7ff fb7d 	bl	800121c <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e0ab      	b.n	8001c8c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b34:	4b57      	ldr	r3, [pc, #348]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001b36:	6a1b      	ldr	r3, [r3, #32]
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d0ee      	beq.n	8001b1e <HAL_RCC_OscConfig+0x37e>
 8001b40:	e014      	b.n	8001b6c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b42:	f7ff fb6b 	bl	800121c <HAL_GetTick>
 8001b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b48:	e00a      	b.n	8001b60 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b4a:	f7ff fb67 	bl	800121c <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e095      	b.n	8001c8c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b60:	4b4c      	ldr	r3, [pc, #304]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001b62:	6a1b      	ldr	r3, [r3, #32]
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d1ee      	bne.n	8001b4a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b6c:	7dfb      	ldrb	r3, [r7, #23]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d105      	bne.n	8001b7e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b72:	4b48      	ldr	r3, [pc, #288]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	4a47      	ldr	r2, [pc, #284]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001b78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b7c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f000 8081 	beq.w	8001c8a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b88:	4b42      	ldr	r3, [pc, #264]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 030c 	and.w	r3, r3, #12
 8001b90:	2b08      	cmp	r3, #8
 8001b92:	d061      	beq.n	8001c58 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	69db      	ldr	r3, [r3, #28]
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d146      	bne.n	8001c2a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b9c:	4b3f      	ldr	r3, [pc, #252]	; (8001c9c <HAL_RCC_OscConfig+0x4fc>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba2:	f7ff fb3b 	bl	800121c <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ba8:	e008      	b.n	8001bbc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001baa:	f7ff fb37 	bl	800121c <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e067      	b.n	8001c8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bbc:	4b35      	ldr	r3, [pc, #212]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1f0      	bne.n	8001baa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a1b      	ldr	r3, [r3, #32]
 8001bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bd0:	d108      	bne.n	8001be4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bd2:	4b30      	ldr	r3, [pc, #192]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	492d      	ldr	r1, [pc, #180]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001be4:	4b2b      	ldr	r3, [pc, #172]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a19      	ldr	r1, [r3, #32]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf4:	430b      	orrs	r3, r1
 8001bf6:	4927      	ldr	r1, [pc, #156]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bfc:	4b27      	ldr	r3, [pc, #156]	; (8001c9c <HAL_RCC_OscConfig+0x4fc>)
 8001bfe:	2201      	movs	r2, #1
 8001c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c02:	f7ff fb0b 	bl	800121c <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c08:	e008      	b.n	8001c1c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c0a:	f7ff fb07 	bl	800121c <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e037      	b.n	8001c8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c1c:	4b1d      	ldr	r3, [pc, #116]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d0f0      	beq.n	8001c0a <HAL_RCC_OscConfig+0x46a>
 8001c28:	e02f      	b.n	8001c8a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c2a:	4b1c      	ldr	r3, [pc, #112]	; (8001c9c <HAL_RCC_OscConfig+0x4fc>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c30:	f7ff faf4 	bl	800121c <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c38:	f7ff faf0 	bl	800121c <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e020      	b.n	8001c8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c4a:	4b12      	ldr	r3, [pc, #72]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1f0      	bne.n	8001c38 <HAL_RCC_OscConfig+0x498>
 8001c56:	e018      	b.n	8001c8a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	69db      	ldr	r3, [r3, #28]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d101      	bne.n	8001c64 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e013      	b.n	8001c8c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c64:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a1b      	ldr	r3, [r3, #32]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d106      	bne.n	8001c86 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d001      	beq.n	8001c8a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e000      	b.n	8001c8c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3718      	adds	r7, #24
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	40021000 	.word	0x40021000
 8001c98:	40007000 	.word	0x40007000
 8001c9c:	42420060 	.word	0x42420060

08001ca0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d101      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e0d0      	b.n	8001e56 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cb4:	4b6a      	ldr	r3, [pc, #424]	; (8001e60 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0307 	and.w	r3, r3, #7
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d910      	bls.n	8001ce4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc2:	4b67      	ldr	r3, [pc, #412]	; (8001e60 <HAL_RCC_ClockConfig+0x1c0>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f023 0207 	bic.w	r2, r3, #7
 8001cca:	4965      	ldr	r1, [pc, #404]	; (8001e60 <HAL_RCC_ClockConfig+0x1c0>)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd2:	4b63      	ldr	r3, [pc, #396]	; (8001e60 <HAL_RCC_ClockConfig+0x1c0>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d001      	beq.n	8001ce4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e0b8      	b.n	8001e56 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d020      	beq.n	8001d32 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d005      	beq.n	8001d08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cfc:	4b59      	ldr	r3, [pc, #356]	; (8001e64 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	4a58      	ldr	r2, [pc, #352]	; (8001e64 <HAL_RCC_ClockConfig+0x1c4>)
 8001d02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d06:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0308 	and.w	r3, r3, #8
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d005      	beq.n	8001d20 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d14:	4b53      	ldr	r3, [pc, #332]	; (8001e64 <HAL_RCC_ClockConfig+0x1c4>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	4a52      	ldr	r2, [pc, #328]	; (8001e64 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d1e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d20:	4b50      	ldr	r3, [pc, #320]	; (8001e64 <HAL_RCC_ClockConfig+0x1c4>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	494d      	ldr	r1, [pc, #308]	; (8001e64 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d040      	beq.n	8001dc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d107      	bne.n	8001d56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d46:	4b47      	ldr	r3, [pc, #284]	; (8001e64 <HAL_RCC_ClockConfig+0x1c4>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d115      	bne.n	8001d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e07f      	b.n	8001e56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d107      	bne.n	8001d6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d5e:	4b41      	ldr	r3, [pc, #260]	; (8001e64 <HAL_RCC_ClockConfig+0x1c4>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d109      	bne.n	8001d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e073      	b.n	8001e56 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d6e:	4b3d      	ldr	r3, [pc, #244]	; (8001e64 <HAL_RCC_ClockConfig+0x1c4>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d101      	bne.n	8001d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e06b      	b.n	8001e56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d7e:	4b39      	ldr	r3, [pc, #228]	; (8001e64 <HAL_RCC_ClockConfig+0x1c4>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f023 0203 	bic.w	r2, r3, #3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	4936      	ldr	r1, [pc, #216]	; (8001e64 <HAL_RCC_ClockConfig+0x1c4>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d90:	f7ff fa44 	bl	800121c <HAL_GetTick>
 8001d94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d96:	e00a      	b.n	8001dae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d98:	f7ff fa40 	bl	800121c <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e053      	b.n	8001e56 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dae:	4b2d      	ldr	r3, [pc, #180]	; (8001e64 <HAL_RCC_ClockConfig+0x1c4>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f003 020c 	and.w	r2, r3, #12
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d1eb      	bne.n	8001d98 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dc0:	4b27      	ldr	r3, [pc, #156]	; (8001e60 <HAL_RCC_ClockConfig+0x1c0>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0307 	and.w	r3, r3, #7
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d210      	bcs.n	8001df0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dce:	4b24      	ldr	r3, [pc, #144]	; (8001e60 <HAL_RCC_ClockConfig+0x1c0>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f023 0207 	bic.w	r2, r3, #7
 8001dd6:	4922      	ldr	r1, [pc, #136]	; (8001e60 <HAL_RCC_ClockConfig+0x1c0>)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dde:	4b20      	ldr	r3, [pc, #128]	; (8001e60 <HAL_RCC_ClockConfig+0x1c0>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	683a      	ldr	r2, [r7, #0]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d001      	beq.n	8001df0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e032      	b.n	8001e56 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0304 	and.w	r3, r3, #4
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d008      	beq.n	8001e0e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dfc:	4b19      	ldr	r3, [pc, #100]	; (8001e64 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	4916      	ldr	r1, [pc, #88]	; (8001e64 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0308 	and.w	r3, r3, #8
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d009      	beq.n	8001e2e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e1a:	4b12      	ldr	r3, [pc, #72]	; (8001e64 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	490e      	ldr	r1, [pc, #56]	; (8001e64 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e2e:	f000 f821 	bl	8001e74 <HAL_RCC_GetSysClockFreq>
 8001e32:	4602      	mov	r2, r0
 8001e34:	4b0b      	ldr	r3, [pc, #44]	; (8001e64 <HAL_RCC_ClockConfig+0x1c4>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	091b      	lsrs	r3, r3, #4
 8001e3a:	f003 030f 	and.w	r3, r3, #15
 8001e3e:	490a      	ldr	r1, [pc, #40]	; (8001e68 <HAL_RCC_ClockConfig+0x1c8>)
 8001e40:	5ccb      	ldrb	r3, [r1, r3]
 8001e42:	fa22 f303 	lsr.w	r3, r2, r3
 8001e46:	4a09      	ldr	r2, [pc, #36]	; (8001e6c <HAL_RCC_ClockConfig+0x1cc>)
 8001e48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e4a:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <HAL_RCC_ClockConfig+0x1d0>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff f9a2 	bl	8001198 <HAL_InitTick>

  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40022000 	.word	0x40022000
 8001e64:	40021000 	.word	0x40021000
 8001e68:	08002794 	.word	0x08002794
 8001e6c:	20000008 	.word	0x20000008
 8001e70:	2000000c 	.word	0x2000000c

08001e74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b087      	sub	sp, #28
 8001e78:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60fb      	str	r3, [r7, #12]
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60bb      	str	r3, [r7, #8]
 8001e82:	2300      	movs	r3, #0
 8001e84:	617b      	str	r3, [r7, #20]
 8001e86:	2300      	movs	r3, #0
 8001e88:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e8e:	4b1e      	ldr	r3, [pc, #120]	; (8001f08 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f003 030c 	and.w	r3, r3, #12
 8001e9a:	2b04      	cmp	r3, #4
 8001e9c:	d002      	beq.n	8001ea4 <HAL_RCC_GetSysClockFreq+0x30>
 8001e9e:	2b08      	cmp	r3, #8
 8001ea0:	d003      	beq.n	8001eaa <HAL_RCC_GetSysClockFreq+0x36>
 8001ea2:	e027      	b.n	8001ef4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ea4:	4b19      	ldr	r3, [pc, #100]	; (8001f0c <HAL_RCC_GetSysClockFreq+0x98>)
 8001ea6:	613b      	str	r3, [r7, #16]
      break;
 8001ea8:	e027      	b.n	8001efa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	0c9b      	lsrs	r3, r3, #18
 8001eae:	f003 030f 	and.w	r3, r3, #15
 8001eb2:	4a17      	ldr	r2, [pc, #92]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001eb4:	5cd3      	ldrb	r3, [r2, r3]
 8001eb6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d010      	beq.n	8001ee4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ec2:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	0c5b      	lsrs	r3, r3, #17
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	4a11      	ldr	r2, [pc, #68]	; (8001f14 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ece:	5cd3      	ldrb	r3, [r2, r3]
 8001ed0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a0d      	ldr	r2, [pc, #52]	; (8001f0c <HAL_RCC_GetSysClockFreq+0x98>)
 8001ed6:	fb02 f203 	mul.w	r2, r2, r3
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee0:	617b      	str	r3, [r7, #20]
 8001ee2:	e004      	b.n	8001eee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a0c      	ldr	r2, [pc, #48]	; (8001f18 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ee8:	fb02 f303 	mul.w	r3, r2, r3
 8001eec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	613b      	str	r3, [r7, #16]
      break;
 8001ef2:	e002      	b.n	8001efa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ef4:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <HAL_RCC_GetSysClockFreq+0x98>)
 8001ef6:	613b      	str	r3, [r7, #16]
      break;
 8001ef8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001efa:	693b      	ldr	r3, [r7, #16]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	371c      	adds	r7, #28
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bc80      	pop	{r7}
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	007a1200 	.word	0x007a1200
 8001f10:	080027a4 	.word	0x080027a4
 8001f14:	080027b4 	.word	0x080027b4
 8001f18:	003d0900 	.word	0x003d0900

08001f1c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f24:	4b0a      	ldr	r3, [pc, #40]	; (8001f50 <RCC_Delay+0x34>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a0a      	ldr	r2, [pc, #40]	; (8001f54 <RCC_Delay+0x38>)
 8001f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2e:	0a5b      	lsrs	r3, r3, #9
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	fb02 f303 	mul.w	r3, r2, r3
 8001f36:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f38:	bf00      	nop
  }
  while (Delay --);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	1e5a      	subs	r2, r3, #1
 8001f3e:	60fa      	str	r2, [r7, #12]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1f9      	bne.n	8001f38 <RCC_Delay+0x1c>
}
 8001f44:	bf00      	nop
 8001f46:	bf00      	nop
 8001f48:	3714      	adds	r7, #20
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bc80      	pop	{r7}
 8001f4e:	4770      	bx	lr
 8001f50:	20000008 	.word	0x20000008
 8001f54:	10624dd3 	.word	0x10624dd3

08001f58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e041      	b.n	8001fee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d106      	bne.n	8001f84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7ff f872 	bl	8001068 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2202      	movs	r2, #2
 8001f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	3304      	adds	r3, #4
 8001f94:	4619      	mov	r1, r3
 8001f96:	4610      	mov	r0, r2
 8001f98:	f000 fa56 	bl	8002448 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
	...

08001ff8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002006:	b2db      	uxtb	r3, r3
 8002008:	2b01      	cmp	r3, #1
 800200a:	d001      	beq.n	8002010 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e035      	b.n	800207c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2202      	movs	r2, #2
 8002014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68da      	ldr	r2, [r3, #12]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f042 0201 	orr.w	r2, r2, #1
 8002026:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a16      	ldr	r2, [pc, #88]	; (8002088 <HAL_TIM_Base_Start_IT+0x90>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d009      	beq.n	8002046 <HAL_TIM_Base_Start_IT+0x4e>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800203a:	d004      	beq.n	8002046 <HAL_TIM_Base_Start_IT+0x4e>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a12      	ldr	r2, [pc, #72]	; (800208c <HAL_TIM_Base_Start_IT+0x94>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d111      	bne.n	800206a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f003 0307 	and.w	r3, r3, #7
 8002050:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2b06      	cmp	r3, #6
 8002056:	d010      	beq.n	800207a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f042 0201 	orr.w	r2, r2, #1
 8002066:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002068:	e007      	b.n	800207a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f042 0201 	orr.w	r2, r2, #1
 8002078:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3714      	adds	r7, #20
 8002080:	46bd      	mov	sp, r7
 8002082:	bc80      	pop	{r7}
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	40012c00 	.word	0x40012c00
 800208c:	40000400 	.word	0x40000400

08002090 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d020      	beq.n	80020f4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d01b      	beq.n	80020f4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f06f 0202 	mvn.w	r2, #2
 80020c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2201      	movs	r2, #1
 80020ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	f003 0303 	and.w	r3, r3, #3
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 f998 	bl	8002410 <HAL_TIM_IC_CaptureCallback>
 80020e0:	e005      	b.n	80020ee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 f98b 	bl	80023fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 f99a 	bl	8002422 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	f003 0304 	and.w	r3, r3, #4
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d020      	beq.n	8002140 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f003 0304 	and.w	r3, r3, #4
 8002104:	2b00      	cmp	r3, #0
 8002106:	d01b      	beq.n	8002140 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f06f 0204 	mvn.w	r2, #4
 8002110:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2202      	movs	r2, #2
 8002116:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002122:	2b00      	cmp	r3, #0
 8002124:	d003      	beq.n	800212e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 f972 	bl	8002410 <HAL_TIM_IC_CaptureCallback>
 800212c:	e005      	b.n	800213a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 f965 	bl	80023fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f000 f974 	bl	8002422 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	f003 0308 	and.w	r3, r3, #8
 8002146:	2b00      	cmp	r3, #0
 8002148:	d020      	beq.n	800218c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f003 0308 	and.w	r3, r3, #8
 8002150:	2b00      	cmp	r3, #0
 8002152:	d01b      	beq.n	800218c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f06f 0208 	mvn.w	r2, #8
 800215c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2204      	movs	r2, #4
 8002162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	f003 0303 	and.w	r3, r3, #3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 f94c 	bl	8002410 <HAL_TIM_IC_CaptureCallback>
 8002178:	e005      	b.n	8002186 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 f93f 	bl	80023fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 f94e 	bl	8002422 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	f003 0310 	and.w	r3, r3, #16
 8002192:	2b00      	cmp	r3, #0
 8002194:	d020      	beq.n	80021d8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f003 0310 	and.w	r3, r3, #16
 800219c:	2b00      	cmp	r3, #0
 800219e:	d01b      	beq.n	80021d8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f06f 0210 	mvn.w	r2, #16
 80021a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2208      	movs	r2, #8
 80021ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	69db      	ldr	r3, [r3, #28]
 80021b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 f926 	bl	8002410 <HAL_TIM_IC_CaptureCallback>
 80021c4:	e005      	b.n	80021d2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 f919 	bl	80023fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f000 f928 	bl	8002422 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00c      	beq.n	80021fc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f003 0301 	and.w	r3, r3, #1
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d007      	beq.n	80021fc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f06f 0201 	mvn.w	r2, #1
 80021f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7fe fed4 	bl	8000fa4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00c      	beq.n	8002220 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800220c:	2b00      	cmp	r3, #0
 800220e:	d007      	beq.n	8002220 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 fa6f 	bl	80026fe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00c      	beq.n	8002244 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002230:	2b00      	cmp	r3, #0
 8002232:	d007      	beq.n	8002244 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800223c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 f8f8 	bl	8002434 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	f003 0320 	and.w	r3, r3, #32
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00c      	beq.n	8002268 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f003 0320 	and.w	r3, r3, #32
 8002254:	2b00      	cmp	r3, #0
 8002256:	d007      	beq.n	8002268 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f06f 0220 	mvn.w	r2, #32
 8002260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 fa42 	bl	80026ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002268:	bf00      	nop
 800226a:	3710      	adds	r7, #16
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800227a:	2300      	movs	r3, #0
 800227c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002284:	2b01      	cmp	r3, #1
 8002286:	d101      	bne.n	800228c <HAL_TIM_ConfigClockSource+0x1c>
 8002288:	2302      	movs	r3, #2
 800228a:	e0b4      	b.n	80023f6 <HAL_TIM_ConfigClockSource+0x186>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2202      	movs	r2, #2
 8002298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80022aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68ba      	ldr	r2, [r7, #8]
 80022ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022c4:	d03e      	beq.n	8002344 <HAL_TIM_ConfigClockSource+0xd4>
 80022c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022ca:	f200 8087 	bhi.w	80023dc <HAL_TIM_ConfigClockSource+0x16c>
 80022ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022d2:	f000 8086 	beq.w	80023e2 <HAL_TIM_ConfigClockSource+0x172>
 80022d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022da:	d87f      	bhi.n	80023dc <HAL_TIM_ConfigClockSource+0x16c>
 80022dc:	2b70      	cmp	r3, #112	; 0x70
 80022de:	d01a      	beq.n	8002316 <HAL_TIM_ConfigClockSource+0xa6>
 80022e0:	2b70      	cmp	r3, #112	; 0x70
 80022e2:	d87b      	bhi.n	80023dc <HAL_TIM_ConfigClockSource+0x16c>
 80022e4:	2b60      	cmp	r3, #96	; 0x60
 80022e6:	d050      	beq.n	800238a <HAL_TIM_ConfigClockSource+0x11a>
 80022e8:	2b60      	cmp	r3, #96	; 0x60
 80022ea:	d877      	bhi.n	80023dc <HAL_TIM_ConfigClockSource+0x16c>
 80022ec:	2b50      	cmp	r3, #80	; 0x50
 80022ee:	d03c      	beq.n	800236a <HAL_TIM_ConfigClockSource+0xfa>
 80022f0:	2b50      	cmp	r3, #80	; 0x50
 80022f2:	d873      	bhi.n	80023dc <HAL_TIM_ConfigClockSource+0x16c>
 80022f4:	2b40      	cmp	r3, #64	; 0x40
 80022f6:	d058      	beq.n	80023aa <HAL_TIM_ConfigClockSource+0x13a>
 80022f8:	2b40      	cmp	r3, #64	; 0x40
 80022fa:	d86f      	bhi.n	80023dc <HAL_TIM_ConfigClockSource+0x16c>
 80022fc:	2b30      	cmp	r3, #48	; 0x30
 80022fe:	d064      	beq.n	80023ca <HAL_TIM_ConfigClockSource+0x15a>
 8002300:	2b30      	cmp	r3, #48	; 0x30
 8002302:	d86b      	bhi.n	80023dc <HAL_TIM_ConfigClockSource+0x16c>
 8002304:	2b20      	cmp	r3, #32
 8002306:	d060      	beq.n	80023ca <HAL_TIM_ConfigClockSource+0x15a>
 8002308:	2b20      	cmp	r3, #32
 800230a:	d867      	bhi.n	80023dc <HAL_TIM_ConfigClockSource+0x16c>
 800230c:	2b00      	cmp	r3, #0
 800230e:	d05c      	beq.n	80023ca <HAL_TIM_ConfigClockSource+0x15a>
 8002310:	2b10      	cmp	r3, #16
 8002312:	d05a      	beq.n	80023ca <HAL_TIM_ConfigClockSource+0x15a>
 8002314:	e062      	b.n	80023dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6818      	ldr	r0, [r3, #0]
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	6899      	ldr	r1, [r3, #8]
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685a      	ldr	r2, [r3, #4]
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	f000 f96a 	bl	80025fe <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002338:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68ba      	ldr	r2, [r7, #8]
 8002340:	609a      	str	r2, [r3, #8]
      break;
 8002342:	e04f      	b.n	80023e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6818      	ldr	r0, [r3, #0]
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	6899      	ldr	r1, [r3, #8]
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685a      	ldr	r2, [r3, #4]
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	f000 f953 	bl	80025fe <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	689a      	ldr	r2, [r3, #8]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002366:	609a      	str	r2, [r3, #8]
      break;
 8002368:	e03c      	b.n	80023e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6818      	ldr	r0, [r3, #0]
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	6859      	ldr	r1, [r3, #4]
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	461a      	mov	r2, r3
 8002378:	f000 f8ca 	bl	8002510 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2150      	movs	r1, #80	; 0x50
 8002382:	4618      	mov	r0, r3
 8002384:	f000 f921 	bl	80025ca <TIM_ITRx_SetConfig>
      break;
 8002388:	e02c      	b.n	80023e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6818      	ldr	r0, [r3, #0]
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	6859      	ldr	r1, [r3, #4]
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	461a      	mov	r2, r3
 8002398:	f000 f8e8 	bl	800256c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2160      	movs	r1, #96	; 0x60
 80023a2:	4618      	mov	r0, r3
 80023a4:	f000 f911 	bl	80025ca <TIM_ITRx_SetConfig>
      break;
 80023a8:	e01c      	b.n	80023e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6818      	ldr	r0, [r3, #0]
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	6859      	ldr	r1, [r3, #4]
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	461a      	mov	r2, r3
 80023b8:	f000 f8aa 	bl	8002510 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2140      	movs	r1, #64	; 0x40
 80023c2:	4618      	mov	r0, r3
 80023c4:	f000 f901 	bl	80025ca <TIM_ITRx_SetConfig>
      break;
 80023c8:	e00c      	b.n	80023e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4619      	mov	r1, r3
 80023d4:	4610      	mov	r0, r2
 80023d6:	f000 f8f8 	bl	80025ca <TIM_ITRx_SetConfig>
      break;
 80023da:	e003      	b.n	80023e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	73fb      	strb	r3, [r7, #15]
      break;
 80023e0:	e000      	b.n	80023e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80023e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80023f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023fe:	b480      	push	{r7}
 8002400:	b083      	sub	sp, #12
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002406:	bf00      	nop
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr

08002410 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	bc80      	pop	{r7}
 8002420:	4770      	bx	lr

08002422 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002422:	b480      	push	{r7}
 8002424:	b083      	sub	sp, #12
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800242a:	bf00      	nop
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr

08002434 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	bc80      	pop	{r7}
 8002444:	4770      	bx	lr
	...

08002448 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a2b      	ldr	r2, [pc, #172]	; (8002508 <TIM_Base_SetConfig+0xc0>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d007      	beq.n	8002470 <TIM_Base_SetConfig+0x28>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002466:	d003      	beq.n	8002470 <TIM_Base_SetConfig+0x28>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a28      	ldr	r2, [pc, #160]	; (800250c <TIM_Base_SetConfig+0xc4>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d108      	bne.n	8002482 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002476:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	4313      	orrs	r3, r2
 8002480:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a20      	ldr	r2, [pc, #128]	; (8002508 <TIM_Base_SetConfig+0xc0>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d007      	beq.n	800249a <TIM_Base_SetConfig+0x52>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002490:	d003      	beq.n	800249a <TIM_Base_SetConfig+0x52>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a1d      	ldr	r2, [pc, #116]	; (800250c <TIM_Base_SetConfig+0xc4>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d108      	bne.n	80024ac <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	689a      	ldr	r2, [r3, #8]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a0d      	ldr	r2, [pc, #52]	; (8002508 <TIM_Base_SetConfig+0xc0>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d103      	bne.n	80024e0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	691a      	ldr	r2, [r3, #16]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d005      	beq.n	80024fe <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	f023 0201 	bic.w	r2, r3, #1
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	611a      	str	r2, [r3, #16]
  }
}
 80024fe:	bf00      	nop
 8002500:	3714      	adds	r7, #20
 8002502:	46bd      	mov	sp, r7
 8002504:	bc80      	pop	{r7}
 8002506:	4770      	bx	lr
 8002508:	40012c00 	.word	0x40012c00
 800250c:	40000400 	.word	0x40000400

08002510 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002510:	b480      	push	{r7}
 8002512:	b087      	sub	sp, #28
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	f023 0201 	bic.w	r2, r3, #1
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800253a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	011b      	lsls	r3, r3, #4
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	4313      	orrs	r3, r2
 8002544:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	f023 030a 	bic.w	r3, r3, #10
 800254c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800254e:	697a      	ldr	r2, [r7, #20]
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	4313      	orrs	r3, r2
 8002554:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	697a      	ldr	r2, [r7, #20]
 8002560:	621a      	str	r2, [r3, #32]
}
 8002562:	bf00      	nop
 8002564:	371c      	adds	r7, #28
 8002566:	46bd      	mov	sp, r7
 8002568:	bc80      	pop	{r7}
 800256a:	4770      	bx	lr

0800256c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800256c:	b480      	push	{r7}
 800256e:	b087      	sub	sp, #28
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6a1b      	ldr	r3, [r3, #32]
 8002582:	f023 0210 	bic.w	r2, r3, #16
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002596:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	031b      	lsls	r3, r3, #12
 800259c:	693a      	ldr	r2, [r7, #16]
 800259e:	4313      	orrs	r3, r2
 80025a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80025a8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	011b      	lsls	r3, r3, #4
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	621a      	str	r2, [r3, #32]
}
 80025c0:	bf00      	nop
 80025c2:	371c      	adds	r7, #28
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bc80      	pop	{r7}
 80025c8:	4770      	bx	lr

080025ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80025ca:	b480      	push	{r7}
 80025cc:	b085      	sub	sp, #20
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
 80025d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	f043 0307 	orr.w	r3, r3, #7
 80025ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	609a      	str	r2, [r3, #8]
}
 80025f4:	bf00      	nop
 80025f6:	3714      	adds	r7, #20
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bc80      	pop	{r7}
 80025fc:	4770      	bx	lr

080025fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80025fe:	b480      	push	{r7}
 8002600:	b087      	sub	sp, #28
 8002602:	af00      	add	r7, sp, #0
 8002604:	60f8      	str	r0, [r7, #12]
 8002606:	60b9      	str	r1, [r7, #8]
 8002608:	607a      	str	r2, [r7, #4]
 800260a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002618:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	021a      	lsls	r2, r3, #8
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	431a      	orrs	r2, r3
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	4313      	orrs	r3, r2
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	4313      	orrs	r3, r2
 800262a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	609a      	str	r2, [r3, #8]
}
 8002632:	bf00      	nop
 8002634:	371c      	adds	r7, #28
 8002636:	46bd      	mov	sp, r7
 8002638:	bc80      	pop	{r7}
 800263a:	4770      	bx	lr

0800263c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800264c:	2b01      	cmp	r3, #1
 800264e:	d101      	bne.n	8002654 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002650:	2302      	movs	r3, #2
 8002652:	e041      	b.n	80026d8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2202      	movs	r2, #2
 8002660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800267a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	4313      	orrs	r3, r2
 8002684:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a14      	ldr	r2, [pc, #80]	; (80026e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d009      	beq.n	80026ac <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026a0:	d004      	beq.n	80026ac <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a10      	ldr	r2, [pc, #64]	; (80026e8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d10c      	bne.n	80026c6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	68ba      	ldr	r2, [r7, #8]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68ba      	ldr	r2, [r7, #8]
 80026c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2201      	movs	r2, #1
 80026ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3714      	adds	r7, #20
 80026dc:	46bd      	mov	sp, r7
 80026de:	bc80      	pop	{r7}
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	40012c00 	.word	0x40012c00
 80026e8:	40000400 	.word	0x40000400

080026ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bc80      	pop	{r7}
 80026fc:	4770      	bx	lr

080026fe <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026fe:	b480      	push	{r7}
 8002700:	b083      	sub	sp, #12
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002706:	bf00      	nop
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	bc80      	pop	{r7}
 800270e:	4770      	bx	lr

08002710 <__libc_init_array>:
 8002710:	b570      	push	{r4, r5, r6, lr}
 8002712:	2600      	movs	r6, #0
 8002714:	4d0c      	ldr	r5, [pc, #48]	; (8002748 <__libc_init_array+0x38>)
 8002716:	4c0d      	ldr	r4, [pc, #52]	; (800274c <__libc_init_array+0x3c>)
 8002718:	1b64      	subs	r4, r4, r5
 800271a:	10a4      	asrs	r4, r4, #2
 800271c:	42a6      	cmp	r6, r4
 800271e:	d109      	bne.n	8002734 <__libc_init_array+0x24>
 8002720:	f000 f822 	bl	8002768 <_init>
 8002724:	2600      	movs	r6, #0
 8002726:	4d0a      	ldr	r5, [pc, #40]	; (8002750 <__libc_init_array+0x40>)
 8002728:	4c0a      	ldr	r4, [pc, #40]	; (8002754 <__libc_init_array+0x44>)
 800272a:	1b64      	subs	r4, r4, r5
 800272c:	10a4      	asrs	r4, r4, #2
 800272e:	42a6      	cmp	r6, r4
 8002730:	d105      	bne.n	800273e <__libc_init_array+0x2e>
 8002732:	bd70      	pop	{r4, r5, r6, pc}
 8002734:	f855 3b04 	ldr.w	r3, [r5], #4
 8002738:	4798      	blx	r3
 800273a:	3601      	adds	r6, #1
 800273c:	e7ee      	b.n	800271c <__libc_init_array+0xc>
 800273e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002742:	4798      	blx	r3
 8002744:	3601      	adds	r6, #1
 8002746:	e7f2      	b.n	800272e <__libc_init_array+0x1e>
 8002748:	080027b8 	.word	0x080027b8
 800274c:	080027b8 	.word	0x080027b8
 8002750:	080027b8 	.word	0x080027b8
 8002754:	080027bc 	.word	0x080027bc

08002758 <memset>:
 8002758:	4603      	mov	r3, r0
 800275a:	4402      	add	r2, r0
 800275c:	4293      	cmp	r3, r2
 800275e:	d100      	bne.n	8002762 <memset+0xa>
 8002760:	4770      	bx	lr
 8002762:	f803 1b01 	strb.w	r1, [r3], #1
 8002766:	e7f9      	b.n	800275c <memset+0x4>

08002768 <_init>:
 8002768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800276a:	bf00      	nop
 800276c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800276e:	bc08      	pop	{r3}
 8002770:	469e      	mov	lr, r3
 8002772:	4770      	bx	lr

08002774 <_fini>:
 8002774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002776:	bf00      	nop
 8002778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800277a:	bc08      	pop	{r3}
 800277c:	469e      	mov	lr, r3
 800277e:	4770      	bx	lr
