
LAB3EX5_backup4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002584  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002690  08002690  00012690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026c8  080026c8  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080026c8  080026c8  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026c8  080026c8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026c8  080026c8  000126c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026cc  080026cc  000126cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080026d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000014  080026e4  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  080026e4  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000090f0  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018b3  00000000  00000000  0002912d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a80  00000000  00000000  0002a9e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a0  00000000  00000000  0002b460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000014d4  00000000  00000000  0002be00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b89a  00000000  00000000  0002d2d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082598  00000000  00000000  00038b6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000bb106  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a20  00000000  00000000  000bb15c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08002678 	.word	0x08002678

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08002678 	.word	0x08002678

0800014c <tens>:
#include "input_reading.h"
#include "input_processing.h"

// ---------- LED GROUP HELPERS ----------

static inline uint8_t tens(uint8_t v){ return v / 10; }
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	4a04      	ldr	r2, [pc, #16]	; (800016c <tens+0x20>)
 800015a:	fba2 2303 	umull	r2, r3, r2, r3
 800015e:	08db      	lsrs	r3, r3, #3
 8000160:	b2db      	uxtb	r3, r3
 8000162:	4618      	mov	r0, r3
 8000164:	370c      	adds	r7, #12
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	cccccccd 	.word	0xcccccccd

08000170 <ones>:
static inline uint8_t ones(uint8_t v){ return v % 10; }
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
 800017a:	79fa      	ldrb	r2, [r7, #7]
 800017c:	4b07      	ldr	r3, [pc, #28]	; (800019c <ones+0x2c>)
 800017e:	fba3 1302 	umull	r1, r3, r3, r2
 8000182:	08d9      	lsrs	r1, r3, #3
 8000184:	460b      	mov	r3, r1
 8000186:	009b      	lsls	r3, r3, #2
 8000188:	440b      	add	r3, r1
 800018a:	005b      	lsls	r3, r3, #1
 800018c:	1ad3      	subs	r3, r2, r3
 800018e:	b2db      	uxtb	r3, r3
 8000190:	4618      	mov	r0, r3
 8000192:	370c      	adds	r7, #12
 8000194:	46bd      	mov	sp, r7
 8000196:	bc80      	pop	{r7}
 8000198:	4770      	bx	lr
 800019a:	bf00      	nop
 800019c:	cccccccd 	.word	0xcccccccd

080001a0 <leds_all_off>:

static inline void leds_all_off(void){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA,
 80001a4:	2200      	movs	r2, #0
 80001a6:	f640 71ff 	movw	r1, #4095	; 0xfff
 80001aa:	4802      	ldr	r0, [pc, #8]	; (80001b4 <leds_all_off+0x14>)
 80001ac:	f001 fa67 	bl	800167e <HAL_GPIO_WritePin>
    R1_W_Pin|R2_N_Pin|R3_E_Pin|R4_S_Pin|
    Y1_W_Pin|Y2_N_Pin|Y3_E_Pin|Y4_S_Pin|
    G1_W_Pin|G2_N_Pin|G3_E_Pin|G4_S_Pin, GPIO_PIN_RESET);
}
 80001b0:	bf00      	nop
 80001b2:	bd80      	pop	{r7, pc}
 80001b4:	40010800 	.word	0x40010800

080001b8 <we_red_on>:
static inline void we_red_on(void){   HAL_GPIO_WritePin(GPIOA, R1_W_Pin, GPIO_PIN_SET); }
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
 80001bc:	2201      	movs	r2, #1
 80001be:	2101      	movs	r1, #1
 80001c0:	4802      	ldr	r0, [pc, #8]	; (80001cc <we_red_on+0x14>)
 80001c2:	f001 fa5c 	bl	800167e <HAL_GPIO_WritePin>
 80001c6:	bf00      	nop
 80001c8:	bd80      	pop	{r7, pc}
 80001ca:	bf00      	nop
 80001cc:	40010800 	.word	0x40010800

080001d0 <we_yel_on>:
static inline void we_yel_on(void){   HAL_GPIO_WritePin(GPIOA, Y1_W_Pin, GPIO_PIN_SET); }
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
 80001d4:	2201      	movs	r2, #1
 80001d6:	2110      	movs	r1, #16
 80001d8:	4802      	ldr	r0, [pc, #8]	; (80001e4 <we_yel_on+0x14>)
 80001da:	f001 fa50 	bl	800167e <HAL_GPIO_WritePin>
 80001de:	bf00      	nop
 80001e0:	bd80      	pop	{r7, pc}
 80001e2:	bf00      	nop
 80001e4:	40010800 	.word	0x40010800

080001e8 <we_grn_on>:
static inline void we_grn_on(void){   HAL_GPIO_WritePin(GPIOA, G1_W_Pin, GPIO_PIN_SET); }
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
 80001ec:	2201      	movs	r2, #1
 80001ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001f2:	4802      	ldr	r0, [pc, #8]	; (80001fc <we_grn_on+0x14>)
 80001f4:	f001 fa43 	bl	800167e <HAL_GPIO_WritePin>
 80001f8:	bf00      	nop
 80001fa:	bd80      	pop	{r7, pc}
 80001fc:	40010800 	.word	0x40010800

08000200 <ns_red_on>:
static inline void ns_red_on(void){   HAL_GPIO_WritePin(GPIOA, R2_N_Pin, GPIO_PIN_SET); }
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
 8000204:	2201      	movs	r2, #1
 8000206:	2102      	movs	r1, #2
 8000208:	4802      	ldr	r0, [pc, #8]	; (8000214 <ns_red_on+0x14>)
 800020a:	f001 fa38 	bl	800167e <HAL_GPIO_WritePin>
 800020e:	bf00      	nop
 8000210:	bd80      	pop	{r7, pc}
 8000212:	bf00      	nop
 8000214:	40010800 	.word	0x40010800

08000218 <ns_yel_on>:
static inline void ns_yel_on(void){   HAL_GPIO_WritePin(GPIOA, Y2_N_Pin, GPIO_PIN_SET); }
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
 800021c:	2201      	movs	r2, #1
 800021e:	2120      	movs	r1, #32
 8000220:	4802      	ldr	r0, [pc, #8]	; (800022c <ns_yel_on+0x14>)
 8000222:	f001 fa2c 	bl	800167e <HAL_GPIO_WritePin>
 8000226:	bf00      	nop
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop
 800022c:	40010800 	.word	0x40010800

08000230 <ns_grn_on>:
static inline void ns_grn_on(void){   HAL_GPIO_WritePin(GPIOA, G2_N_Pin, GPIO_PIN_SET); }
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
 8000234:	2201      	movs	r2, #1
 8000236:	f44f 7100 	mov.w	r1, #512	; 0x200
 800023a:	4802      	ldr	r0, [pc, #8]	; (8000244 <ns_grn_on+0x14>)
 800023c:	f001 fa1f 	bl	800167e <HAL_GPIO_WritePin>
 8000240:	bf00      	nop
 8000242:	bd80      	pop	{r7, pc}
 8000244:	40010800 	.word	0x40010800

08000248 <ea_red_on>:
static inline void ea_red_on(void){   HAL_GPIO_WritePin(GPIOA, R3_E_Pin, GPIO_PIN_SET); }
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
 800024c:	2201      	movs	r2, #1
 800024e:	2104      	movs	r1, #4
 8000250:	4802      	ldr	r0, [pc, #8]	; (800025c <ea_red_on+0x14>)
 8000252:	f001 fa14 	bl	800167e <HAL_GPIO_WritePin>
 8000256:	bf00      	nop
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	40010800 	.word	0x40010800

08000260 <ea_yel_on>:
static inline void ea_yel_on(void){   HAL_GPIO_WritePin(GPIOA, Y3_E_Pin, GPIO_PIN_SET); }
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
 8000264:	2201      	movs	r2, #1
 8000266:	2140      	movs	r1, #64	; 0x40
 8000268:	4802      	ldr	r0, [pc, #8]	; (8000274 <ea_yel_on+0x14>)
 800026a:	f001 fa08 	bl	800167e <HAL_GPIO_WritePin>
 800026e:	bf00      	nop
 8000270:	bd80      	pop	{r7, pc}
 8000272:	bf00      	nop
 8000274:	40010800 	.word	0x40010800

08000278 <ea_grn_on>:
static inline void ea_grn_on(void){   HAL_GPIO_WritePin(GPIOA, G3_E_Pin, GPIO_PIN_SET); }
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
 800027c:	2201      	movs	r2, #1
 800027e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000282:	4802      	ldr	r0, [pc, #8]	; (800028c <ea_grn_on+0x14>)
 8000284:	f001 f9fb 	bl	800167e <HAL_GPIO_WritePin>
 8000288:	bf00      	nop
 800028a:	bd80      	pop	{r7, pc}
 800028c:	40010800 	.word	0x40010800

08000290 <so_red_on>:
static inline void so_red_on(void){   HAL_GPIO_WritePin(GPIOA, R4_S_Pin, GPIO_PIN_SET); }
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
 8000294:	2201      	movs	r2, #1
 8000296:	2108      	movs	r1, #8
 8000298:	4802      	ldr	r0, [pc, #8]	; (80002a4 <so_red_on+0x14>)
 800029a:	f001 f9f0 	bl	800167e <HAL_GPIO_WritePin>
 800029e:	bf00      	nop
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	40010800 	.word	0x40010800

080002a8 <so_yel_on>:
static inline void so_yel_on(void){   HAL_GPIO_WritePin(GPIOA, Y4_S_Pin, GPIO_PIN_SET); }
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
 80002ac:	2201      	movs	r2, #1
 80002ae:	2180      	movs	r1, #128	; 0x80
 80002b0:	4802      	ldr	r0, [pc, #8]	; (80002bc <so_yel_on+0x14>)
 80002b2:	f001 f9e4 	bl	800167e <HAL_GPIO_WritePin>
 80002b6:	bf00      	nop
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	40010800 	.word	0x40010800

080002c0 <so_grn_on>:
static inline void so_grn_on(void){   HAL_GPIO_WritePin(GPIOA, G4_S_Pin, GPIO_PIN_SET); }
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
 80002c4:	2201      	movs	r2, #1
 80002c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002ca:	4802      	ldr	r0, [pc, #8]	; (80002d4 <so_grn_on+0x14>)
 80002cc:	f001 f9d7 	bl	800167e <HAL_GPIO_WritePin>
 80002d0:	bf00      	nop
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	40010800 	.word	0x40010800

080002d8 <compute_corridor_remaining>:
  /*7*/ SEG0_Pin|SEG1_Pin|SEG2_Pin,
  /*8*/ SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin,
  /*9*/ SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin|SEG5_Pin|SEG6_Pin
};

static void compute_corridor_remaining(uint8_t *we_sec, uint8_t *ns_sec){
 80002d8:	b480      	push	{r7}
 80002da:	b085      	sub	sp, #20
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
 80002e0:	6039      	str	r1, [r7, #0]
    uint8_t we = 0, ns = 0;
 80002e2:	2300      	movs	r3, #0
 80002e4:	73fb      	strb	r3, [r7, #15]
 80002e6:	2300      	movs	r3, #0
 80002e8:	73bb      	strb	r3, [r7, #14]
    switch (phase){
 80002ea:	4b20      	ldr	r3, [pc, #128]	; (800036c <compute_corridor_remaining+0x94>)
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	2b03      	cmp	r3, #3
 80002f0:	d826      	bhi.n	8000340 <compute_corridor_remaining+0x68>
 80002f2:	a201      	add	r2, pc, #4	; (adr r2, 80002f8 <compute_corridor_remaining+0x20>)
 80002f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002f8:	08000309 	.word	0x08000309
 80002fc:	08000317 	.word	0x08000317
 8000300:	08000325 	.word	0x08000325
 8000304:	08000333 	.word	0x08000333
      case PH_WE_GREEN:
        we = phase_remain;          // WE is running green
 8000308:	4b19      	ldr	r3, [pc, #100]	; (8000370 <compute_corridor_remaining+0x98>)
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	73fb      	strb	r3, [r7, #15]
        ns = ns_red;                // NS must wait full red
 800030e:	4b19      	ldr	r3, [pc, #100]	; (8000374 <compute_corridor_remaining+0x9c>)
 8000310:	781b      	ldrb	r3, [r3, #0]
 8000312:	73bb      	strb	r3, [r7, #14]
        break;
 8000314:	e014      	b.n	8000340 <compute_corridor_remaining+0x68>

      case PH_WE_YELLOW:
        we = phase_remain;          // WE finishing yellow
 8000316:	4b16      	ldr	r3, [pc, #88]	; (8000370 <compute_corridor_remaining+0x98>)
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	73fb      	strb	r3, [r7, #15]
        ns = ns_red;                // NS still red
 800031c:	4b15      	ldr	r3, [pc, #84]	; (8000374 <compute_corridor_remaining+0x9c>)
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	73bb      	strb	r3, [r7, #14]
        break;
 8000322:	e00d      	b.n	8000340 <compute_corridor_remaining+0x68>

      case PH_NS_GREEN:
        ns = phase_remain;          // NS is running green
 8000324:	4b12      	ldr	r3, [pc, #72]	; (8000370 <compute_corridor_remaining+0x98>)
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	73bb      	strb	r3, [r7, #14]
        we = ew_red;                // WE must wait full red
 800032a:	4b13      	ldr	r3, [pc, #76]	; (8000378 <compute_corridor_remaining+0xa0>)
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	73fb      	strb	r3, [r7, #15]
        break;
 8000330:	e006      	b.n	8000340 <compute_corridor_remaining+0x68>

      case PH_NS_YELLOW:
        ns = phase_remain;          // NS finishing yellow
 8000332:	4b0f      	ldr	r3, [pc, #60]	; (8000370 <compute_corridor_remaining+0x98>)
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	73bb      	strb	r3, [r7, #14]
        we = ew_red;                // WE still red
 8000338:	4b0f      	ldr	r3, [pc, #60]	; (8000378 <compute_corridor_remaining+0xa0>)
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	73fb      	strb	r3, [r7, #15]
        break;
 800033e:	bf00      	nop
    }
    if (we > 99) we = 99;
 8000340:	7bfb      	ldrb	r3, [r7, #15]
 8000342:	2b63      	cmp	r3, #99	; 0x63
 8000344:	d901      	bls.n	800034a <compute_corridor_remaining+0x72>
 8000346:	2363      	movs	r3, #99	; 0x63
 8000348:	73fb      	strb	r3, [r7, #15]
    if (ns > 99) ns = 99;
 800034a:	7bbb      	ldrb	r3, [r7, #14]
 800034c:	2b63      	cmp	r3, #99	; 0x63
 800034e:	d901      	bls.n	8000354 <compute_corridor_remaining+0x7c>
 8000350:	2363      	movs	r3, #99	; 0x63
 8000352:	73bb      	strb	r3, [r7, #14]
    *we_sec = we;
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	7bfa      	ldrb	r2, [r7, #15]
 8000358:	701a      	strb	r2, [r3, #0]
    *ns_sec = ns;
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	7bba      	ldrb	r2, [r7, #14]
 800035e:	701a      	strb	r2, [r3, #0]
}
 8000360:	bf00      	nop
 8000362:	3714      	adds	r7, #20
 8000364:	46bd      	mov	sp, r7
 8000366:	bc80      	pop	{r7}
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	20000031 	.word	0x20000031
 8000370:	20000032 	.word	0x20000032
 8000374:	20000003 	.word	0x20000003
 8000378:	20000006 	.word	0x20000006

0800037c <seg_write_digit>:


// atomic segment write that ONLY touches segment bits (GPIOB)
static inline void seg_write_digit(uint8_t val){
 800037c:	b480      	push	{r7}
 800037e:	b085      	sub	sp, #20
 8000380:	af00      	add	r7, sp, #0
 8000382:	4603      	mov	r3, r0
 8000384:	71fb      	strb	r3, [r7, #7]
  uint16_t logical = (val <= 9) ? seg_font[val] : 0;
 8000386:	79fb      	ldrb	r3, [r7, #7]
 8000388:	2b09      	cmp	r3, #9
 800038a:	d804      	bhi.n	8000396 <seg_write_digit+0x1a>
 800038c:	79fb      	ldrb	r3, [r7, #7]
 800038e:	4a09      	ldr	r2, [pc, #36]	; (80003b4 <seg_write_digit+0x38>)
 8000390:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000394:	e000      	b.n	8000398 <seg_write_digit+0x1c>
 8000396:	2300      	movs	r3, #0
 8000398:	81fb      	strh	r3, [r7, #14]
  // CA: OFF = HIGH, ON = LOW
  GPIOB->BSRR = (SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin);            // set all HIGH (OFF)
 800039a:	4b07      	ldr	r3, [pc, #28]	; (80003b8 <seg_write_digit+0x3c>)
 800039c:	f44f 427e 	mov.w	r2, #65024	; 0xfe00
 80003a0:	611a      	str	r2, [r3, #16]
  GPIOB->BSRR = ((uint32_t)logical) << 16;                                                   // selected LOW (ON)
 80003a2:	89fb      	ldrh	r3, [r7, #14]
 80003a4:	4a04      	ldr	r2, [pc, #16]	; (80003b8 <seg_write_digit+0x3c>)
 80003a6:	041b      	lsls	r3, r3, #16
 80003a8:	6113      	str	r3, [r2, #16]
}
 80003aa:	bf00      	nop
 80003ac:	3714      	adds	r7, #20
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bc80      	pop	{r7}
 80003b2:	4770      	bx	lr
 80003b4:	08002690 	.word	0x08002690
 80003b8:	40010c00 	.word	0x40010c00

080003bc <en_all_off>:



static inline void en_all_off(void){
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
  // active-LOW enables: HIGH = off
  HAL_GPIO_WritePin(GPIOB, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_SET);
 80003c0:	2201      	movs	r2, #1
 80003c2:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80003c6:	4802      	ldr	r0, [pc, #8]	; (80003d0 <en_all_off+0x14>)
 80003c8:	f001 f959 	bl	800167e <HAL_GPIO_WritePin>
}
 80003cc:	bf00      	nop
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	40010c00 	.word	0x40010c00

080003d4 <en_on>:
static inline void en_on(uint8_t i){
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b084      	sub	sp, #16
 80003d8:	af00      	add	r7, sp, #0
 80003da:	4603      	mov	r3, r0
 80003dc:	71fb      	strb	r3, [r7, #7]
  uint16_t pin = (i==0)?EN0_Pin : (i==1)?EN1_Pin : (i==2)?EN2_Pin : EN3_Pin;
 80003de:	79fb      	ldrb	r3, [r7, #7]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d00c      	beq.n	80003fe <en_on+0x2a>
 80003e4:	79fb      	ldrb	r3, [r7, #7]
 80003e6:	2b01      	cmp	r3, #1
 80003e8:	d007      	beq.n	80003fa <en_on+0x26>
 80003ea:	79fb      	ldrb	r3, [r7, #7]
 80003ec:	2b02      	cmp	r3, #2
 80003ee:	d101      	bne.n	80003f4 <en_on+0x20>
 80003f0:	2380      	movs	r3, #128	; 0x80
 80003f2:	e005      	b.n	8000400 <en_on+0x2c>
 80003f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003f8:	e002      	b.n	8000400 <en_on+0x2c>
 80003fa:	2340      	movs	r3, #64	; 0x40
 80003fc:	e000      	b.n	8000400 <en_on+0x2c>
 80003fe:	2320      	movs	r3, #32
 8000400:	81fb      	strh	r3, [r7, #14]
  HAL_GPIO_WritePin(GPIOB, pin, GPIO_PIN_RESET);
 8000402:	89fb      	ldrh	r3, [r7, #14]
 8000404:	2200      	movs	r2, #0
 8000406:	4619      	mov	r1, r3
 8000408:	4803      	ldr	r0, [pc, #12]	; (8000418 <en_on+0x44>)
 800040a:	f001 f938 	bl	800167e <HAL_GPIO_WritePin>
}
 800040e:	bf00      	nop
 8000410:	3710      	adds	r7, #16
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	40010c00 	.word	0x40010c00

0800041c <display_mode_update_250ms>:

// show 4 digits: EN0-1 = left number, EN2-3 = right number
static void display_mode_update_250ms(uint8_t mode_num, uint8_t value){
 800041c:	b580      	push	{r7, lr}
 800041e:	b084      	sub	sp, #16
 8000420:	af00      	add	r7, sp, #0
 8000422:	4603      	mov	r3, r0
 8000424:	460a      	mov	r2, r1
 8000426:	71fb      	strb	r3, [r7, #7]
 8000428:	4613      	mov	r3, r2
 800042a:	71bb      	strb	r3, [r7, #6]
  static uint8_t cur = 0;          // 0..3 -> EN0..EN3
  static uint32_t next_ms = 0;
  static uint8_t blink = 0;        // toggles every call -> 2 Hz blink
  if ((int32_t)(sys_ms - next_ms) < 0) return;
 800042c:	4b53      	ldr	r3, [pc, #332]	; (800057c <display_mode_update_250ms+0x160>)
 800042e:	681a      	ldr	r2, [r3, #0]
 8000430:	4b53      	ldr	r3, [pc, #332]	; (8000580 <display_mode_update_250ms+0x164>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	1ad3      	subs	r3, r2, r3
 8000436:	2b00      	cmp	r3, #0
 8000438:	f2c0 809b 	blt.w	8000572 <display_mode_update_250ms+0x156>
  next_ms = sys_ms + 250;
 800043c:	4b4f      	ldr	r3, [pc, #316]	; (800057c <display_mode_update_250ms+0x160>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	33fa      	adds	r3, #250	; 0xfa
 8000442:	4a4f      	ldr	r2, [pc, #316]	; (8000580 <display_mode_update_250ms+0x164>)
 8000444:	6013      	str	r3, [r2, #0]
  blink ^= 1;                      // toggle every 250 ms
 8000446:	4b4f      	ldr	r3, [pc, #316]	; (8000584 <display_mode_update_250ms+0x168>)
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	f083 0301 	eor.w	r3, r3, #1
 800044e:	b2da      	uxtb	r2, r3
 8000450:	4b4c      	ldr	r3, [pc, #304]	; (8000584 <display_mode_update_250ms+0x168>)
 8000452:	701a      	strb	r2, [r3, #0]

  // --- handle color blink (2 Hz) ---
  leds_all_off();
 8000454:	f7ff fea4 	bl	80001a0 <leds_all_off>
  if (blink) {
 8000458:	4b4a      	ldr	r3, [pc, #296]	; (8000584 <display_mode_update_250ms+0x168>)
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	2b00      	cmp	r3, #0
 800045e:	d024      	beq.n	80004aa <display_mode_update_250ms+0x8e>
    switch(mode_num){
 8000460:	79fb      	ldrb	r3, [r7, #7]
 8000462:	2b04      	cmp	r3, #4
 8000464:	d018      	beq.n	8000498 <display_mode_update_250ms+0x7c>
 8000466:	2b04      	cmp	r3, #4
 8000468:	dc20      	bgt.n	80004ac <display_mode_update_250ms+0x90>
 800046a:	2b02      	cmp	r3, #2
 800046c:	d002      	beq.n	8000474 <display_mode_update_250ms+0x58>
 800046e:	2b03      	cmp	r3, #3
 8000470:	d009      	beq.n	8000486 <display_mode_update_250ms+0x6a>
 8000472:	e01b      	b.n	80004ac <display_mode_update_250ms+0x90>
      case 2:  we_red_on(); ns_red_on(); ea_red_on(); so_red_on(); break;
 8000474:	f7ff fea0 	bl	80001b8 <we_red_on>
 8000478:	f7ff fec2 	bl	8000200 <ns_red_on>
 800047c:	f7ff fee4 	bl	8000248 <ea_red_on>
 8000480:	f7ff ff06 	bl	8000290 <so_red_on>
 8000484:	e012      	b.n	80004ac <display_mode_update_250ms+0x90>
      case 3:  we_yel_on(); ns_yel_on(); ea_yel_on(); so_yel_on(); break;
 8000486:	f7ff fea3 	bl	80001d0 <we_yel_on>
 800048a:	f7ff fec5 	bl	8000218 <ns_yel_on>
 800048e:	f7ff fee7 	bl	8000260 <ea_yel_on>
 8000492:	f7ff ff09 	bl	80002a8 <so_yel_on>
 8000496:	e009      	b.n	80004ac <display_mode_update_250ms+0x90>
      case 4:  we_grn_on(); ns_grn_on(); ea_grn_on(); so_grn_on(); break;
 8000498:	f7ff fea6 	bl	80001e8 <we_grn_on>
 800049c:	f7ff fec8 	bl	8000230 <ns_grn_on>
 80004a0:	f7ff feea 	bl	8000278 <ea_grn_on>
 80004a4:	f7ff ff0c 	bl	80002c0 <so_grn_on>
 80004a8:	e000      	b.n	80004ac <display_mode_update_250ms+0x90>
    }
  }
 80004aa:	bf00      	nop

  // --- handle 7-segment scan (also 250 ms per digit) ---
  uint8_t lt = 0, lo = 0, rt = 0, ro = 0;   // left=mode, right=value
 80004ac:	2300      	movs	r3, #0
 80004ae:	73bb      	strb	r3, [r7, #14]
 80004b0:	2300      	movs	r3, #0
 80004b2:	737b      	strb	r3, [r7, #13]
 80004b4:	2300      	movs	r3, #0
 80004b6:	733b      	strb	r3, [r7, #12]
 80004b8:	2300      	movs	r3, #0
 80004ba:	72fb      	strb	r3, [r7, #11]
  lt = 0;
 80004bc:	2300      	movs	r3, #0
 80004be:	73bb      	strb	r3, [r7, #14]
  lo = mode_num % 10;
 80004c0:	79fa      	ldrb	r2, [r7, #7]
 80004c2:	4b31      	ldr	r3, [pc, #196]	; (8000588 <display_mode_update_250ms+0x16c>)
 80004c4:	fba3 1302 	umull	r1, r3, r3, r2
 80004c8:	08d9      	lsrs	r1, r3, #3
 80004ca:	460b      	mov	r3, r1
 80004cc:	009b      	lsls	r3, r3, #2
 80004ce:	440b      	add	r3, r1
 80004d0:	005b      	lsls	r3, r3, #1
 80004d2:	1ad3      	subs	r3, r2, r3
 80004d4:	737b      	strb	r3, [r7, #13]
  rt = (value / 10) % 10;
 80004d6:	79bb      	ldrb	r3, [r7, #6]
 80004d8:	4a2b      	ldr	r2, [pc, #172]	; (8000588 <display_mode_update_250ms+0x16c>)
 80004da:	fba2 2303 	umull	r2, r3, r2, r3
 80004de:	08db      	lsrs	r3, r3, #3
 80004e0:	b2da      	uxtb	r2, r3
 80004e2:	4b29      	ldr	r3, [pc, #164]	; (8000588 <display_mode_update_250ms+0x16c>)
 80004e4:	fba3 1302 	umull	r1, r3, r3, r2
 80004e8:	08d9      	lsrs	r1, r3, #3
 80004ea:	460b      	mov	r3, r1
 80004ec:	009b      	lsls	r3, r3, #2
 80004ee:	440b      	add	r3, r1
 80004f0:	005b      	lsls	r3, r3, #1
 80004f2:	1ad3      	subs	r3, r2, r3
 80004f4:	733b      	strb	r3, [r7, #12]
  ro = value % 10;
 80004f6:	79ba      	ldrb	r2, [r7, #6]
 80004f8:	4b23      	ldr	r3, [pc, #140]	; (8000588 <display_mode_update_250ms+0x16c>)
 80004fa:	fba3 1302 	umull	r1, r3, r3, r2
 80004fe:	08d9      	lsrs	r1, r3, #3
 8000500:	460b      	mov	r3, r1
 8000502:	009b      	lsls	r3, r3, #2
 8000504:	440b      	add	r3, r1
 8000506:	005b      	lsls	r3, r3, #1
 8000508:	1ad3      	subs	r3, r2, r3
 800050a:	72fb      	strb	r3, [r7, #11]

  uint8_t val = 0;
 800050c:	2300      	movs	r3, #0
 800050e:	73fb      	strb	r3, [r7, #15]
  switch (cur){
 8000510:	4b1e      	ldr	r3, [pc, #120]	; (800058c <display_mode_update_250ms+0x170>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	2b03      	cmp	r3, #3
 8000516:	d817      	bhi.n	8000548 <display_mode_update_250ms+0x12c>
 8000518:	a201      	add	r2, pc, #4	; (adr r2, 8000520 <display_mode_update_250ms+0x104>)
 800051a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800051e:	bf00      	nop
 8000520:	08000531 	.word	0x08000531
 8000524:	08000537 	.word	0x08000537
 8000528:	0800053d 	.word	0x0800053d
 800052c:	08000543 	.word	0x08000543
    case 0: val = lt; break;       // EN0 -> mode tens ("0")
 8000530:	7bbb      	ldrb	r3, [r7, #14]
 8000532:	73fb      	strb	r3, [r7, #15]
 8000534:	e008      	b.n	8000548 <display_mode_update_250ms+0x12c>
    case 1: val = lo; break;       // EN1 -> mode ones ("2","3","4")
 8000536:	7b7b      	ldrb	r3, [r7, #13]
 8000538:	73fb      	strb	r3, [r7, #15]
 800053a:	e005      	b.n	8000548 <display_mode_update_250ms+0x12c>
    case 2: val = rt; break;       // EN2 -> value tens
 800053c:	7b3b      	ldrb	r3, [r7, #12]
 800053e:	73fb      	strb	r3, [r7, #15]
 8000540:	e002      	b.n	8000548 <display_mode_update_250ms+0x12c>
    case 3: val = ro; break;       // EN3 -> value ones
 8000542:	7afb      	ldrb	r3, [r7, #11]
 8000544:	73fb      	strb	r3, [r7, #15]
 8000546:	bf00      	nop
  }

  en_all_off();
 8000548:	f7ff ff38 	bl	80003bc <en_all_off>
  seg_write_digit(val);
 800054c:	7bfb      	ldrb	r3, [r7, #15]
 800054e:	4618      	mov	r0, r3
 8000550:	f7ff ff14 	bl	800037c <seg_write_digit>
  en_on(cur);
 8000554:	4b0d      	ldr	r3, [pc, #52]	; (800058c <display_mode_update_250ms+0x170>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	4618      	mov	r0, r3
 800055a:	f7ff ff3b 	bl	80003d4 <en_on>

  cur = (uint8_t)((cur + 1) & 0x03);
 800055e:	4b0b      	ldr	r3, [pc, #44]	; (800058c <display_mode_update_250ms+0x170>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	3301      	adds	r3, #1
 8000564:	b2db      	uxtb	r3, r3
 8000566:	f003 0303 	and.w	r3, r3, #3
 800056a:	b2da      	uxtb	r2, r3
 800056c:	4b07      	ldr	r3, [pc, #28]	; (800058c <display_mode_update_250ms+0x170>)
 800056e:	701a      	strb	r2, [r3, #0]
 8000570:	e000      	b.n	8000574 <display_mode_update_250ms+0x158>
  if ((int32_t)(sys_ms - next_ms) < 0) return;
 8000572:	bf00      	nop
}
 8000574:	3710      	adds	r7, #16
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20000070 	.word	0x20000070
 8000580:	20000038 	.word	0x20000038
 8000584:	2000003c 	.word	0x2000003c
 8000588:	cccccccd 	.word	0xcccccccd
 800058c:	2000003d 	.word	0x2000003d

08000590 <display_update_250ms>:


// Update the slow (250 ms) rotating display
// Two-digit per axis scan: EN0,EN1 = NS (tens,ones); EN2,EN3 = WE (tens,ones)
static void display_update_250ms(void){
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
  static uint8_t cur = 0;          // which EN is active
  static uint32_t next_ms = 0;
  if ((int32_t)(sys_ms - next_ms) < 0) return;
 8000596:	4b2c      	ldr	r3, [pc, #176]	; (8000648 <display_update_250ms+0xb8>)
 8000598:	681a      	ldr	r2, [r3, #0]
 800059a:	4b2c      	ldr	r3, [pc, #176]	; (800064c <display_update_250ms+0xbc>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	1ad3      	subs	r3, r2, r3
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	db4c      	blt.n	800063e <display_update_250ms+0xae>
  next_ms = sys_ms + 250;          // ¼ s per digit
 80005a4:	4b28      	ldr	r3, [pc, #160]	; (8000648 <display_update_250ms+0xb8>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	33fa      	adds	r3, #250	; 0xfa
 80005aa:	4a28      	ldr	r2, [pc, #160]	; (800064c <display_update_250ms+0xbc>)
 80005ac:	6013      	str	r3, [r2, #0]

  uint8_t we_sec, ns_sec;
  compute_corridor_remaining(&we_sec, &ns_sec);
 80005ae:	1d7a      	adds	r2, r7, #5
 80005b0:	1dbb      	adds	r3, r7, #6
 80005b2:	4611      	mov	r1, r2
 80005b4:	4618      	mov	r0, r3
 80005b6:	f7ff fe8f 	bl	80002d8 <compute_corridor_remaining>

  // pick the value for this digit
  uint8_t val = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	71fb      	strb	r3, [r7, #7]
  switch (cur){
 80005be:	4b24      	ldr	r3, [pc, #144]	; (8000650 <display_update_250ms+0xc0>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	2b03      	cmp	r3, #3
 80005c4:	d826      	bhi.n	8000614 <display_update_250ms+0x84>
 80005c6:	a201      	add	r2, pc, #4	; (adr r2, 80005cc <display_update_250ms+0x3c>)
 80005c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005cc:	080005dd 	.word	0x080005dd
 80005d0:	080005eb 	.word	0x080005eb
 80005d4:	080005f9 	.word	0x080005f9
 80005d8:	08000607 	.word	0x08000607
    case 0: val = tens(ns_sec); break;   // EN0 → NS tens
 80005dc:	797b      	ldrb	r3, [r7, #5]
 80005de:	4618      	mov	r0, r3
 80005e0:	f7ff fdb4 	bl	800014c <tens>
 80005e4:	4603      	mov	r3, r0
 80005e6:	71fb      	strb	r3, [r7, #7]
 80005e8:	e014      	b.n	8000614 <display_update_250ms+0x84>
    case 1: val = ones(ns_sec); break;   // EN1 → NS ones
 80005ea:	797b      	ldrb	r3, [r7, #5]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f7ff fdbf 	bl	8000170 <ones>
 80005f2:	4603      	mov	r3, r0
 80005f4:	71fb      	strb	r3, [r7, #7]
 80005f6:	e00d      	b.n	8000614 <display_update_250ms+0x84>
    case 2: val = tens(we_sec); break;   // EN2 → WE tens
 80005f8:	79bb      	ldrb	r3, [r7, #6]
 80005fa:	4618      	mov	r0, r3
 80005fc:	f7ff fda6 	bl	800014c <tens>
 8000600:	4603      	mov	r3, r0
 8000602:	71fb      	strb	r3, [r7, #7]
 8000604:	e006      	b.n	8000614 <display_update_250ms+0x84>
    case 3: val = ones(we_sec); break;   // EN3 → WE ones
 8000606:	79bb      	ldrb	r3, [r7, #6]
 8000608:	4618      	mov	r0, r3
 800060a:	f7ff fdb1 	bl	8000170 <ones>
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
 8000612:	bf00      	nop
  }

  // turn all digits off
  en_all_off();
 8000614:	f7ff fed2 	bl	80003bc <en_all_off>
  // show this one
  seg_write_digit(val);
 8000618:	79fb      	ldrb	r3, [r7, #7]
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff feae 	bl	800037c <seg_write_digit>
  en_on(cur);
 8000620:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <display_update_250ms+0xc0>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	4618      	mov	r0, r3
 8000626:	f7ff fed5 	bl	80003d4 <en_on>

  // next digit for next call
  cur = (uint8_t)((cur + 1) & 0x03);
 800062a:	4b09      	ldr	r3, [pc, #36]	; (8000650 <display_update_250ms+0xc0>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	3301      	adds	r3, #1
 8000630:	b2db      	uxtb	r3, r3
 8000632:	f003 0303 	and.w	r3, r3, #3
 8000636:	b2da      	uxtb	r2, r3
 8000638:	4b05      	ldr	r3, [pc, #20]	; (8000650 <display_update_250ms+0xc0>)
 800063a:	701a      	strb	r2, [r3, #0]
 800063c:	e000      	b.n	8000640 <display_update_250ms+0xb0>
  if ((int32_t)(sys_ms - next_ms) < 0) return;
 800063e:	bf00      	nop
}
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000070 	.word	0x20000070
 800064c:	20000040 	.word	0x20000040
 8000650:	20000044 	.word	0x20000044

08000654 <traffic_leds_apply>:


// Drive LEDs for the current phase
static void traffic_leds_apply(void){
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  leds_all_off();
 8000658:	f7ff fda2 	bl	80001a0 <leds_all_off>
  switch (phase){
 800065c:	4b1a      	ldr	r3, [pc, #104]	; (80006c8 <traffic_leds_apply+0x74>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b03      	cmp	r3, #3
 8000662:	d82f      	bhi.n	80006c4 <traffic_leds_apply+0x70>
 8000664:	a201      	add	r2, pc, #4	; (adr r2, 800066c <traffic_leds_apply+0x18>)
 8000666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800066a:	bf00      	nop
 800066c:	0800067d 	.word	0x0800067d
 8000670:	0800068f 	.word	0x0800068f
 8000674:	080006a1 	.word	0x080006a1
 8000678:	080006b3 	.word	0x080006b3
    case PH_WE_GREEN:
      we_grn_on(); ns_red_on(); ea_grn_on(); so_red_on();
 800067c:	f7ff fdb4 	bl	80001e8 <we_grn_on>
 8000680:	f7ff fdbe 	bl	8000200 <ns_red_on>
 8000684:	f7ff fdf8 	bl	8000278 <ea_grn_on>
 8000688:	f7ff fe02 	bl	8000290 <so_red_on>
      break;
 800068c:	e01a      	b.n	80006c4 <traffic_leds_apply+0x70>
    case PH_WE_YELLOW:
      we_yel_on(); ns_red_on(); ea_yel_on(); so_red_on();
 800068e:	f7ff fd9f 	bl	80001d0 <we_yel_on>
 8000692:	f7ff fdb5 	bl	8000200 <ns_red_on>
 8000696:	f7ff fde3 	bl	8000260 <ea_yel_on>
 800069a:	f7ff fdf9 	bl	8000290 <so_red_on>
      break;
 800069e:	e011      	b.n	80006c4 <traffic_leds_apply+0x70>
    case PH_NS_GREEN:
      we_red_on(); ns_grn_on(); ea_red_on(); so_grn_on();
 80006a0:	f7ff fd8a 	bl	80001b8 <we_red_on>
 80006a4:	f7ff fdc4 	bl	8000230 <ns_grn_on>
 80006a8:	f7ff fdce 	bl	8000248 <ea_red_on>
 80006ac:	f7ff fe08 	bl	80002c0 <so_grn_on>
      break;
 80006b0:	e008      	b.n	80006c4 <traffic_leds_apply+0x70>
    case PH_NS_YELLOW:
      we_red_on(); ns_yel_on(); ea_red_on(); so_yel_on();
 80006b2:	f7ff fd81 	bl	80001b8 <we_red_on>
 80006b6:	f7ff fdaf 	bl	8000218 <ns_yel_on>
 80006ba:	f7ff fdc5 	bl	8000248 <ea_red_on>
 80006be:	f7ff fdf3 	bl	80002a8 <so_yel_on>
      break;
 80006c2:	bf00      	nop
  }
}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000031 	.word	0x20000031

080006cc <traffic_phase_start>:

// Initialize phase timing
static void traffic_phase_start(phase_t ph){
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	71fb      	strb	r3, [r7, #7]
    phase = ph;
 80006d6:	4a19      	ldr	r2, [pc, #100]	; (800073c <traffic_phase_start+0x70>)
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	7013      	strb	r3, [r2, #0]
    switch (phase){
 80006dc:	4b17      	ldr	r3, [pc, #92]	; (800073c <traffic_phase_start+0x70>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b03      	cmp	r3, #3
 80006e2:	d81f      	bhi.n	8000724 <traffic_phase_start+0x58>
 80006e4:	a201      	add	r2, pc, #4	; (adr r2, 80006ec <traffic_phase_start+0x20>)
 80006e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ea:	bf00      	nop
 80006ec:	080006fd 	.word	0x080006fd
 80006f0:	08000707 	.word	0x08000707
 80006f4:	08000711 	.word	0x08000711
 80006f8:	0800071b 	.word	0x0800071b
      case PH_WE_GREEN:   phase_remain = ew_green;  break;
 80006fc:	4b10      	ldr	r3, [pc, #64]	; (8000740 <traffic_phase_start+0x74>)
 80006fe:	781a      	ldrb	r2, [r3, #0]
 8000700:	4b10      	ldr	r3, [pc, #64]	; (8000744 <traffic_phase_start+0x78>)
 8000702:	701a      	strb	r2, [r3, #0]
 8000704:	e00e      	b.n	8000724 <traffic_phase_start+0x58>
      case PH_WE_YELLOW:  phase_remain = ew_yellow; break;
 8000706:	4b10      	ldr	r3, [pc, #64]	; (8000748 <traffic_phase_start+0x7c>)
 8000708:	781a      	ldrb	r2, [r3, #0]
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <traffic_phase_start+0x78>)
 800070c:	701a      	strb	r2, [r3, #0]
 800070e:	e009      	b.n	8000724 <traffic_phase_start+0x58>
      case PH_NS_GREEN:   phase_remain = ns_green;  break;
 8000710:	4b0e      	ldr	r3, [pc, #56]	; (800074c <traffic_phase_start+0x80>)
 8000712:	781a      	ldrb	r2, [r3, #0]
 8000714:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <traffic_phase_start+0x78>)
 8000716:	701a      	strb	r2, [r3, #0]
 8000718:	e004      	b.n	8000724 <traffic_phase_start+0x58>
      case PH_NS_YELLOW:  phase_remain = ns_yellow; break;
 800071a:	4b0d      	ldr	r3, [pc, #52]	; (8000750 <traffic_phase_start+0x84>)
 800071c:	781a      	ldrb	r2, [r3, #0]
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <traffic_phase_start+0x78>)
 8000720:	701a      	strb	r2, [r3, #0]
 8000722:	bf00      	nop
    }
    next_1s_ms = sys_ms + 1000;
 8000724:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <traffic_phase_start+0x88>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800072c:	4a0a      	ldr	r2, [pc, #40]	; (8000758 <traffic_phase_start+0x8c>)
 800072e:	6013      	str	r3, [r2, #0]
    traffic_leds_apply();
 8000730:	f7ff ff90 	bl	8000654 <traffic_leds_apply>
}
 8000734:	bf00      	nop
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000031 	.word	0x20000031
 8000740:	20000004 	.word	0x20000004
 8000744:	20000032 	.word	0x20000032
 8000748:	20000005 	.word	0x20000005
 800074c:	20000001 	.word	0x20000001
 8000750:	20000002 	.word	0x20000002
 8000754:	20000070 	.word	0x20000070
 8000758:	20000034 	.word	0x20000034

0800075c <traffic_tick_1s>:


// Advance phases when time expires
static void traffic_tick_1s(void){
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  if ((int32_t)(sys_ms - next_1s_ms) < 0) return;
 8000760:	4b1d      	ldr	r3, [pc, #116]	; (80007d8 <traffic_tick_1s+0x7c>)
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	4b1d      	ldr	r3, [pc, #116]	; (80007dc <traffic_tick_1s+0x80>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	1ad3      	subs	r3, r2, r3
 800076a:	2b00      	cmp	r3, #0
 800076c:	db32      	blt.n	80007d4 <traffic_tick_1s+0x78>
  next_1s_ms += 1000;
 800076e:	4b1b      	ldr	r3, [pc, #108]	; (80007dc <traffic_tick_1s+0x80>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000776:	4a19      	ldr	r2, [pc, #100]	; (80007dc <traffic_tick_1s+0x80>)
 8000778:	6013      	str	r3, [r2, #0]

  if (phase_remain > 0) phase_remain--;
 800077a:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <traffic_tick_1s+0x84>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d005      	beq.n	800078e <traffic_tick_1s+0x32>
 8000782:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <traffic_tick_1s+0x84>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	3b01      	subs	r3, #1
 8000788:	b2da      	uxtb	r2, r3
 800078a:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <traffic_tick_1s+0x84>)
 800078c:	701a      	strb	r2, [r3, #0]
  if (phase_remain == 0){
 800078e:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <traffic_tick_1s+0x84>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d11f      	bne.n	80007d6 <traffic_tick_1s+0x7a>
    switch (phase){
 8000796:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <traffic_tick_1s+0x88>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	2b03      	cmp	r3, #3
 800079c:	d81b      	bhi.n	80007d6 <traffic_tick_1s+0x7a>
 800079e:	a201      	add	r2, pc, #4	; (adr r2, 80007a4 <traffic_tick_1s+0x48>)
 80007a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a4:	080007b5 	.word	0x080007b5
 80007a8:	080007bd 	.word	0x080007bd
 80007ac:	080007c5 	.word	0x080007c5
 80007b0:	080007cd 	.word	0x080007cd
      case PH_WE_GREEN:   traffic_phase_start(PH_WE_YELLOW);  break;
 80007b4:	2001      	movs	r0, #1
 80007b6:	f7ff ff89 	bl	80006cc <traffic_phase_start>
 80007ba:	e00c      	b.n	80007d6 <traffic_tick_1s+0x7a>
      case PH_WE_YELLOW:  traffic_phase_start(PH_NS_GREEN);   break;
 80007bc:	2002      	movs	r0, #2
 80007be:	f7ff ff85 	bl	80006cc <traffic_phase_start>
 80007c2:	e008      	b.n	80007d6 <traffic_tick_1s+0x7a>
      case PH_NS_GREEN:   traffic_phase_start(PH_NS_YELLOW);  break;
 80007c4:	2003      	movs	r0, #3
 80007c6:	f7ff ff81 	bl	80006cc <traffic_phase_start>
 80007ca:	e004      	b.n	80007d6 <traffic_tick_1s+0x7a>
      case PH_NS_YELLOW:  traffic_phase_start(PH_WE_GREEN);   break;
 80007cc:	2000      	movs	r0, #0
 80007ce:	f7ff ff7d 	bl	80006cc <traffic_phase_start>
 80007d2:	e000      	b.n	80007d6 <traffic_tick_1s+0x7a>
  if ((int32_t)(sys_ms - next_1s_ms) < 0) return;
 80007d4:	bf00      	nop
    }
  }
}
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000070 	.word	0x20000070
 80007dc:	20000034 	.word	0x20000034
 80007e0:	20000032 	.word	0x20000032
 80007e4:	20000031 	.word	0x20000031

080007e8 <recalc_times>:

static void recalc_times(void){
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
    // NS red = EW green + EW yellow
    ns_red = ew_green + ew_yellow;
 80007ec:	4b09      	ldr	r3, [pc, #36]	; (8000814 <recalc_times+0x2c>)
 80007ee:	781a      	ldrb	r2, [r3, #0]
 80007f0:	4b09      	ldr	r3, [pc, #36]	; (8000818 <recalc_times+0x30>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	4413      	add	r3, r2
 80007f6:	b2da      	uxtb	r2, r3
 80007f8:	4b08      	ldr	r3, [pc, #32]	; (800081c <recalc_times+0x34>)
 80007fa:	701a      	strb	r2, [r3, #0]
    // EW red = NS green + NS yellow
    ew_red = ns_green + ns_yellow;
 80007fc:	4b08      	ldr	r3, [pc, #32]	; (8000820 <recalc_times+0x38>)
 80007fe:	781a      	ldrb	r2, [r3, #0]
 8000800:	4b08      	ldr	r3, [pc, #32]	; (8000824 <recalc_times+0x3c>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	4413      	add	r3, r2
 8000806:	b2da      	uxtb	r2, r3
 8000808:	4b07      	ldr	r3, [pc, #28]	; (8000828 <recalc_times+0x40>)
 800080a:	701a      	strb	r2, [r3, #0]
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	bc80      	pop	{r7}
 8000812:	4770      	bx	lr
 8000814:	20000004 	.word	0x20000004
 8000818:	20000005 	.word	0x20000005
 800081c:	20000003 	.word	0x20000003
 8000820:	20000001 	.word	0x20000001
 8000824:	20000002 	.word	0x20000002
 8000828:	20000006 	.word	0x20000006

0800082c <fsm_mode_processing>:



// ---------- TOP-LEVEL MODE FSM ----------
void fsm_mode_processing(void){
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  // Handle BTN1 edge (mode change)
  if (button_pressed_edge(0)){  // BTN1 = index 0 in your reader
 8000830:	2000      	movs	r0, #0
 8000832:	f000 fa19 	bl	8000c68 <button_pressed_edge>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d00b      	beq.n	8000854 <fsm_mode_processing+0x28>
    mode = (mode == MODE_4) ? MODE_1 : (mode_t)(mode + 1);
 800083c:	4b74      	ldr	r3, [pc, #464]	; (8000a10 <fsm_mode_processing+0x1e4>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	2b03      	cmp	r3, #3
 8000842:	d004      	beq.n	800084e <fsm_mode_processing+0x22>
 8000844:	4b72      	ldr	r3, [pc, #456]	; (8000a10 <fsm_mode_processing+0x1e4>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	3301      	adds	r3, #1
 800084a:	b2db      	uxtb	r3, r3
 800084c:	e000      	b.n	8000850 <fsm_mode_processing+0x24>
 800084e:	2300      	movs	r3, #0
 8000850:	4a6f      	ldr	r2, [pc, #444]	; (8000a10 <fsm_mode_processing+0x1e4>)
 8000852:	7013      	strb	r3, [r2, #0]
  }

  // Mode entry actions
  if (mode != last_mode){
 8000854:	4b6e      	ldr	r3, [pc, #440]	; (8000a10 <fsm_mode_processing+0x1e4>)
 8000856:	781a      	ldrb	r2, [r3, #0]
 8000858:	4b6e      	ldr	r3, [pc, #440]	; (8000a14 <fsm_mode_processing+0x1e8>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	429a      	cmp	r2, r3
 800085e:	d035      	beq.n	80008cc <fsm_mode_processing+0xa0>
    last_mode = mode;
 8000860:	4b6b      	ldr	r3, [pc, #428]	; (8000a10 <fsm_mode_processing+0x1e4>)
 8000862:	781a      	ldrb	r2, [r3, #0]
 8000864:	4b6b      	ldr	r3, [pc, #428]	; (8000a14 <fsm_mode_processing+0x1e8>)
 8000866:	701a      	strb	r2, [r3, #0]
    if (mode == MODE_1){
 8000868:	4b69      	ldr	r3, [pc, #420]	; (8000a10 <fsm_mode_processing+0x1e4>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d103      	bne.n	8000878 <fsm_mode_processing+0x4c>
      // start traffic from WE green
      traffic_phase_start(PH_WE_GREEN);
 8000870:	2000      	movs	r0, #0
 8000872:	f7ff ff2b 	bl	80006cc <traffic_phase_start>
 8000876:	e02a      	b.n	80008ce <fsm_mode_processing+0xa2>
    } else {
        // stop traffic LEDs
        leds_all_off();
 8000878:	f7ff fc92 	bl	80001a0 <leds_all_off>
        en_all_off();
 800087c:	f7ff fd9e 	bl	80003bc <en_all_off>

        switch (mode){
 8000880:	4b63      	ldr	r3, [pc, #396]	; (8000a10 <fsm_mode_processing+0x1e4>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	2b03      	cmp	r3, #3
 8000886:	d018      	beq.n	80008ba <fsm_mode_processing+0x8e>
 8000888:	2b03      	cmp	r3, #3
 800088a:	dc20      	bgt.n	80008ce <fsm_mode_processing+0xa2>
 800088c:	2b01      	cmp	r3, #1
 800088e:	d002      	beq.n	8000896 <fsm_mode_processing+0x6a>
 8000890:	2b02      	cmp	r3, #2
 8000892:	d009      	beq.n	80008a8 <fsm_mode_processing+0x7c>
 8000894:	e01b      	b.n	80008ce <fsm_mode_processing+0xa2>
          case MODE_2:  // edit RED time
            we_red_on(); ns_red_on(); ea_red_on(); so_red_on();
 8000896:	f7ff fc8f 	bl	80001b8 <we_red_on>
 800089a:	f7ff fcb1 	bl	8000200 <ns_red_on>
 800089e:	f7ff fcd3 	bl	8000248 <ea_red_on>
 80008a2:	f7ff fcf5 	bl	8000290 <so_red_on>
            break;
 80008a6:	e012      	b.n	80008ce <fsm_mode_processing+0xa2>

          case MODE_3:  // edit YELLOW time
            we_yel_on(); ns_yel_on(); ea_yel_on(); so_yel_on();
 80008a8:	f7ff fc92 	bl	80001d0 <we_yel_on>
 80008ac:	f7ff fcb4 	bl	8000218 <ns_yel_on>
 80008b0:	f7ff fcd6 	bl	8000260 <ea_yel_on>
 80008b4:	f7ff fcf8 	bl	80002a8 <so_yel_on>
            break;
 80008b8:	e009      	b.n	80008ce <fsm_mode_processing+0xa2>

          case MODE_4:  // edit GREEN time
            we_grn_on(); ns_grn_on(); ea_grn_on(); so_grn_on();
 80008ba:	f7ff fc95 	bl	80001e8 <we_grn_on>
 80008be:	f7ff fcb7 	bl	8000230 <ns_grn_on>
 80008c2:	f7ff fcd9 	bl	8000278 <ea_grn_on>
 80008c6:	f7ff fcfb 	bl	80002c0 <so_grn_on>
            break;
 80008ca:	e000      	b.n	80008ce <fsm_mode_processing+0xa2>
        }
    }
 80008cc:	bf00      	nop
  }

  // Mode bodies
  switch (mode){
 80008ce:	4b50      	ldr	r3, [pc, #320]	; (8000a10 <fsm_mode_processing+0x1e4>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2b03      	cmp	r3, #3
 80008d4:	f200 809a 	bhi.w	8000a0c <fsm_mode_processing+0x1e0>
 80008d8:	a201      	add	r2, pc, #4	; (adr r2, 80008e0 <fsm_mode_processing+0xb4>)
 80008da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008de:	bf00      	nop
 80008e0:	080008f1 	.word	0x080008f1
 80008e4:	080008fb 	.word	0x080008fb
 80008e8:	08000961 	.word	0x08000961
 80008ec:	080009b7 	.word	0x080009b7
    case MODE_1:
      traffic_tick_1s();
 80008f0:	f7ff ff34 	bl	800075c <traffic_tick_1s>
      display_update_250ms();
 80008f4:	f7ff fe4c 	bl	8000590 <display_update_250ms>
      break;
 80008f8:	e088      	b.n	8000a0c <fsm_mode_processing+0x1e0>

    case MODE_2: // edit NS red time
      if (button_pressed_edge(1)) {                // BTN2 = increment
 80008fa:	2001      	movs	r0, #1
 80008fc:	f000 f9b4 	bl	8000c68 <button_pressed_edge>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d016      	beq.n	8000934 <fsm_mode_processing+0x108>
          if (++ns_red > 99) ns_red = 1;
 8000906:	4b44      	ldr	r3, [pc, #272]	; (8000a18 <fsm_mode_processing+0x1ec>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	3301      	adds	r3, #1
 800090c:	b2da      	uxtb	r2, r3
 800090e:	4b42      	ldr	r3, [pc, #264]	; (8000a18 <fsm_mode_processing+0x1ec>)
 8000910:	701a      	strb	r2, [r3, #0]
 8000912:	4b41      	ldr	r3, [pc, #260]	; (8000a18 <fsm_mode_processing+0x1ec>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	2b63      	cmp	r3, #99	; 0x63
 8000918:	d902      	bls.n	8000920 <fsm_mode_processing+0xf4>
 800091a:	4b3f      	ldr	r3, [pc, #252]	; (8000a18 <fsm_mode_processing+0x1ec>)
 800091c:	2201      	movs	r2, #1
 800091e:	701a      	strb	r2, [r3, #0]
          ew_green = ns_red - ew_yellow;           // adjust EW green accordingly
 8000920:	4b3d      	ldr	r3, [pc, #244]	; (8000a18 <fsm_mode_processing+0x1ec>)
 8000922:	781a      	ldrb	r2, [r3, #0]
 8000924:	4b3d      	ldr	r3, [pc, #244]	; (8000a1c <fsm_mode_processing+0x1f0>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	1ad3      	subs	r3, r2, r3
 800092a:	b2da      	uxtb	r2, r3
 800092c:	4b3c      	ldr	r3, [pc, #240]	; (8000a20 <fsm_mode_processing+0x1f4>)
 800092e:	701a      	strb	r2, [r3, #0]
          recalc_times();
 8000930:	f7ff ff5a 	bl	80007e8 <recalc_times>
      }
      if (button_pressed_edge(2)) {                // BTN3 = confirm
 8000934:	2002      	movs	r0, #2
 8000936:	f000 f997 	bl	8000c68 <button_pressed_edge>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d008      	beq.n	8000952 <fsm_mode_processing+0x126>
          recalc_times();
 8000940:	f7ff ff52 	bl	80007e8 <recalc_times>
          mode = MODE_1; last_mode = 255; break;
 8000944:	4b32      	ldr	r3, [pc, #200]	; (8000a10 <fsm_mode_processing+0x1e4>)
 8000946:	2200      	movs	r2, #0
 8000948:	701a      	strb	r2, [r3, #0]
 800094a:	4b32      	ldr	r3, [pc, #200]	; (8000a14 <fsm_mode_processing+0x1e8>)
 800094c:	22ff      	movs	r2, #255	; 0xff
 800094e:	701a      	strb	r2, [r3, #0]
 8000950:	e05c      	b.n	8000a0c <fsm_mode_processing+0x1e0>
      }
      display_mode_update_250ms(2, ns_red);
 8000952:	4b31      	ldr	r3, [pc, #196]	; (8000a18 <fsm_mode_processing+0x1ec>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	4619      	mov	r1, r3
 8000958:	2002      	movs	r0, #2
 800095a:	f7ff fd5f 	bl	800041c <display_mode_update_250ms>
      break;
 800095e:	e055      	b.n	8000a0c <fsm_mode_processing+0x1e0>

    case MODE_3: // edit NS yellow time
      if (button_pressed_edge(1)) {
 8000960:	2001      	movs	r0, #1
 8000962:	f000 f981 	bl	8000c68 <button_pressed_edge>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d00e      	beq.n	800098a <fsm_mode_processing+0x15e>
          if (++ns_yellow > 99) ns_yellow = 1;
 800096c:	4b2d      	ldr	r3, [pc, #180]	; (8000a24 <fsm_mode_processing+0x1f8>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	3301      	adds	r3, #1
 8000972:	b2da      	uxtb	r2, r3
 8000974:	4b2b      	ldr	r3, [pc, #172]	; (8000a24 <fsm_mode_processing+0x1f8>)
 8000976:	701a      	strb	r2, [r3, #0]
 8000978:	4b2a      	ldr	r3, [pc, #168]	; (8000a24 <fsm_mode_processing+0x1f8>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	2b63      	cmp	r3, #99	; 0x63
 800097e:	d902      	bls.n	8000986 <fsm_mode_processing+0x15a>
 8000980:	4b28      	ldr	r3, [pc, #160]	; (8000a24 <fsm_mode_processing+0x1f8>)
 8000982:	2201      	movs	r2, #1
 8000984:	701a      	strb	r2, [r3, #0]
          recalc_times();
 8000986:	f7ff ff2f 	bl	80007e8 <recalc_times>
      }
      if (button_pressed_edge(2)) {
 800098a:	2002      	movs	r0, #2
 800098c:	f000 f96c 	bl	8000c68 <button_pressed_edge>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d008      	beq.n	80009a8 <fsm_mode_processing+0x17c>
          recalc_times();
 8000996:	f7ff ff27 	bl	80007e8 <recalc_times>
          mode = MODE_1; last_mode = 255; break;
 800099a:	4b1d      	ldr	r3, [pc, #116]	; (8000a10 <fsm_mode_processing+0x1e4>)
 800099c:	2200      	movs	r2, #0
 800099e:	701a      	strb	r2, [r3, #0]
 80009a0:	4b1c      	ldr	r3, [pc, #112]	; (8000a14 <fsm_mode_processing+0x1e8>)
 80009a2:	22ff      	movs	r2, #255	; 0xff
 80009a4:	701a      	strb	r2, [r3, #0]
 80009a6:	e031      	b.n	8000a0c <fsm_mode_processing+0x1e0>
      }
      display_mode_update_250ms(3, ns_yellow);
 80009a8:	4b1e      	ldr	r3, [pc, #120]	; (8000a24 <fsm_mode_processing+0x1f8>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	4619      	mov	r1, r3
 80009ae:	2003      	movs	r0, #3
 80009b0:	f7ff fd34 	bl	800041c <display_mode_update_250ms>
      break;
 80009b4:	e02a      	b.n	8000a0c <fsm_mode_processing+0x1e0>

    case MODE_4: // edit NS green time
      if (button_pressed_edge(1)) {
 80009b6:	2001      	movs	r0, #1
 80009b8:	f000 f956 	bl	8000c68 <button_pressed_edge>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d00e      	beq.n	80009e0 <fsm_mode_processing+0x1b4>
          if (++ns_green > 99) ns_green = 1;
 80009c2:	4b19      	ldr	r3, [pc, #100]	; (8000a28 <fsm_mode_processing+0x1fc>)
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	3301      	adds	r3, #1
 80009c8:	b2da      	uxtb	r2, r3
 80009ca:	4b17      	ldr	r3, [pc, #92]	; (8000a28 <fsm_mode_processing+0x1fc>)
 80009cc:	701a      	strb	r2, [r3, #0]
 80009ce:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <fsm_mode_processing+0x1fc>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	2b63      	cmp	r3, #99	; 0x63
 80009d4:	d902      	bls.n	80009dc <fsm_mode_processing+0x1b0>
 80009d6:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <fsm_mode_processing+0x1fc>)
 80009d8:	2201      	movs	r2, #1
 80009da:	701a      	strb	r2, [r3, #0]
          recalc_times();
 80009dc:	f7ff ff04 	bl	80007e8 <recalc_times>
      }
      if (button_pressed_edge(2)) {
 80009e0:	2002      	movs	r0, #2
 80009e2:	f000 f941 	bl	8000c68 <button_pressed_edge>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d008      	beq.n	80009fe <fsm_mode_processing+0x1d2>
          recalc_times();
 80009ec:	f7ff fefc 	bl	80007e8 <recalc_times>
          mode = MODE_1; last_mode = 255; break;
 80009f0:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <fsm_mode_processing+0x1e4>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	701a      	strb	r2, [r3, #0]
 80009f6:	4b07      	ldr	r3, [pc, #28]	; (8000a14 <fsm_mode_processing+0x1e8>)
 80009f8:	22ff      	movs	r2, #255	; 0xff
 80009fa:	701a      	strb	r2, [r3, #0]
 80009fc:	e006      	b.n	8000a0c <fsm_mode_processing+0x1e0>
      }
      display_mode_update_250ms(4, ns_green);
 80009fe:	4b0a      	ldr	r3, [pc, #40]	; (8000a28 <fsm_mode_processing+0x1fc>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	4619      	mov	r1, r3
 8000a04:	2004      	movs	r0, #4
 8000a06:	f7ff fd09 	bl	800041c <display_mode_update_250ms>
      break;
 8000a0a:	bf00      	nop
  }

}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000030 	.word	0x20000030
 8000a14:	20000000 	.word	0x20000000
 8000a18:	20000003 	.word	0x20000003
 8000a1c:	20000005 	.word	0x20000005
 8000a20:	20000004 	.word	0x20000004
 8000a24:	20000002 	.word	0x20000002
 8000a28:	20000001 	.word	0x20000001

08000a2c <read_hw>:

// edge one-shots
static uint8_t pressed_edge_oneshot[NUM_BUTTONS];
static uint8_t released_edge_oneshot[NUM_BUTTONS];

static inline GPIO_PinState read_hw(button_id_t id){
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	71fb      	strb	r3, [r7, #7]
  switch(id){
 8000a36:	79fb      	ldrb	r3, [r7, #7]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d002      	beq.n	8000a42 <read_hw+0x16>
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d006      	beq.n	8000a4e <read_hw+0x22>
 8000a40:	e00b      	b.n	8000a5a <read_hw+0x2e>
    case BTN1: return HAL_GPIO_ReadPin(GPIOB, BTN1_Pin);
 8000a42:	2101      	movs	r1, #1
 8000a44:	4809      	ldr	r0, [pc, #36]	; (8000a6c <read_hw+0x40>)
 8000a46:	f000 fe03 	bl	8001650 <HAL_GPIO_ReadPin>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	e00a      	b.n	8000a64 <read_hw+0x38>
    case BTN2: return HAL_GPIO_ReadPin(GPIOB, BTN2_Pin);
 8000a4e:	2102      	movs	r1, #2
 8000a50:	4806      	ldr	r0, [pc, #24]	; (8000a6c <read_hw+0x40>)
 8000a52:	f000 fdfd 	bl	8001650 <HAL_GPIO_ReadPin>
 8000a56:	4603      	mov	r3, r0
 8000a58:	e004      	b.n	8000a64 <read_hw+0x38>
    default:   return HAL_GPIO_ReadPin(GPIOB, BTN3_Pin);
 8000a5a:	2104      	movs	r1, #4
 8000a5c:	4803      	ldr	r0, [pc, #12]	; (8000a6c <read_hw+0x40>)
 8000a5e:	f000 fdf7 	bl	8001650 <HAL_GPIO_ReadPin>
 8000a62:	4603      	mov	r3, r0
  }
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40010c00 	.word	0x40010c00

08000a70 <buttons_init>:

void buttons_init(void){
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
  for (int i = 0; i < NUM_BUTTONS; ++i){
 8000a76:	2300      	movs	r3, #0
 8000a78:	607b      	str	r3, [r7, #4]
 8000a7a:	e032      	b.n	8000ae2 <buttons_init+0x72>
    dbuf1[i] = dbuf2[i] = BUTTON_IS_RELEASED_LEVEL;
 8000a7c:	4a1d      	ldr	r2, [pc, #116]	; (8000af4 <buttons_init+0x84>)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4413      	add	r3, r2
 8000a82:	2201      	movs	r2, #1
 8000a84:	701a      	strb	r2, [r3, #0]
 8000a86:	4a1b      	ldr	r2, [pc, #108]	; (8000af4 <buttons_init+0x84>)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	7819      	ldrb	r1, [r3, #0]
 8000a8e:	4a1a      	ldr	r2, [pc, #104]	; (8000af8 <buttons_init+0x88>)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	4413      	add	r3, r2
 8000a94:	460a      	mov	r2, r1
 8000a96:	701a      	strb	r2, [r3, #0]
    stable_prev[i] = stable_pressed[i] = 0; // logical released
 8000a98:	4a18      	ldr	r2, [pc, #96]	; (8000afc <buttons_init+0x8c>)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	701a      	strb	r2, [r3, #0]
 8000aa2:	4a16      	ldr	r2, [pc, #88]	; (8000afc <buttons_init+0x8c>)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	7819      	ldrb	r1, [r3, #0]
 8000aaa:	4a15      	ldr	r2, [pc, #84]	; (8000b00 <buttons_init+0x90>)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	4413      	add	r3, r2
 8000ab0:	460a      	mov	r2, r1
 8000ab2:	701a      	strb	r2, [r3, #0]
    hold_cnt[i] = 0;
 8000ab4:	4a13      	ldr	r2, [pc, #76]	; (8000b04 <buttons_init+0x94>)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2100      	movs	r1, #0
 8000aba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    long_pressed[i] = 0;
 8000abe:	4a12      	ldr	r2, [pc, #72]	; (8000b08 <buttons_init+0x98>)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	701a      	strb	r2, [r3, #0]
    pressed_edge_oneshot[i] = 0;
 8000ac8:	4a10      	ldr	r2, [pc, #64]	; (8000b0c <buttons_init+0x9c>)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4413      	add	r3, r2
 8000ace:	2200      	movs	r2, #0
 8000ad0:	701a      	strb	r2, [r3, #0]
    released_edge_oneshot[i] = 0;
 8000ad2:	4a0f      	ldr	r2, [pc, #60]	; (8000b10 <buttons_init+0xa0>)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	2200      	movs	r2, #0
 8000ada:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < NUM_BUTTONS; ++i){
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2b02      	cmp	r3, #2
 8000ae6:	ddc9      	ble.n	8000a7c <buttons_init+0xc>
  }
}
 8000ae8:	bf00      	nop
 8000aea:	bf00      	nop
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr
 8000af4:	20000054 	.word	0x20000054
 8000af8:	20000050 	.word	0x20000050
 8000afc:	20000048 	.word	0x20000048
 8000b00:	2000004c 	.word	0x2000004c
 8000b04:	20000058 	.word	0x20000058
 8000b08:	20000060 	.word	0x20000060
 8000b0c:	20000064 	.word	0x20000064
 8000b10:	20000068 	.word	0x20000068

08000b14 <buttons_reading_10ms>:

void buttons_reading_10ms(void){
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
  for (int i = 0; i < NUM_BUTTONS; ++i){
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	607b      	str	r3, [r7, #4]
 8000b1e:	e089      	b.n	8000c34 <buttons_reading_10ms+0x120>
    dbuf2[i] = dbuf1[i];
 8000b20:	4a49      	ldr	r2, [pc, #292]	; (8000c48 <buttons_reading_10ms+0x134>)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4413      	add	r3, r2
 8000b26:	7819      	ldrb	r1, [r3, #0]
 8000b28:	4a48      	ldr	r2, [pc, #288]	; (8000c4c <buttons_reading_10ms+0x138>)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	460a      	mov	r2, r1
 8000b30:	701a      	strb	r2, [r3, #0]
    dbuf1[i] = read_hw((button_id_t)i);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff ff78 	bl	8000a2c <read_hw>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4a41      	ldr	r2, [pc, #260]	; (8000c48 <buttons_reading_10ms+0x134>)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4413      	add	r3, r2
 8000b46:	460a      	mov	r2, r1
 8000b48:	701a      	strb	r2, [r3, #0]

    // accept new stable level when two consecutive raw reads match
    if (dbuf1[i] == dbuf2[i]){
 8000b4a:	4a3f      	ldr	r2, [pc, #252]	; (8000c48 <buttons_reading_10ms+0x134>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4413      	add	r3, r2
 8000b50:	781a      	ldrb	r2, [r3, #0]
 8000b52:	493e      	ldr	r1, [pc, #248]	; (8000c4c <buttons_reading_10ms+0x138>)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	440b      	add	r3, r1
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	429a      	cmp	r2, r3
 8000b5c:	d167      	bne.n	8000c2e <buttons_reading_10ms+0x11a>
      // convert to logical pressed=1 / released=0
      uint8_t new_pressed = (dbuf1[i] == BUTTON_IS_PRESSED_LEVEL) ? 1u : 0u;
 8000b5e:	4a3a      	ldr	r2, [pc, #232]	; (8000c48 <buttons_reading_10ms+0x134>)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	4413      	add	r3, r2
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d101      	bne.n	8000b6e <buttons_reading_10ms+0x5a>
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e000      	b.n	8000b70 <buttons_reading_10ms+0x5c>
 8000b6e:	2300      	movs	r3, #0
 8000b70:	70fb      	strb	r3, [r7, #3]

      // edges
      if (new_pressed != stable_pressed[i]){
 8000b72:	4a37      	ldr	r2, [pc, #220]	; (8000c50 <buttons_reading_10ms+0x13c>)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	4413      	add	r3, r2
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	78fa      	ldrb	r2, [r7, #3]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	d02f      	beq.n	8000be0 <buttons_reading_10ms+0xcc>
        if (new_pressed){
 8000b80:	78fb      	ldrb	r3, [r7, #3]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d00f      	beq.n	8000ba6 <buttons_reading_10ms+0x92>
          pressed_edge_oneshot[i] = 1;
 8000b86:	4a33      	ldr	r2, [pc, #204]	; (8000c54 <buttons_reading_10ms+0x140>)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	701a      	strb	r2, [r3, #0]
          hold_cnt[i] = 0;           // start counting for long-press
 8000b90:	4a31      	ldr	r2, [pc, #196]	; (8000c58 <buttons_reading_10ms+0x144>)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2100      	movs	r1, #0
 8000b96:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
          long_pressed[i] = 0;
 8000b9a:	4a30      	ldr	r2, [pc, #192]	; (8000c5c <buttons_reading_10ms+0x148>)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	701a      	strb	r2, [r3, #0]
 8000ba4:	e00e      	b.n	8000bc4 <buttons_reading_10ms+0xb0>
        } else {
          released_edge_oneshot[i] = 1;
 8000ba6:	4a2e      	ldr	r2, [pc, #184]	; (8000c60 <buttons_reading_10ms+0x14c>)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4413      	add	r3, r2
 8000bac:	2201      	movs	r2, #1
 8000bae:	701a      	strb	r2, [r3, #0]
          hold_cnt[i] = 0;
 8000bb0:	4a29      	ldr	r2, [pc, #164]	; (8000c58 <buttons_reading_10ms+0x144>)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
          long_pressed[i] = 0;
 8000bba:	4a28      	ldr	r2, [pc, #160]	; (8000c5c <buttons_reading_10ms+0x148>)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	701a      	strb	r2, [r3, #0]
        }
        stable_prev[i] = stable_pressed[i];
 8000bc4:	4a22      	ldr	r2, [pc, #136]	; (8000c50 <buttons_reading_10ms+0x13c>)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4413      	add	r3, r2
 8000bca:	7819      	ldrb	r1, [r3, #0]
 8000bcc:	4a25      	ldr	r2, [pc, #148]	; (8000c64 <buttons_reading_10ms+0x150>)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	460a      	mov	r2, r1
 8000bd4:	701a      	strb	r2, [r3, #0]
        stable_pressed[i] = new_pressed;
 8000bd6:	4a1e      	ldr	r2, [pc, #120]	; (8000c50 <buttons_reading_10ms+0x13c>)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	4413      	add	r3, r2
 8000bdc:	78fa      	ldrb	r2, [r7, #3]
 8000bde:	701a      	strb	r2, [r3, #0]
      }

      // long-press counter (only while pressed)
      if (stable_pressed[i]){
 8000be0:	4a1b      	ldr	r2, [pc, #108]	; (8000c50 <buttons_reading_10ms+0x13c>)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4413      	add	r3, r2
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d020      	beq.n	8000c2e <buttons_reading_10ms+0x11a>
        if (hold_cnt[i] < DURATION_FOR_LONGPRESS_1S) {
 8000bec:	4a1a      	ldr	r2, [pc, #104]	; (8000c58 <buttons_reading_10ms+0x144>)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bf4:	2b63      	cmp	r3, #99	; 0x63
 8000bf6:	d815      	bhi.n	8000c24 <buttons_reading_10ms+0x110>
          hold_cnt[i]++;
 8000bf8:	4a17      	ldr	r2, [pc, #92]	; (8000c58 <buttons_reading_10ms+0x144>)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c00:	3301      	adds	r3, #1
 8000c02:	b299      	uxth	r1, r3
 8000c04:	4a14      	ldr	r2, [pc, #80]	; (8000c58 <buttons_reading_10ms+0x144>)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
          if (hold_cnt[i] >= DURATION_FOR_LONGPRESS_1S){
 8000c0c:	4a12      	ldr	r2, [pc, #72]	; (8000c58 <buttons_reading_10ms+0x144>)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c14:	2b63      	cmp	r3, #99	; 0x63
 8000c16:	d90a      	bls.n	8000c2e <buttons_reading_10ms+0x11a>
            long_pressed[i] = 1;  // latched while still held
 8000c18:	4a10      	ldr	r2, [pc, #64]	; (8000c5c <buttons_reading_10ms+0x148>)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	2201      	movs	r2, #1
 8000c20:	701a      	strb	r2, [r3, #0]
 8000c22:	e004      	b.n	8000c2e <buttons_reading_10ms+0x11a>
          }
        } else {
          long_pressed[i] = 1;
 8000c24:	4a0d      	ldr	r2, [pc, #52]	; (8000c5c <buttons_reading_10ms+0x148>)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4413      	add	r3, r2
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < NUM_BUTTONS; ++i){
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	3301      	adds	r3, #1
 8000c32:	607b      	str	r3, [r7, #4]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2b02      	cmp	r3, #2
 8000c38:	f77f af72 	ble.w	8000b20 <buttons_reading_10ms+0xc>
        }
      }
    }
  }
}
 8000c3c:	bf00      	nop
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000050 	.word	0x20000050
 8000c4c:	20000054 	.word	0x20000054
 8000c50:	20000048 	.word	0x20000048
 8000c54:	20000064 	.word	0x20000064
 8000c58:	20000058 	.word	0x20000058
 8000c5c:	20000060 	.word	0x20000060
 8000c60:	20000068 	.word	0x20000068
 8000c64:	2000004c 	.word	0x2000004c

08000c68 <button_pressed_edge>:

uint8_t button_is_long_pressed(button_id_t id){
  return (id < NUM_BUTTONS) ? long_pressed[id] : 0;
}

uint8_t button_pressed_edge(button_id_t id){
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	71fb      	strb	r3, [r7, #7]
  if (id >= NUM_BUTTONS) return 0;
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	2b02      	cmp	r3, #2
 8000c76:	d901      	bls.n	8000c7c <button_pressed_edge+0x14>
 8000c78:	2300      	movs	r3, #0
 8000c7a:	e008      	b.n	8000c8e <button_pressed_edge+0x26>
  uint8_t v = pressed_edge_oneshot[id];
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	4a06      	ldr	r2, [pc, #24]	; (8000c98 <button_pressed_edge+0x30>)
 8000c80:	5cd3      	ldrb	r3, [r2, r3]
 8000c82:	73fb      	strb	r3, [r7, #15]
  pressed_edge_oneshot[id] = 0;
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	4a04      	ldr	r2, [pc, #16]	; (8000c98 <button_pressed_edge+0x30>)
 8000c88:	2100      	movs	r1, #0
 8000c8a:	54d1      	strb	r1, [r2, r3]
  return v;
 8000c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3714      	adds	r7, #20
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bc80      	pop	{r7}
 8000c96:	4770      	bx	lr
 8000c98:	20000064 	.word	0x20000064

08000c9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ca0:	f000 f9ec 	bl	800107c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ca4:	f000 f81c 	bl	8000ce0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ca8:	f000 f8a2 	bl	8000df0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000cac:	f000 f854 	bl	8000d58 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // Segments HIGH = OFF (common–anode)
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin|
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	f44f 417e 	mov.w	r1, #65024	; 0xfe00
 8000cb6:	4808      	ldr	r0, [pc, #32]	; (8000cd8 <main+0x3c>)
 8000cb8:	f000 fce1 	bl	800167e <HAL_GPIO_WritePin>
                           SEG4_Pin|SEG5_Pin|SEG6_Pin, GPIO_PIN_SET);
  // Digit enables HIGH = OFF (active-LOW)
  HAL_GPIO_WritePin(GPIOB, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_SET);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8000cc2:	4805      	ldr	r0, [pc, #20]	; (8000cd8 <main+0x3c>)
 8000cc4:	f000 fcdb 	bl	800167e <HAL_GPIO_WritePin>

  buttons_init();
 8000cc8:	f7ff fed2 	bl	8000a70 <buttons_init>
  HAL_TIM_Base_Start_IT(&htim2);
 8000ccc:	4803      	ldr	r0, [pc, #12]	; (8000cdc <main+0x40>)
 8000cce:	f001 f91b 	bl	8001f08 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  fsm_mode_processing();
 8000cd2:	f7ff fdab 	bl	800082c <fsm_mode_processing>
 8000cd6:	e7fc      	b.n	8000cd2 <main+0x36>
 8000cd8:	40010c00 	.word	0x40010c00
 8000cdc:	20000074 	.word	0x20000074

08000ce0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b090      	sub	sp, #64	; 0x40
 8000ce4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ce6:	f107 0318 	add.w	r3, r7, #24
 8000cea:	2228      	movs	r2, #40	; 0x28
 8000cec:	2100      	movs	r1, #0
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f001 fcba 	bl	8002668 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
 8000cfc:	609a      	str	r2, [r3, #8]
 8000cfe:	60da      	str	r2, [r3, #12]
 8000d00:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d02:	2302      	movs	r3, #2
 8000d04:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d06:	2301      	movs	r3, #1
 8000d08:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d0a:	2310      	movs	r3, #16
 8000d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d12:	f107 0318 	add.w	r3, r7, #24
 8000d16:	4618      	mov	r0, r3
 8000d18:	f000 fcca 	bl	80016b0 <HAL_RCC_OscConfig>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000d22:	f000 f8f1 	bl	8000f08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d26:	230f      	movs	r3, #15
 8000d28:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d32:	2300      	movs	r3, #0
 8000d34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d36:	2300      	movs	r3, #0
 8000d38:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d3a:	1d3b      	adds	r3, r7, #4
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f000 ff36 	bl	8001bb0 <HAL_RCC_ClockConfig>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000d4a:	f000 f8dd 	bl	8000f08 <Error_Handler>
  }
}
 8000d4e:	bf00      	nop
 8000d50:	3740      	adds	r7, #64	; 0x40
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
	...

08000d58 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d5e:	f107 0308 	add.w	r3, r7, #8
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	605a      	str	r2, [r3, #4]
 8000d68:	609a      	str	r2, [r3, #8]
 8000d6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d6c:	463b      	mov	r3, r7
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d74:	4b1d      	ldr	r3, [pc, #116]	; (8000dec <MX_TIM2_Init+0x94>)
 8000d76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d7a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000d7c:	4b1b      	ldr	r3, [pc, #108]	; (8000dec <MX_TIM2_Init+0x94>)
 8000d7e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000d82:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d84:	4b19      	ldr	r3, [pc, #100]	; (8000dec <MX_TIM2_Init+0x94>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8000d8a:	4b18      	ldr	r3, [pc, #96]	; (8000dec <MX_TIM2_Init+0x94>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d90:	4b16      	ldr	r3, [pc, #88]	; (8000dec <MX_TIM2_Init+0x94>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d96:	4b15      	ldr	r3, [pc, #84]	; (8000dec <MX_TIM2_Init+0x94>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d9c:	4813      	ldr	r0, [pc, #76]	; (8000dec <MX_TIM2_Init+0x94>)
 8000d9e:	f001 f863 	bl	8001e68 <HAL_TIM_Base_Init>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000da8:	f000 f8ae 	bl	8000f08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000db0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000db2:	f107 0308 	add.w	r3, r7, #8
 8000db6:	4619      	mov	r1, r3
 8000db8:	480c      	ldr	r0, [pc, #48]	; (8000dec <MX_TIM2_Init+0x94>)
 8000dba:	f001 f9e1 	bl	8002180 <HAL_TIM_ConfigClockSource>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000dc4:	f000 f8a0 	bl	8000f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dd0:	463b      	mov	r3, r7
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4805      	ldr	r0, [pc, #20]	; (8000dec <MX_TIM2_Init+0x94>)
 8000dd6:	f001 fbb9 	bl	800254c <HAL_TIMEx_MasterConfigSynchronization>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000de0:	f000 f892 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000de4:	bf00      	nop
 8000de6:	3718      	adds	r7, #24
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20000074 	.word	0x20000074

08000df0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df6:	f107 0308 	add.w	r3, r7, #8
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]
 8000e00:	609a      	str	r2, [r3, #8]
 8000e02:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e04:	4b28      	ldr	r3, [pc, #160]	; (8000ea8 <MX_GPIO_Init+0xb8>)
 8000e06:	699b      	ldr	r3, [r3, #24]
 8000e08:	4a27      	ldr	r2, [pc, #156]	; (8000ea8 <MX_GPIO_Init+0xb8>)
 8000e0a:	f043 0304 	orr.w	r3, r3, #4
 8000e0e:	6193      	str	r3, [r2, #24]
 8000e10:	4b25      	ldr	r3, [pc, #148]	; (8000ea8 <MX_GPIO_Init+0xb8>)
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	f003 0304 	and.w	r3, r3, #4
 8000e18:	607b      	str	r3, [r7, #4]
 8000e1a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1c:	4b22      	ldr	r3, [pc, #136]	; (8000ea8 <MX_GPIO_Init+0xb8>)
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	4a21      	ldr	r2, [pc, #132]	; (8000ea8 <MX_GPIO_Init+0xb8>)
 8000e22:	f043 0308 	orr.w	r3, r3, #8
 8000e26:	6193      	str	r3, [r2, #24]
 8000e28:	4b1f      	ldr	r3, [pc, #124]	; (8000ea8 <MX_GPIO_Init+0xb8>)
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	f003 0308 	and.w	r3, r3, #8
 8000e30:	603b      	str	r3, [r7, #0]
 8000e32:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, R1_W_Pin|R2_N_Pin|R3_E_Pin|R4_S_Pin
 8000e34:	2200      	movs	r2, #0
 8000e36:	f640 71ff 	movw	r1, #4095	; 0xfff
 8000e3a:	481c      	ldr	r0, [pc, #112]	; (8000eac <MX_GPIO_Init+0xbc>)
 8000e3c:	f000 fc1f 	bl	800167e <HAL_GPIO_WritePin>
                          |Y1_W_Pin|Y2_N_Pin|Y3_E_Pin|Y4_S_Pin
                          |G1_W_Pin|G2_N_Pin|G3_E_Pin|G4_S_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG1_Pin|SEG2_Pin|SEG3_Pin|SEG4_Pin
 8000e40:	2200      	movs	r2, #0
 8000e42:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 8000e46:	481a      	ldr	r0, [pc, #104]	; (8000eb0 <MX_GPIO_Init+0xc0>)
 8000e48:	f000 fc19 	bl	800167e <HAL_GPIO_WritePin>
                          |EN2_Pin|EN3_Pin|SEG0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : R1_W_Pin R2_N_Pin R3_E_Pin R4_S_Pin
                           Y1_W_Pin Y2_N_Pin Y3_E_Pin Y4_S_Pin
                           G1_W_Pin G2_N_Pin G3_E_Pin G4_S_Pin */
  GPIO_InitStruct.Pin = R1_W_Pin|R2_N_Pin|R3_E_Pin|R4_S_Pin
 8000e4c:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000e50:	60bb      	str	r3, [r7, #8]
                          |Y1_W_Pin|Y2_N_Pin|Y3_E_Pin|Y4_S_Pin
                          |G1_W_Pin|G2_N_Pin|G3_E_Pin|G4_S_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e52:	2301      	movs	r3, #1
 8000e54:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5e:	f107 0308 	add.w	r3, r7, #8
 8000e62:	4619      	mov	r1, r3
 8000e64:	4811      	ldr	r0, [pc, #68]	; (8000eac <MX_GPIO_Init+0xbc>)
 8000e66:	f000 fa79 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin BTN3_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin|BTN3_Pin;
 8000e6a:	2307      	movs	r3, #7
 8000e6c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e72:	2301      	movs	r3, #1
 8000e74:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e76:	f107 0308 	add.w	r3, r7, #8
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	480c      	ldr	r0, [pc, #48]	; (8000eb0 <MX_GPIO_Init+0xc0>)
 8000e7e:	f000 fa6d 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG1_Pin SEG2_Pin SEG3_Pin SEG4_Pin
                           SEG5_Pin SEG6_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin SEG0_Pin */
  GPIO_InitStruct.Pin = SEG1_Pin|SEG2_Pin|SEG3_Pin|SEG4_Pin
 8000e82:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000e86:	60bb      	str	r3, [r7, #8]
                          |SEG5_Pin|SEG6_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin|SEG0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e90:	2302      	movs	r3, #2
 8000e92:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e94:	f107 0308 	add.w	r3, r7, #8
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <MX_GPIO_Init+0xc0>)
 8000e9c:	f000 fa5e 	bl	800135c <HAL_GPIO_Init>

}
 8000ea0:	bf00      	nop
 8000ea2:	3718      	adds	r7, #24
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	40010800 	.word	0x40010800
 8000eb0:	40010c00 	.word	0x40010c00

08000eb4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2){
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ec4:	d117      	bne.n	8000ef6 <HAL_TIM_PeriodElapsedCallback+0x42>
    sys_ms += TICK_MS;           // TICK_MS will be 2 in soft_timers.h
 8000ec6:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	3302      	adds	r3, #2
 8000ecc:	4a0c      	ldr	r2, [pc, #48]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000ece:	6013      	str	r3, [r2, #0]

    static uint16_t acc = 0;
    acc += TICK_MS;
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000ed2:	881b      	ldrh	r3, [r3, #0]
 8000ed4:	3302      	adds	r3, #2
 8000ed6:	b29a      	uxth	r2, r3
 8000ed8:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000eda:	801a      	strh	r2, [r3, #0]
    while (acc >= 10){
 8000edc:	e007      	b.n	8000eee <HAL_TIM_PeriodElapsedCallback+0x3a>
      acc -= 10;
 8000ede:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000ee0:	881b      	ldrh	r3, [r3, #0]
 8000ee2:	3b0a      	subs	r3, #10
 8000ee4:	b29a      	uxth	r2, r3
 8000ee6:	4b07      	ldr	r3, [pc, #28]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000ee8:	801a      	strh	r2, [r3, #0]
      buttons_reading_10ms();    // debouncer every 10 ms
 8000eea:	f7ff fe13 	bl	8000b14 <buttons_reading_10ms>
    while (acc >= 10){
 8000eee:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000ef0:	881b      	ldrh	r3, [r3, #0]
 8000ef2:	2b09      	cmp	r3, #9
 8000ef4:	d8f3      	bhi.n	8000ede <HAL_TIM_PeriodElapsedCallback+0x2a>
    }
  }
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000070 	.word	0x20000070
 8000f04:	2000006c 	.word	0x2000006c

08000f08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f0c:	b672      	cpsid	i
}
 8000f0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <Error_Handler+0x8>
	...

08000f14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f1a:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <HAL_MspInit+0x5c>)
 8000f1c:	699b      	ldr	r3, [r3, #24]
 8000f1e:	4a14      	ldr	r2, [pc, #80]	; (8000f70 <HAL_MspInit+0x5c>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	6193      	str	r3, [r2, #24]
 8000f26:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <HAL_MspInit+0x5c>)
 8000f28:	699b      	ldr	r3, [r3, #24]
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	60bb      	str	r3, [r7, #8]
 8000f30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f32:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <HAL_MspInit+0x5c>)
 8000f34:	69db      	ldr	r3, [r3, #28]
 8000f36:	4a0e      	ldr	r2, [pc, #56]	; (8000f70 <HAL_MspInit+0x5c>)
 8000f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f3c:	61d3      	str	r3, [r2, #28]
 8000f3e:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <HAL_MspInit+0x5c>)
 8000f40:	69db      	ldr	r3, [r3, #28]
 8000f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000f4a:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <HAL_MspInit+0x60>)
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <HAL_MspInit+0x60>)
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f66:	bf00      	nop
 8000f68:	3714      	adds	r7, #20
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr
 8000f70:	40021000 	.word	0x40021000
 8000f74:	40010000 	.word	0x40010000

08000f78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f88:	d113      	bne.n	8000fb2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f8a:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <HAL_TIM_Base_MspInit+0x44>)
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	4a0b      	ldr	r2, [pc, #44]	; (8000fbc <HAL_TIM_Base_MspInit+0x44>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	61d3      	str	r3, [r2, #28]
 8000f96:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <HAL_TIM_Base_MspInit+0x44>)
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	201c      	movs	r0, #28
 8000fa8:	f000 f9a1 	bl	80012ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fac:	201c      	movs	r0, #28
 8000fae:	f000 f9ba 	bl	8001326 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000fb2:	bf00      	nop
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40021000 	.word	0x40021000

08000fc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fc4:	e7fe      	b.n	8000fc4 <NMI_Handler+0x4>

08000fc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fca:	e7fe      	b.n	8000fca <HardFault_Handler+0x4>

08000fcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <MemManage_Handler+0x4>

08000fd2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fd6:	e7fe      	b.n	8000fd6 <BusFault_Handler+0x4>

08000fd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <UsageFault_Handler+0x4>

08000fde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bc80      	pop	{r7}
 8000fe8:	4770      	bx	lr

08000fea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bc80      	pop	{r7}
 8000ff4:	4770      	bx	lr

08000ff6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bc80      	pop	{r7}
 8001000:	4770      	bx	lr

08001002 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001006:	f000 f87f 	bl	8001108 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001014:	4802      	ldr	r0, [pc, #8]	; (8001020 <TIM2_IRQHandler+0x10>)
 8001016:	f000 ffc3 	bl	8001fa0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000074 	.word	0x20000074

08001024 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr

08001030 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001030:	f7ff fff8 	bl	8001024 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001034:	480b      	ldr	r0, [pc, #44]	; (8001064 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001036:	490c      	ldr	r1, [pc, #48]	; (8001068 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001038:	4a0c      	ldr	r2, [pc, #48]	; (800106c <LoopFillZerobss+0x16>)
  movs r3, #0
 800103a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800103c:	e002      	b.n	8001044 <LoopCopyDataInit>

0800103e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800103e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001040:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001042:	3304      	adds	r3, #4

08001044 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001044:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001046:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001048:	d3f9      	bcc.n	800103e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800104a:	4a09      	ldr	r2, [pc, #36]	; (8001070 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800104c:	4c09      	ldr	r4, [pc, #36]	; (8001074 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800104e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001050:	e001      	b.n	8001056 <LoopFillZerobss>

08001052 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001052:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001054:	3204      	adds	r2, #4

08001056 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001056:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001058:	d3fb      	bcc.n	8001052 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800105a:	f001 fae1 	bl	8002620 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800105e:	f7ff fe1d 	bl	8000c9c <main>
  bx lr
 8001062:	4770      	bx	lr
  ldr r0, =_sdata
 8001064:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001068:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800106c:	080026d0 	.word	0x080026d0
  ldr r2, =_sbss
 8001070:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001074:	200000c0 	.word	0x200000c0

08001078 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001078:	e7fe      	b.n	8001078 <ADC1_2_IRQHandler>
	...

0800107c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001080:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <HAL_Init+0x28>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a07      	ldr	r2, [pc, #28]	; (80010a4 <HAL_Init+0x28>)
 8001086:	f043 0310 	orr.w	r3, r3, #16
 800108a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800108c:	2003      	movs	r0, #3
 800108e:	f000 f923 	bl	80012d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001092:	200f      	movs	r0, #15
 8001094:	f000 f808 	bl	80010a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001098:	f7ff ff3c 	bl	8000f14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40022000 	.word	0x40022000

080010a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010b0:	4b12      	ldr	r3, [pc, #72]	; (80010fc <HAL_InitTick+0x54>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4b12      	ldr	r3, [pc, #72]	; (8001100 <HAL_InitTick+0x58>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	4619      	mov	r1, r3
 80010ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010be:	fbb3 f3f1 	udiv	r3, r3, r1
 80010c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 f93b 	bl	8001342 <HAL_SYSTICK_Config>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e00e      	b.n	80010f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2b0f      	cmp	r3, #15
 80010da:	d80a      	bhi.n	80010f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010dc:	2200      	movs	r2, #0
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	f04f 30ff 	mov.w	r0, #4294967295
 80010e4:	f000 f903 	bl	80012ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010e8:	4a06      	ldr	r2, [pc, #24]	; (8001104 <HAL_InitTick+0x5c>)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ee:	2300      	movs	r3, #0
 80010f0:	e000      	b.n	80010f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000008 	.word	0x20000008
 8001100:	20000010 	.word	0x20000010
 8001104:	2000000c 	.word	0x2000000c

08001108 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800110c:	4b05      	ldr	r3, [pc, #20]	; (8001124 <HAL_IncTick+0x1c>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	461a      	mov	r2, r3
 8001112:	4b05      	ldr	r3, [pc, #20]	; (8001128 <HAL_IncTick+0x20>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4413      	add	r3, r2
 8001118:	4a03      	ldr	r2, [pc, #12]	; (8001128 <HAL_IncTick+0x20>)
 800111a:	6013      	str	r3, [r2, #0]
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	bc80      	pop	{r7}
 8001122:	4770      	bx	lr
 8001124:	20000010 	.word	0x20000010
 8001128:	200000bc 	.word	0x200000bc

0800112c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  return uwTick;
 8001130:	4b02      	ldr	r3, [pc, #8]	; (800113c <HAL_GetTick+0x10>)
 8001132:	681b      	ldr	r3, [r3, #0]
}
 8001134:	4618      	mov	r0, r3
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr
 800113c:	200000bc 	.word	0x200000bc

08001140 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <__NVIC_SetPriorityGrouping+0x44>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001156:	68ba      	ldr	r2, [r7, #8]
 8001158:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800115c:	4013      	ands	r3, r2
 800115e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001168:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800116c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001170:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001172:	4a04      	ldr	r2, [pc, #16]	; (8001184 <__NVIC_SetPriorityGrouping+0x44>)
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	60d3      	str	r3, [r2, #12]
}
 8001178:	bf00      	nop
 800117a:	3714      	adds	r7, #20
 800117c:	46bd      	mov	sp, r7
 800117e:	bc80      	pop	{r7}
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800118c:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <__NVIC_GetPriorityGrouping+0x18>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	0a1b      	lsrs	r3, r3, #8
 8001192:	f003 0307 	and.w	r3, r3, #7
}
 8001196:	4618      	mov	r0, r3
 8001198:	46bd      	mov	sp, r7
 800119a:	bc80      	pop	{r7}
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	db0b      	blt.n	80011ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	f003 021f 	and.w	r2, r3, #31
 80011bc:	4906      	ldr	r1, [pc, #24]	; (80011d8 <__NVIC_EnableIRQ+0x34>)
 80011be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c2:	095b      	lsrs	r3, r3, #5
 80011c4:	2001      	movs	r0, #1
 80011c6:	fa00 f202 	lsl.w	r2, r0, r2
 80011ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr
 80011d8:	e000e100 	.word	0xe000e100

080011dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	6039      	str	r1, [r7, #0]
 80011e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	db0a      	blt.n	8001206 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	490c      	ldr	r1, [pc, #48]	; (8001228 <__NVIC_SetPriority+0x4c>)
 80011f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fa:	0112      	lsls	r2, r2, #4
 80011fc:	b2d2      	uxtb	r2, r2
 80011fe:	440b      	add	r3, r1
 8001200:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001204:	e00a      	b.n	800121c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	b2da      	uxtb	r2, r3
 800120a:	4908      	ldr	r1, [pc, #32]	; (800122c <__NVIC_SetPriority+0x50>)
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	f003 030f 	and.w	r3, r3, #15
 8001212:	3b04      	subs	r3, #4
 8001214:	0112      	lsls	r2, r2, #4
 8001216:	b2d2      	uxtb	r2, r2
 8001218:	440b      	add	r3, r1
 800121a:	761a      	strb	r2, [r3, #24]
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	bc80      	pop	{r7}
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	e000e100 	.word	0xe000e100
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001230:	b480      	push	{r7}
 8001232:	b089      	sub	sp, #36	; 0x24
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	f1c3 0307 	rsb	r3, r3, #7
 800124a:	2b04      	cmp	r3, #4
 800124c:	bf28      	it	cs
 800124e:	2304      	movcs	r3, #4
 8001250:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3304      	adds	r3, #4
 8001256:	2b06      	cmp	r3, #6
 8001258:	d902      	bls.n	8001260 <NVIC_EncodePriority+0x30>
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3b03      	subs	r3, #3
 800125e:	e000      	b.n	8001262 <NVIC_EncodePriority+0x32>
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001264:	f04f 32ff 	mov.w	r2, #4294967295
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43da      	mvns	r2, r3
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	401a      	ands	r2, r3
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001278:	f04f 31ff 	mov.w	r1, #4294967295
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	fa01 f303 	lsl.w	r3, r1, r3
 8001282:	43d9      	mvns	r1, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001288:	4313      	orrs	r3, r2
         );
}
 800128a:	4618      	mov	r0, r3
 800128c:	3724      	adds	r7, #36	; 0x24
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr

08001294 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3b01      	subs	r3, #1
 80012a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012a4:	d301      	bcc.n	80012aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012a6:	2301      	movs	r3, #1
 80012a8:	e00f      	b.n	80012ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012aa:	4a0a      	ldr	r2, [pc, #40]	; (80012d4 <SysTick_Config+0x40>)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012b2:	210f      	movs	r1, #15
 80012b4:	f04f 30ff 	mov.w	r0, #4294967295
 80012b8:	f7ff ff90 	bl	80011dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012bc:	4b05      	ldr	r3, [pc, #20]	; (80012d4 <SysTick_Config+0x40>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012c2:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <SysTick_Config+0x40>)
 80012c4:	2207      	movs	r2, #7
 80012c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	e000e010 	.word	0xe000e010

080012d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff ff2d 	bl	8001140 <__NVIC_SetPriorityGrouping>
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b086      	sub	sp, #24
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	4603      	mov	r3, r0
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	607a      	str	r2, [r7, #4]
 80012fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001300:	f7ff ff42 	bl	8001188 <__NVIC_GetPriorityGrouping>
 8001304:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	68b9      	ldr	r1, [r7, #8]
 800130a:	6978      	ldr	r0, [r7, #20]
 800130c:	f7ff ff90 	bl	8001230 <NVIC_EncodePriority>
 8001310:	4602      	mov	r2, r0
 8001312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001316:	4611      	mov	r1, r2
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ff5f 	bl	80011dc <__NVIC_SetPriority>
}
 800131e:	bf00      	nop
 8001320:	3718      	adds	r7, #24
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
 800132c:	4603      	mov	r3, r0
 800132e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff ff35 	bl	80011a4 <__NVIC_EnableIRQ>
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff ffa2 	bl	8001294 <SysTick_Config>
 8001350:	4603      	mov	r3, r0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
	...

0800135c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800135c:	b480      	push	{r7}
 800135e:	b08b      	sub	sp, #44	; 0x2c
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001366:	2300      	movs	r3, #0
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800136a:	2300      	movs	r3, #0
 800136c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800136e:	e148      	b.n	8001602 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001370:	2201      	movs	r2, #1
 8001372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	69fa      	ldr	r2, [r7, #28]
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	429a      	cmp	r2, r3
 800138a:	f040 8137 	bne.w	80015fc <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	4aa3      	ldr	r2, [pc, #652]	; (8001620 <HAL_GPIO_Init+0x2c4>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d05e      	beq.n	8001456 <HAL_GPIO_Init+0xfa>
 8001398:	4aa1      	ldr	r2, [pc, #644]	; (8001620 <HAL_GPIO_Init+0x2c4>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d875      	bhi.n	800148a <HAL_GPIO_Init+0x12e>
 800139e:	4aa1      	ldr	r2, [pc, #644]	; (8001624 <HAL_GPIO_Init+0x2c8>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d058      	beq.n	8001456 <HAL_GPIO_Init+0xfa>
 80013a4:	4a9f      	ldr	r2, [pc, #636]	; (8001624 <HAL_GPIO_Init+0x2c8>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d86f      	bhi.n	800148a <HAL_GPIO_Init+0x12e>
 80013aa:	4a9f      	ldr	r2, [pc, #636]	; (8001628 <HAL_GPIO_Init+0x2cc>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d052      	beq.n	8001456 <HAL_GPIO_Init+0xfa>
 80013b0:	4a9d      	ldr	r2, [pc, #628]	; (8001628 <HAL_GPIO_Init+0x2cc>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d869      	bhi.n	800148a <HAL_GPIO_Init+0x12e>
 80013b6:	4a9d      	ldr	r2, [pc, #628]	; (800162c <HAL_GPIO_Init+0x2d0>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d04c      	beq.n	8001456 <HAL_GPIO_Init+0xfa>
 80013bc:	4a9b      	ldr	r2, [pc, #620]	; (800162c <HAL_GPIO_Init+0x2d0>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d863      	bhi.n	800148a <HAL_GPIO_Init+0x12e>
 80013c2:	4a9b      	ldr	r2, [pc, #620]	; (8001630 <HAL_GPIO_Init+0x2d4>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d046      	beq.n	8001456 <HAL_GPIO_Init+0xfa>
 80013c8:	4a99      	ldr	r2, [pc, #612]	; (8001630 <HAL_GPIO_Init+0x2d4>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d85d      	bhi.n	800148a <HAL_GPIO_Init+0x12e>
 80013ce:	2b12      	cmp	r3, #18
 80013d0:	d82a      	bhi.n	8001428 <HAL_GPIO_Init+0xcc>
 80013d2:	2b12      	cmp	r3, #18
 80013d4:	d859      	bhi.n	800148a <HAL_GPIO_Init+0x12e>
 80013d6:	a201      	add	r2, pc, #4	; (adr r2, 80013dc <HAL_GPIO_Init+0x80>)
 80013d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013dc:	08001457 	.word	0x08001457
 80013e0:	08001431 	.word	0x08001431
 80013e4:	08001443 	.word	0x08001443
 80013e8:	08001485 	.word	0x08001485
 80013ec:	0800148b 	.word	0x0800148b
 80013f0:	0800148b 	.word	0x0800148b
 80013f4:	0800148b 	.word	0x0800148b
 80013f8:	0800148b 	.word	0x0800148b
 80013fc:	0800148b 	.word	0x0800148b
 8001400:	0800148b 	.word	0x0800148b
 8001404:	0800148b 	.word	0x0800148b
 8001408:	0800148b 	.word	0x0800148b
 800140c:	0800148b 	.word	0x0800148b
 8001410:	0800148b 	.word	0x0800148b
 8001414:	0800148b 	.word	0x0800148b
 8001418:	0800148b 	.word	0x0800148b
 800141c:	0800148b 	.word	0x0800148b
 8001420:	08001439 	.word	0x08001439
 8001424:	0800144d 	.word	0x0800144d
 8001428:	4a82      	ldr	r2, [pc, #520]	; (8001634 <HAL_GPIO_Init+0x2d8>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d013      	beq.n	8001456 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800142e:	e02c      	b.n	800148a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	623b      	str	r3, [r7, #32]
          break;
 8001436:	e029      	b.n	800148c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	3304      	adds	r3, #4
 800143e:	623b      	str	r3, [r7, #32]
          break;
 8001440:	e024      	b.n	800148c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	3308      	adds	r3, #8
 8001448:	623b      	str	r3, [r7, #32]
          break;
 800144a:	e01f      	b.n	800148c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	330c      	adds	r3, #12
 8001452:	623b      	str	r3, [r7, #32]
          break;
 8001454:	e01a      	b.n	800148c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d102      	bne.n	8001464 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800145e:	2304      	movs	r3, #4
 8001460:	623b      	str	r3, [r7, #32]
          break;
 8001462:	e013      	b.n	800148c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d105      	bne.n	8001478 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800146c:	2308      	movs	r3, #8
 800146e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	69fa      	ldr	r2, [r7, #28]
 8001474:	611a      	str	r2, [r3, #16]
          break;
 8001476:	e009      	b.n	800148c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001478:	2308      	movs	r3, #8
 800147a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	69fa      	ldr	r2, [r7, #28]
 8001480:	615a      	str	r2, [r3, #20]
          break;
 8001482:	e003      	b.n	800148c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001484:	2300      	movs	r3, #0
 8001486:	623b      	str	r3, [r7, #32]
          break;
 8001488:	e000      	b.n	800148c <HAL_GPIO_Init+0x130>
          break;
 800148a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	2bff      	cmp	r3, #255	; 0xff
 8001490:	d801      	bhi.n	8001496 <HAL_GPIO_Init+0x13a>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	e001      	b.n	800149a <HAL_GPIO_Init+0x13e>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	3304      	adds	r3, #4
 800149a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	2bff      	cmp	r3, #255	; 0xff
 80014a0:	d802      	bhi.n	80014a8 <HAL_GPIO_Init+0x14c>
 80014a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	e002      	b.n	80014ae <HAL_GPIO_Init+0x152>
 80014a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014aa:	3b08      	subs	r3, #8
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	210f      	movs	r1, #15
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	fa01 f303 	lsl.w	r3, r1, r3
 80014bc:	43db      	mvns	r3, r3
 80014be:	401a      	ands	r2, r3
 80014c0:	6a39      	ldr	r1, [r7, #32]
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	fa01 f303 	lsl.w	r3, r1, r3
 80014c8:	431a      	orrs	r2, r3
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f000 8090 	beq.w	80015fc <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014dc:	4b56      	ldr	r3, [pc, #344]	; (8001638 <HAL_GPIO_Init+0x2dc>)
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	4a55      	ldr	r2, [pc, #340]	; (8001638 <HAL_GPIO_Init+0x2dc>)
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	6193      	str	r3, [r2, #24]
 80014e8:	4b53      	ldr	r3, [pc, #332]	; (8001638 <HAL_GPIO_Init+0x2dc>)
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014f4:	4a51      	ldr	r2, [pc, #324]	; (800163c <HAL_GPIO_Init+0x2e0>)
 80014f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f8:	089b      	lsrs	r3, r3, #2
 80014fa:	3302      	adds	r3, #2
 80014fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001500:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001504:	f003 0303 	and.w	r3, r3, #3
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	220f      	movs	r2, #15
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	4013      	ands	r3, r2
 8001516:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4a49      	ldr	r2, [pc, #292]	; (8001640 <HAL_GPIO_Init+0x2e4>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d00d      	beq.n	800153c <HAL_GPIO_Init+0x1e0>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4a48      	ldr	r2, [pc, #288]	; (8001644 <HAL_GPIO_Init+0x2e8>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d007      	beq.n	8001538 <HAL_GPIO_Init+0x1dc>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4a47      	ldr	r2, [pc, #284]	; (8001648 <HAL_GPIO_Init+0x2ec>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d101      	bne.n	8001534 <HAL_GPIO_Init+0x1d8>
 8001530:	2302      	movs	r3, #2
 8001532:	e004      	b.n	800153e <HAL_GPIO_Init+0x1e2>
 8001534:	2303      	movs	r3, #3
 8001536:	e002      	b.n	800153e <HAL_GPIO_Init+0x1e2>
 8001538:	2301      	movs	r3, #1
 800153a:	e000      	b.n	800153e <HAL_GPIO_Init+0x1e2>
 800153c:	2300      	movs	r3, #0
 800153e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001540:	f002 0203 	and.w	r2, r2, #3
 8001544:	0092      	lsls	r2, r2, #2
 8001546:	4093      	lsls	r3, r2
 8001548:	68fa      	ldr	r2, [r7, #12]
 800154a:	4313      	orrs	r3, r2
 800154c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800154e:	493b      	ldr	r1, [pc, #236]	; (800163c <HAL_GPIO_Init+0x2e0>)
 8001550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001552:	089b      	lsrs	r3, r3, #2
 8001554:	3302      	adds	r3, #2
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d006      	beq.n	8001576 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001568:	4b38      	ldr	r3, [pc, #224]	; (800164c <HAL_GPIO_Init+0x2f0>)
 800156a:	689a      	ldr	r2, [r3, #8]
 800156c:	4937      	ldr	r1, [pc, #220]	; (800164c <HAL_GPIO_Init+0x2f0>)
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	4313      	orrs	r3, r2
 8001572:	608b      	str	r3, [r1, #8]
 8001574:	e006      	b.n	8001584 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001576:	4b35      	ldr	r3, [pc, #212]	; (800164c <HAL_GPIO_Init+0x2f0>)
 8001578:	689a      	ldr	r2, [r3, #8]
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	43db      	mvns	r3, r3
 800157e:	4933      	ldr	r1, [pc, #204]	; (800164c <HAL_GPIO_Init+0x2f0>)
 8001580:	4013      	ands	r3, r2
 8001582:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d006      	beq.n	800159e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001590:	4b2e      	ldr	r3, [pc, #184]	; (800164c <HAL_GPIO_Init+0x2f0>)
 8001592:	68da      	ldr	r2, [r3, #12]
 8001594:	492d      	ldr	r1, [pc, #180]	; (800164c <HAL_GPIO_Init+0x2f0>)
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	4313      	orrs	r3, r2
 800159a:	60cb      	str	r3, [r1, #12]
 800159c:	e006      	b.n	80015ac <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800159e:	4b2b      	ldr	r3, [pc, #172]	; (800164c <HAL_GPIO_Init+0x2f0>)
 80015a0:	68da      	ldr	r2, [r3, #12]
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	43db      	mvns	r3, r3
 80015a6:	4929      	ldr	r1, [pc, #164]	; (800164c <HAL_GPIO_Init+0x2f0>)
 80015a8:	4013      	ands	r3, r2
 80015aa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d006      	beq.n	80015c6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015b8:	4b24      	ldr	r3, [pc, #144]	; (800164c <HAL_GPIO_Init+0x2f0>)
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	4923      	ldr	r1, [pc, #140]	; (800164c <HAL_GPIO_Init+0x2f0>)
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	604b      	str	r3, [r1, #4]
 80015c4:	e006      	b.n	80015d4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015c6:	4b21      	ldr	r3, [pc, #132]	; (800164c <HAL_GPIO_Init+0x2f0>)
 80015c8:	685a      	ldr	r2, [r3, #4]
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	43db      	mvns	r3, r3
 80015ce:	491f      	ldr	r1, [pc, #124]	; (800164c <HAL_GPIO_Init+0x2f0>)
 80015d0:	4013      	ands	r3, r2
 80015d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d006      	beq.n	80015ee <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015e0:	4b1a      	ldr	r3, [pc, #104]	; (800164c <HAL_GPIO_Init+0x2f0>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	4919      	ldr	r1, [pc, #100]	; (800164c <HAL_GPIO_Init+0x2f0>)
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	600b      	str	r3, [r1, #0]
 80015ec:	e006      	b.n	80015fc <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015ee:	4b17      	ldr	r3, [pc, #92]	; (800164c <HAL_GPIO_Init+0x2f0>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	43db      	mvns	r3, r3
 80015f6:	4915      	ldr	r1, [pc, #84]	; (800164c <HAL_GPIO_Init+0x2f0>)
 80015f8:	4013      	ands	r3, r2
 80015fa:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80015fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fe:	3301      	adds	r3, #1
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001608:	fa22 f303 	lsr.w	r3, r2, r3
 800160c:	2b00      	cmp	r3, #0
 800160e:	f47f aeaf 	bne.w	8001370 <HAL_GPIO_Init+0x14>
  }
}
 8001612:	bf00      	nop
 8001614:	bf00      	nop
 8001616:	372c      	adds	r7, #44	; 0x2c
 8001618:	46bd      	mov	sp, r7
 800161a:	bc80      	pop	{r7}
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	10320000 	.word	0x10320000
 8001624:	10310000 	.word	0x10310000
 8001628:	10220000 	.word	0x10220000
 800162c:	10210000 	.word	0x10210000
 8001630:	10120000 	.word	0x10120000
 8001634:	10110000 	.word	0x10110000
 8001638:	40021000 	.word	0x40021000
 800163c:	40010000 	.word	0x40010000
 8001640:	40010800 	.word	0x40010800
 8001644:	40010c00 	.word	0x40010c00
 8001648:	40011000 	.word	0x40011000
 800164c:	40010400 	.word	0x40010400

08001650 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	460b      	mov	r3, r1
 800165a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689a      	ldr	r2, [r3, #8]
 8001660:	887b      	ldrh	r3, [r7, #2]
 8001662:	4013      	ands	r3, r2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d002      	beq.n	800166e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001668:	2301      	movs	r3, #1
 800166a:	73fb      	strb	r3, [r7, #15]
 800166c:	e001      	b.n	8001672 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800166e:	2300      	movs	r3, #0
 8001670:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001672:	7bfb      	ldrb	r3, [r7, #15]
}
 8001674:	4618      	mov	r0, r3
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	bc80      	pop	{r7}
 800167c:	4770      	bx	lr

0800167e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800167e:	b480      	push	{r7}
 8001680:	b083      	sub	sp, #12
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
 8001686:	460b      	mov	r3, r1
 8001688:	807b      	strh	r3, [r7, #2]
 800168a:	4613      	mov	r3, r2
 800168c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800168e:	787b      	ldrb	r3, [r7, #1]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d003      	beq.n	800169c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001694:	887a      	ldrh	r2, [r7, #2]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800169a:	e003      	b.n	80016a4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800169c:	887b      	ldrh	r3, [r7, #2]
 800169e:	041a      	lsls	r2, r3, #16
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	611a      	str	r2, [r3, #16]
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr
	...

080016b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d101      	bne.n	80016c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e26c      	b.n	8001b9c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f000 8087 	beq.w	80017de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016d0:	4b92      	ldr	r3, [pc, #584]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 030c 	and.w	r3, r3, #12
 80016d8:	2b04      	cmp	r3, #4
 80016da:	d00c      	beq.n	80016f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016dc:	4b8f      	ldr	r3, [pc, #572]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f003 030c 	and.w	r3, r3, #12
 80016e4:	2b08      	cmp	r3, #8
 80016e6:	d112      	bne.n	800170e <HAL_RCC_OscConfig+0x5e>
 80016e8:	4b8c      	ldr	r3, [pc, #560]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016f4:	d10b      	bne.n	800170e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f6:	4b89      	ldr	r3, [pc, #548]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d06c      	beq.n	80017dc <HAL_RCC_OscConfig+0x12c>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d168      	bne.n	80017dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e246      	b.n	8001b9c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001716:	d106      	bne.n	8001726 <HAL_RCC_OscConfig+0x76>
 8001718:	4b80      	ldr	r3, [pc, #512]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a7f      	ldr	r2, [pc, #508]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 800171e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001722:	6013      	str	r3, [r2, #0]
 8001724:	e02e      	b.n	8001784 <HAL_RCC_OscConfig+0xd4>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d10c      	bne.n	8001748 <HAL_RCC_OscConfig+0x98>
 800172e:	4b7b      	ldr	r3, [pc, #492]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a7a      	ldr	r2, [pc, #488]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 8001734:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001738:	6013      	str	r3, [r2, #0]
 800173a:	4b78      	ldr	r3, [pc, #480]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a77      	ldr	r2, [pc, #476]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 8001740:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001744:	6013      	str	r3, [r2, #0]
 8001746:	e01d      	b.n	8001784 <HAL_RCC_OscConfig+0xd4>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001750:	d10c      	bne.n	800176c <HAL_RCC_OscConfig+0xbc>
 8001752:	4b72      	ldr	r3, [pc, #456]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a71      	ldr	r2, [pc, #452]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 8001758:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800175c:	6013      	str	r3, [r2, #0]
 800175e:	4b6f      	ldr	r3, [pc, #444]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a6e      	ldr	r2, [pc, #440]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 8001764:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001768:	6013      	str	r3, [r2, #0]
 800176a:	e00b      	b.n	8001784 <HAL_RCC_OscConfig+0xd4>
 800176c:	4b6b      	ldr	r3, [pc, #428]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a6a      	ldr	r2, [pc, #424]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 8001772:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001776:	6013      	str	r3, [r2, #0]
 8001778:	4b68      	ldr	r3, [pc, #416]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a67      	ldr	r2, [pc, #412]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 800177e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001782:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d013      	beq.n	80017b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800178c:	f7ff fcce 	bl	800112c <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001794:	f7ff fcca 	bl	800112c <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b64      	cmp	r3, #100	; 0x64
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e1fa      	b.n	8001b9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017a6:	4b5d      	ldr	r3, [pc, #372]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d0f0      	beq.n	8001794 <HAL_RCC_OscConfig+0xe4>
 80017b2:	e014      	b.n	80017de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b4:	f7ff fcba 	bl	800112c <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017bc:	f7ff fcb6 	bl	800112c <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b64      	cmp	r3, #100	; 0x64
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e1e6      	b.n	8001b9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ce:	4b53      	ldr	r3, [pc, #332]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d1f0      	bne.n	80017bc <HAL_RCC_OscConfig+0x10c>
 80017da:	e000      	b.n	80017de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d063      	beq.n	80018b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017ea:	4b4c      	ldr	r3, [pc, #304]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f003 030c 	and.w	r3, r3, #12
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d00b      	beq.n	800180e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017f6:	4b49      	ldr	r3, [pc, #292]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f003 030c 	and.w	r3, r3, #12
 80017fe:	2b08      	cmp	r3, #8
 8001800:	d11c      	bne.n	800183c <HAL_RCC_OscConfig+0x18c>
 8001802:	4b46      	ldr	r3, [pc, #280]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d116      	bne.n	800183c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800180e:	4b43      	ldr	r3, [pc, #268]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d005      	beq.n	8001826 <HAL_RCC_OscConfig+0x176>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	691b      	ldr	r3, [r3, #16]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d001      	beq.n	8001826 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e1ba      	b.n	8001b9c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001826:	4b3d      	ldr	r3, [pc, #244]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	695b      	ldr	r3, [r3, #20]
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	4939      	ldr	r1, [pc, #228]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 8001836:	4313      	orrs	r3, r2
 8001838:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800183a:	e03a      	b.n	80018b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	691b      	ldr	r3, [r3, #16]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d020      	beq.n	8001886 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001844:	4b36      	ldr	r3, [pc, #216]	; (8001920 <HAL_RCC_OscConfig+0x270>)
 8001846:	2201      	movs	r2, #1
 8001848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184a:	f7ff fc6f 	bl	800112c <HAL_GetTick>
 800184e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001850:	e008      	b.n	8001864 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001852:	f7ff fc6b 	bl	800112c <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e19b      	b.n	8001b9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001864:	4b2d      	ldr	r3, [pc, #180]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0302 	and.w	r3, r3, #2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d0f0      	beq.n	8001852 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001870:	4b2a      	ldr	r3, [pc, #168]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	695b      	ldr	r3, [r3, #20]
 800187c:	00db      	lsls	r3, r3, #3
 800187e:	4927      	ldr	r1, [pc, #156]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 8001880:	4313      	orrs	r3, r2
 8001882:	600b      	str	r3, [r1, #0]
 8001884:	e015      	b.n	80018b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001886:	4b26      	ldr	r3, [pc, #152]	; (8001920 <HAL_RCC_OscConfig+0x270>)
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188c:	f7ff fc4e 	bl	800112c <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001894:	f7ff fc4a 	bl	800112c <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e17a      	b.n	8001b9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018a6:	4b1d      	ldr	r3, [pc, #116]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f0      	bne.n	8001894 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0308 	and.w	r3, r3, #8
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d03a      	beq.n	8001934 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	699b      	ldr	r3, [r3, #24]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d019      	beq.n	80018fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018c6:	4b17      	ldr	r3, [pc, #92]	; (8001924 <HAL_RCC_OscConfig+0x274>)
 80018c8:	2201      	movs	r2, #1
 80018ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018cc:	f7ff fc2e 	bl	800112c <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018d4:	f7ff fc2a 	bl	800112c <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e15a      	b.n	8001b9c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018e6:	4b0d      	ldr	r3, [pc, #52]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 80018e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d0f0      	beq.n	80018d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018f2:	2001      	movs	r0, #1
 80018f4:	f000 fa9a 	bl	8001e2c <RCC_Delay>
 80018f8:	e01c      	b.n	8001934 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018fa:	4b0a      	ldr	r3, [pc, #40]	; (8001924 <HAL_RCC_OscConfig+0x274>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001900:	f7ff fc14 	bl	800112c <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001906:	e00f      	b.n	8001928 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001908:	f7ff fc10 	bl	800112c <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d908      	bls.n	8001928 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e140      	b.n	8001b9c <HAL_RCC_OscConfig+0x4ec>
 800191a:	bf00      	nop
 800191c:	40021000 	.word	0x40021000
 8001920:	42420000 	.word	0x42420000
 8001924:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001928:	4b9e      	ldr	r3, [pc, #632]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 800192a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d1e9      	bne.n	8001908 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0304 	and.w	r3, r3, #4
 800193c:	2b00      	cmp	r3, #0
 800193e:	f000 80a6 	beq.w	8001a8e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001942:	2300      	movs	r3, #0
 8001944:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001946:	4b97      	ldr	r3, [pc, #604]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 8001948:	69db      	ldr	r3, [r3, #28]
 800194a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d10d      	bne.n	800196e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001952:	4b94      	ldr	r3, [pc, #592]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 8001954:	69db      	ldr	r3, [r3, #28]
 8001956:	4a93      	ldr	r2, [pc, #588]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 8001958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800195c:	61d3      	str	r3, [r2, #28]
 800195e:	4b91      	ldr	r3, [pc, #580]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 8001960:	69db      	ldr	r3, [r3, #28]
 8001962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001966:	60bb      	str	r3, [r7, #8]
 8001968:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800196a:	2301      	movs	r3, #1
 800196c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800196e:	4b8e      	ldr	r3, [pc, #568]	; (8001ba8 <HAL_RCC_OscConfig+0x4f8>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001976:	2b00      	cmp	r3, #0
 8001978:	d118      	bne.n	80019ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800197a:	4b8b      	ldr	r3, [pc, #556]	; (8001ba8 <HAL_RCC_OscConfig+0x4f8>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a8a      	ldr	r2, [pc, #552]	; (8001ba8 <HAL_RCC_OscConfig+0x4f8>)
 8001980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001984:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001986:	f7ff fbd1 	bl	800112c <HAL_GetTick>
 800198a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800198c:	e008      	b.n	80019a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800198e:	f7ff fbcd 	bl	800112c <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b64      	cmp	r3, #100	; 0x64
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e0fd      	b.n	8001b9c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a0:	4b81      	ldr	r3, [pc, #516]	; (8001ba8 <HAL_RCC_OscConfig+0x4f8>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d0f0      	beq.n	800198e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d106      	bne.n	80019c2 <HAL_RCC_OscConfig+0x312>
 80019b4:	4b7b      	ldr	r3, [pc, #492]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 80019b6:	6a1b      	ldr	r3, [r3, #32]
 80019b8:	4a7a      	ldr	r2, [pc, #488]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 80019ba:	f043 0301 	orr.w	r3, r3, #1
 80019be:	6213      	str	r3, [r2, #32]
 80019c0:	e02d      	b.n	8001a1e <HAL_RCC_OscConfig+0x36e>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d10c      	bne.n	80019e4 <HAL_RCC_OscConfig+0x334>
 80019ca:	4b76      	ldr	r3, [pc, #472]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 80019cc:	6a1b      	ldr	r3, [r3, #32]
 80019ce:	4a75      	ldr	r2, [pc, #468]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 80019d0:	f023 0301 	bic.w	r3, r3, #1
 80019d4:	6213      	str	r3, [r2, #32]
 80019d6:	4b73      	ldr	r3, [pc, #460]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 80019d8:	6a1b      	ldr	r3, [r3, #32]
 80019da:	4a72      	ldr	r2, [pc, #456]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 80019dc:	f023 0304 	bic.w	r3, r3, #4
 80019e0:	6213      	str	r3, [r2, #32]
 80019e2:	e01c      	b.n	8001a1e <HAL_RCC_OscConfig+0x36e>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	2b05      	cmp	r3, #5
 80019ea:	d10c      	bne.n	8001a06 <HAL_RCC_OscConfig+0x356>
 80019ec:	4b6d      	ldr	r3, [pc, #436]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 80019ee:	6a1b      	ldr	r3, [r3, #32]
 80019f0:	4a6c      	ldr	r2, [pc, #432]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 80019f2:	f043 0304 	orr.w	r3, r3, #4
 80019f6:	6213      	str	r3, [r2, #32]
 80019f8:	4b6a      	ldr	r3, [pc, #424]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 80019fa:	6a1b      	ldr	r3, [r3, #32]
 80019fc:	4a69      	ldr	r2, [pc, #420]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 80019fe:	f043 0301 	orr.w	r3, r3, #1
 8001a02:	6213      	str	r3, [r2, #32]
 8001a04:	e00b      	b.n	8001a1e <HAL_RCC_OscConfig+0x36e>
 8001a06:	4b67      	ldr	r3, [pc, #412]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 8001a08:	6a1b      	ldr	r3, [r3, #32]
 8001a0a:	4a66      	ldr	r2, [pc, #408]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 8001a0c:	f023 0301 	bic.w	r3, r3, #1
 8001a10:	6213      	str	r3, [r2, #32]
 8001a12:	4b64      	ldr	r3, [pc, #400]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 8001a14:	6a1b      	ldr	r3, [r3, #32]
 8001a16:	4a63      	ldr	r2, [pc, #396]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 8001a18:	f023 0304 	bic.w	r3, r3, #4
 8001a1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d015      	beq.n	8001a52 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a26:	f7ff fb81 	bl	800112c <HAL_GetTick>
 8001a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a2c:	e00a      	b.n	8001a44 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a2e:	f7ff fb7d 	bl	800112c <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e0ab      	b.n	8001b9c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a44:	4b57      	ldr	r3, [pc, #348]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 8001a46:	6a1b      	ldr	r3, [r3, #32]
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d0ee      	beq.n	8001a2e <HAL_RCC_OscConfig+0x37e>
 8001a50:	e014      	b.n	8001a7c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a52:	f7ff fb6b 	bl	800112c <HAL_GetTick>
 8001a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a58:	e00a      	b.n	8001a70 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a5a:	f7ff fb67 	bl	800112c <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e095      	b.n	8001b9c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a70:	4b4c      	ldr	r3, [pc, #304]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 8001a72:	6a1b      	ldr	r3, [r3, #32]
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1ee      	bne.n	8001a5a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a7c:	7dfb      	ldrb	r3, [r7, #23]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d105      	bne.n	8001a8e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a82:	4b48      	ldr	r3, [pc, #288]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 8001a84:	69db      	ldr	r3, [r3, #28]
 8001a86:	4a47      	ldr	r2, [pc, #284]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 8001a88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a8c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	69db      	ldr	r3, [r3, #28]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f000 8081 	beq.w	8001b9a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a98:	4b42      	ldr	r3, [pc, #264]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f003 030c 	and.w	r3, r3, #12
 8001aa0:	2b08      	cmp	r3, #8
 8001aa2:	d061      	beq.n	8001b68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	69db      	ldr	r3, [r3, #28]
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d146      	bne.n	8001b3a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aac:	4b3f      	ldr	r3, [pc, #252]	; (8001bac <HAL_RCC_OscConfig+0x4fc>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab2:	f7ff fb3b 	bl	800112c <HAL_GetTick>
 8001ab6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ab8:	e008      	b.n	8001acc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aba:	f7ff fb37 	bl	800112c <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d901      	bls.n	8001acc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e067      	b.n	8001b9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001acc:	4b35      	ldr	r3, [pc, #212]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d1f0      	bne.n	8001aba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ae0:	d108      	bne.n	8001af4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ae2:	4b30      	ldr	r3, [pc, #192]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	492d      	ldr	r1, [pc, #180]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 8001af0:	4313      	orrs	r3, r2
 8001af2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001af4:	4b2b      	ldr	r3, [pc, #172]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a19      	ldr	r1, [r3, #32]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b04:	430b      	orrs	r3, r1
 8001b06:	4927      	ldr	r1, [pc, #156]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b0c:	4b27      	ldr	r3, [pc, #156]	; (8001bac <HAL_RCC_OscConfig+0x4fc>)
 8001b0e:	2201      	movs	r2, #1
 8001b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b12:	f7ff fb0b 	bl	800112c <HAL_GetTick>
 8001b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b18:	e008      	b.n	8001b2c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b1a:	f7ff fb07 	bl	800112c <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e037      	b.n	8001b9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b2c:	4b1d      	ldr	r3, [pc, #116]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d0f0      	beq.n	8001b1a <HAL_RCC_OscConfig+0x46a>
 8001b38:	e02f      	b.n	8001b9a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b3a:	4b1c      	ldr	r3, [pc, #112]	; (8001bac <HAL_RCC_OscConfig+0x4fc>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b40:	f7ff faf4 	bl	800112c <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b48:	f7ff faf0 	bl	800112c <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e020      	b.n	8001b9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b5a:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1f0      	bne.n	8001b48 <HAL_RCC_OscConfig+0x498>
 8001b66:	e018      	b.n	8001b9a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	69db      	ldr	r3, [r3, #28]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d101      	bne.n	8001b74 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e013      	b.n	8001b9c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b74:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a1b      	ldr	r3, [r3, #32]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d106      	bne.n	8001b96 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d001      	beq.n	8001b9a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e000      	b.n	8001b9c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3718      	adds	r7, #24
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	40007000 	.word	0x40007000
 8001bac:	42420060 	.word	0x42420060

08001bb0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d101      	bne.n	8001bc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e0d0      	b.n	8001d66 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bc4:	4b6a      	ldr	r3, [pc, #424]	; (8001d70 <HAL_RCC_ClockConfig+0x1c0>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0307 	and.w	r3, r3, #7
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d910      	bls.n	8001bf4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd2:	4b67      	ldr	r3, [pc, #412]	; (8001d70 <HAL_RCC_ClockConfig+0x1c0>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f023 0207 	bic.w	r2, r3, #7
 8001bda:	4965      	ldr	r1, [pc, #404]	; (8001d70 <HAL_RCC_ClockConfig+0x1c0>)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001be2:	4b63      	ldr	r3, [pc, #396]	; (8001d70 <HAL_RCC_ClockConfig+0x1c0>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d001      	beq.n	8001bf4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e0b8      	b.n	8001d66 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d020      	beq.n	8001c42 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0304 	and.w	r3, r3, #4
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d005      	beq.n	8001c18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c0c:	4b59      	ldr	r3, [pc, #356]	; (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	4a58      	ldr	r2, [pc, #352]	; (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001c12:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c16:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0308 	and.w	r3, r3, #8
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d005      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c24:	4b53      	ldr	r3, [pc, #332]	; (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	4a52      	ldr	r2, [pc, #328]	; (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c2e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c30:	4b50      	ldr	r3, [pc, #320]	; (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	494d      	ldr	r1, [pc, #308]	; (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d040      	beq.n	8001cd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d107      	bne.n	8001c66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c56:	4b47      	ldr	r3, [pc, #284]	; (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d115      	bne.n	8001c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e07f      	b.n	8001d66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d107      	bne.n	8001c7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c6e:	4b41      	ldr	r3, [pc, #260]	; (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d109      	bne.n	8001c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e073      	b.n	8001d66 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c7e:	4b3d      	ldr	r3, [pc, #244]	; (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e06b      	b.n	8001d66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c8e:	4b39      	ldr	r3, [pc, #228]	; (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f023 0203 	bic.w	r2, r3, #3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	4936      	ldr	r1, [pc, #216]	; (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ca0:	f7ff fa44 	bl	800112c <HAL_GetTick>
 8001ca4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ca6:	e00a      	b.n	8001cbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ca8:	f7ff fa40 	bl	800112c <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e053      	b.n	8001d66 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cbe:	4b2d      	ldr	r3, [pc, #180]	; (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f003 020c 	and.w	r2, r3, #12
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d1eb      	bne.n	8001ca8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cd0:	4b27      	ldr	r3, [pc, #156]	; (8001d70 <HAL_RCC_ClockConfig+0x1c0>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d210      	bcs.n	8001d00 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cde:	4b24      	ldr	r3, [pc, #144]	; (8001d70 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f023 0207 	bic.w	r2, r3, #7
 8001ce6:	4922      	ldr	r1, [pc, #136]	; (8001d70 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cee:	4b20      	ldr	r3, [pc, #128]	; (8001d70 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d001      	beq.n	8001d00 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e032      	b.n	8001d66 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d008      	beq.n	8001d1e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d0c:	4b19      	ldr	r3, [pc, #100]	; (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	4916      	ldr	r1, [pc, #88]	; (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0308 	and.w	r3, r3, #8
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d009      	beq.n	8001d3e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d2a:	4b12      	ldr	r3, [pc, #72]	; (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	490e      	ldr	r1, [pc, #56]	; (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d3e:	f000 f821 	bl	8001d84 <HAL_RCC_GetSysClockFreq>
 8001d42:	4602      	mov	r2, r0
 8001d44:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	091b      	lsrs	r3, r3, #4
 8001d4a:	f003 030f 	and.w	r3, r3, #15
 8001d4e:	490a      	ldr	r1, [pc, #40]	; (8001d78 <HAL_RCC_ClockConfig+0x1c8>)
 8001d50:	5ccb      	ldrb	r3, [r1, r3]
 8001d52:	fa22 f303 	lsr.w	r3, r2, r3
 8001d56:	4a09      	ldr	r2, [pc, #36]	; (8001d7c <HAL_RCC_ClockConfig+0x1cc>)
 8001d58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d5a:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <HAL_RCC_ClockConfig+0x1d0>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff f9a2 	bl	80010a8 <HAL_InitTick>

  return HAL_OK;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40022000 	.word	0x40022000
 8001d74:	40021000 	.word	0x40021000
 8001d78:	080026a4 	.word	0x080026a4
 8001d7c:	20000008 	.word	0x20000008
 8001d80:	2000000c 	.word	0x2000000c

08001d84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b087      	sub	sp, #28
 8001d88:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60bb      	str	r3, [r7, #8]
 8001d92:	2300      	movs	r3, #0
 8001d94:	617b      	str	r3, [r7, #20]
 8001d96:	2300      	movs	r3, #0
 8001d98:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d9e:	4b1e      	ldr	r3, [pc, #120]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x94>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f003 030c 	and.w	r3, r3, #12
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	d002      	beq.n	8001db4 <HAL_RCC_GetSysClockFreq+0x30>
 8001dae:	2b08      	cmp	r3, #8
 8001db0:	d003      	beq.n	8001dba <HAL_RCC_GetSysClockFreq+0x36>
 8001db2:	e027      	b.n	8001e04 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001db4:	4b19      	ldr	r3, [pc, #100]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x98>)
 8001db6:	613b      	str	r3, [r7, #16]
      break;
 8001db8:	e027      	b.n	8001e0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	0c9b      	lsrs	r3, r3, #18
 8001dbe:	f003 030f 	and.w	r3, r3, #15
 8001dc2:	4a17      	ldr	r2, [pc, #92]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001dc4:	5cd3      	ldrb	r3, [r2, r3]
 8001dc6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d010      	beq.n	8001df4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001dd2:	4b11      	ldr	r3, [pc, #68]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x94>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	0c5b      	lsrs	r3, r3, #17
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	4a11      	ldr	r2, [pc, #68]	; (8001e24 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001dde:	5cd3      	ldrb	r3, [r2, r3]
 8001de0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a0d      	ldr	r2, [pc, #52]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x98>)
 8001de6:	fb02 f203 	mul.w	r2, r2, r3
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df0:	617b      	str	r3, [r7, #20]
 8001df2:	e004      	b.n	8001dfe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4a0c      	ldr	r2, [pc, #48]	; (8001e28 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001df8:	fb02 f303 	mul.w	r3, r2, r3
 8001dfc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	613b      	str	r3, [r7, #16]
      break;
 8001e02:	e002      	b.n	8001e0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e04:	4b05      	ldr	r3, [pc, #20]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x98>)
 8001e06:	613b      	str	r3, [r7, #16]
      break;
 8001e08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e0a:	693b      	ldr	r3, [r7, #16]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	371c      	adds	r7, #28
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bc80      	pop	{r7}
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	007a1200 	.word	0x007a1200
 8001e20:	080026b4 	.word	0x080026b4
 8001e24:	080026c4 	.word	0x080026c4
 8001e28:	003d0900 	.word	0x003d0900

08001e2c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e34:	4b0a      	ldr	r3, [pc, #40]	; (8001e60 <RCC_Delay+0x34>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a0a      	ldr	r2, [pc, #40]	; (8001e64 <RCC_Delay+0x38>)
 8001e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3e:	0a5b      	lsrs	r3, r3, #9
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	fb02 f303 	mul.w	r3, r2, r3
 8001e46:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e48:	bf00      	nop
  }
  while (Delay --);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	1e5a      	subs	r2, r3, #1
 8001e4e:	60fa      	str	r2, [r7, #12]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1f9      	bne.n	8001e48 <RCC_Delay+0x1c>
}
 8001e54:	bf00      	nop
 8001e56:	bf00      	nop
 8001e58:	3714      	adds	r7, #20
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr
 8001e60:	20000008 	.word	0x20000008
 8001e64:	10624dd3 	.word	0x10624dd3

08001e68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e041      	b.n	8001efe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d106      	bne.n	8001e94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff f872 	bl	8000f78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2202      	movs	r2, #2
 8001e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3304      	adds	r3, #4
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4610      	mov	r0, r2
 8001ea8:	f000 fa56 	bl	8002358 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
	...

08001f08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d001      	beq.n	8001f20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e035      	b.n	8001f8c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2202      	movs	r2, #2
 8001f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	68da      	ldr	r2, [r3, #12]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f042 0201 	orr.w	r2, r2, #1
 8001f36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a16      	ldr	r2, [pc, #88]	; (8001f98 <HAL_TIM_Base_Start_IT+0x90>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d009      	beq.n	8001f56 <HAL_TIM_Base_Start_IT+0x4e>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f4a:	d004      	beq.n	8001f56 <HAL_TIM_Base_Start_IT+0x4e>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a12      	ldr	r2, [pc, #72]	; (8001f9c <HAL_TIM_Base_Start_IT+0x94>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d111      	bne.n	8001f7a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f003 0307 	and.w	r3, r3, #7
 8001f60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2b06      	cmp	r3, #6
 8001f66:	d010      	beq.n	8001f8a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f042 0201 	orr.w	r2, r2, #1
 8001f76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f78:	e007      	b.n	8001f8a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f042 0201 	orr.w	r2, r2, #1
 8001f88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bc80      	pop	{r7}
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	40012c00 	.word	0x40012c00
 8001f9c:	40000400 	.word	0x40000400

08001fa0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d020      	beq.n	8002004 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d01b      	beq.n	8002004 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f06f 0202 	mvn.w	r2, #2
 8001fd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	f003 0303 	and.w	r3, r3, #3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d003      	beq.n	8001ff2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 f998 	bl	8002320 <HAL_TIM_IC_CaptureCallback>
 8001ff0:	e005      	b.n	8001ffe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f98b 	bl	800230e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f000 f99a 	bl	8002332 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	f003 0304 	and.w	r3, r3, #4
 800200a:	2b00      	cmp	r3, #0
 800200c:	d020      	beq.n	8002050 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f003 0304 	and.w	r3, r3, #4
 8002014:	2b00      	cmp	r3, #0
 8002016:	d01b      	beq.n	8002050 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f06f 0204 	mvn.w	r2, #4
 8002020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2202      	movs	r2, #2
 8002026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002032:	2b00      	cmp	r3, #0
 8002034:	d003      	beq.n	800203e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f972 	bl	8002320 <HAL_TIM_IC_CaptureCallback>
 800203c:	e005      	b.n	800204a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f965 	bl	800230e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 f974 	bl	8002332 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	f003 0308 	and.w	r3, r3, #8
 8002056:	2b00      	cmp	r3, #0
 8002058:	d020      	beq.n	800209c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f003 0308 	and.w	r3, r3, #8
 8002060:	2b00      	cmp	r3, #0
 8002062:	d01b      	beq.n	800209c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f06f 0208 	mvn.w	r2, #8
 800206c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2204      	movs	r2, #4
 8002072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	f003 0303 	and.w	r3, r3, #3
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 f94c 	bl	8002320 <HAL_TIM_IC_CaptureCallback>
 8002088:	e005      	b.n	8002096 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 f93f 	bl	800230e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f000 f94e 	bl	8002332 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	f003 0310 	and.w	r3, r3, #16
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d020      	beq.n	80020e8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f003 0310 	and.w	r3, r3, #16
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d01b      	beq.n	80020e8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f06f 0210 	mvn.w	r2, #16
 80020b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2208      	movs	r2, #8
 80020be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f926 	bl	8002320 <HAL_TIM_IC_CaptureCallback>
 80020d4:	e005      	b.n	80020e2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f919 	bl	800230e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 f928 	bl	8002332 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00c      	beq.n	800210c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d007      	beq.n	800210c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f06f 0201 	mvn.w	r2, #1
 8002104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f7fe fed4 	bl	8000eb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002112:	2b00      	cmp	r3, #0
 8002114:	d00c      	beq.n	8002130 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800211c:	2b00      	cmp	r3, #0
 800211e:	d007      	beq.n	8002130 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 fa6f 	bl	800260e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00c      	beq.n	8002154 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002140:	2b00      	cmp	r3, #0
 8002142:	d007      	beq.n	8002154 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800214c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f8f8 	bl	8002344 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	f003 0320 	and.w	r3, r3, #32
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00c      	beq.n	8002178 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f003 0320 	and.w	r3, r3, #32
 8002164:	2b00      	cmp	r3, #0
 8002166:	d007      	beq.n	8002178 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f06f 0220 	mvn.w	r2, #32
 8002170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 fa42 	bl	80025fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002178:	bf00      	nop
 800217a:	3710      	adds	r7, #16
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800218a:	2300      	movs	r3, #0
 800218c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002194:	2b01      	cmp	r3, #1
 8002196:	d101      	bne.n	800219c <HAL_TIM_ConfigClockSource+0x1c>
 8002198:	2302      	movs	r3, #2
 800219a:	e0b4      	b.n	8002306 <HAL_TIM_ConfigClockSource+0x186>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2202      	movs	r2, #2
 80021a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80021ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68ba      	ldr	r2, [r7, #8]
 80021ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021d4:	d03e      	beq.n	8002254 <HAL_TIM_ConfigClockSource+0xd4>
 80021d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021da:	f200 8087 	bhi.w	80022ec <HAL_TIM_ConfigClockSource+0x16c>
 80021de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021e2:	f000 8086 	beq.w	80022f2 <HAL_TIM_ConfigClockSource+0x172>
 80021e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021ea:	d87f      	bhi.n	80022ec <HAL_TIM_ConfigClockSource+0x16c>
 80021ec:	2b70      	cmp	r3, #112	; 0x70
 80021ee:	d01a      	beq.n	8002226 <HAL_TIM_ConfigClockSource+0xa6>
 80021f0:	2b70      	cmp	r3, #112	; 0x70
 80021f2:	d87b      	bhi.n	80022ec <HAL_TIM_ConfigClockSource+0x16c>
 80021f4:	2b60      	cmp	r3, #96	; 0x60
 80021f6:	d050      	beq.n	800229a <HAL_TIM_ConfigClockSource+0x11a>
 80021f8:	2b60      	cmp	r3, #96	; 0x60
 80021fa:	d877      	bhi.n	80022ec <HAL_TIM_ConfigClockSource+0x16c>
 80021fc:	2b50      	cmp	r3, #80	; 0x50
 80021fe:	d03c      	beq.n	800227a <HAL_TIM_ConfigClockSource+0xfa>
 8002200:	2b50      	cmp	r3, #80	; 0x50
 8002202:	d873      	bhi.n	80022ec <HAL_TIM_ConfigClockSource+0x16c>
 8002204:	2b40      	cmp	r3, #64	; 0x40
 8002206:	d058      	beq.n	80022ba <HAL_TIM_ConfigClockSource+0x13a>
 8002208:	2b40      	cmp	r3, #64	; 0x40
 800220a:	d86f      	bhi.n	80022ec <HAL_TIM_ConfigClockSource+0x16c>
 800220c:	2b30      	cmp	r3, #48	; 0x30
 800220e:	d064      	beq.n	80022da <HAL_TIM_ConfigClockSource+0x15a>
 8002210:	2b30      	cmp	r3, #48	; 0x30
 8002212:	d86b      	bhi.n	80022ec <HAL_TIM_ConfigClockSource+0x16c>
 8002214:	2b20      	cmp	r3, #32
 8002216:	d060      	beq.n	80022da <HAL_TIM_ConfigClockSource+0x15a>
 8002218:	2b20      	cmp	r3, #32
 800221a:	d867      	bhi.n	80022ec <HAL_TIM_ConfigClockSource+0x16c>
 800221c:	2b00      	cmp	r3, #0
 800221e:	d05c      	beq.n	80022da <HAL_TIM_ConfigClockSource+0x15a>
 8002220:	2b10      	cmp	r3, #16
 8002222:	d05a      	beq.n	80022da <HAL_TIM_ConfigClockSource+0x15a>
 8002224:	e062      	b.n	80022ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6818      	ldr	r0, [r3, #0]
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	6899      	ldr	r1, [r3, #8]
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685a      	ldr	r2, [r3, #4]
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	f000 f96a 	bl	800250e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002248:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68ba      	ldr	r2, [r7, #8]
 8002250:	609a      	str	r2, [r3, #8]
      break;
 8002252:	e04f      	b.n	80022f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6818      	ldr	r0, [r3, #0]
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	6899      	ldr	r1, [r3, #8]
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	f000 f953 	bl	800250e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	689a      	ldr	r2, [r3, #8]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002276:	609a      	str	r2, [r3, #8]
      break;
 8002278:	e03c      	b.n	80022f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6818      	ldr	r0, [r3, #0]
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	6859      	ldr	r1, [r3, #4]
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	461a      	mov	r2, r3
 8002288:	f000 f8ca 	bl	8002420 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2150      	movs	r1, #80	; 0x50
 8002292:	4618      	mov	r0, r3
 8002294:	f000 f921 	bl	80024da <TIM_ITRx_SetConfig>
      break;
 8002298:	e02c      	b.n	80022f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6818      	ldr	r0, [r3, #0]
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	6859      	ldr	r1, [r3, #4]
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	461a      	mov	r2, r3
 80022a8:	f000 f8e8 	bl	800247c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2160      	movs	r1, #96	; 0x60
 80022b2:	4618      	mov	r0, r3
 80022b4:	f000 f911 	bl	80024da <TIM_ITRx_SetConfig>
      break;
 80022b8:	e01c      	b.n	80022f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6818      	ldr	r0, [r3, #0]
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	6859      	ldr	r1, [r3, #4]
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	461a      	mov	r2, r3
 80022c8:	f000 f8aa 	bl	8002420 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2140      	movs	r1, #64	; 0x40
 80022d2:	4618      	mov	r0, r3
 80022d4:	f000 f901 	bl	80024da <TIM_ITRx_SetConfig>
      break;
 80022d8:	e00c      	b.n	80022f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4619      	mov	r1, r3
 80022e4:	4610      	mov	r0, r2
 80022e6:	f000 f8f8 	bl	80024da <TIM_ITRx_SetConfig>
      break;
 80022ea:	e003      	b.n	80022f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	73fb      	strb	r3, [r7, #15]
      break;
 80022f0:	e000      	b.n	80022f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80022f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002304:	7bfb      	ldrb	r3, [r7, #15]
}
 8002306:	4618      	mov	r0, r3
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800230e:	b480      	push	{r7}
 8002310:	b083      	sub	sp, #12
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr

08002320 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	bc80      	pop	{r7}
 8002330:	4770      	bx	lr

08002332 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002332:	b480      	push	{r7}
 8002334:	b083      	sub	sp, #12
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800233a:	bf00      	nop
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	bc80      	pop	{r7}
 8002342:	4770      	bx	lr

08002344 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	bc80      	pop	{r7}
 8002354:	4770      	bx	lr
	...

08002358 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a2b      	ldr	r2, [pc, #172]	; (8002418 <TIM_Base_SetConfig+0xc0>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d007      	beq.n	8002380 <TIM_Base_SetConfig+0x28>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002376:	d003      	beq.n	8002380 <TIM_Base_SetConfig+0x28>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a28      	ldr	r2, [pc, #160]	; (800241c <TIM_Base_SetConfig+0xc4>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d108      	bne.n	8002392 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002386:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	4313      	orrs	r3, r2
 8002390:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a20      	ldr	r2, [pc, #128]	; (8002418 <TIM_Base_SetConfig+0xc0>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d007      	beq.n	80023aa <TIM_Base_SetConfig+0x52>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023a0:	d003      	beq.n	80023aa <TIM_Base_SetConfig+0x52>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a1d      	ldr	r2, [pc, #116]	; (800241c <TIM_Base_SetConfig+0xc4>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d108      	bne.n	80023bc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a0d      	ldr	r2, [pc, #52]	; (8002418 <TIM_Base_SetConfig+0xc0>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d103      	bne.n	80023f0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	691a      	ldr	r2, [r3, #16]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d005      	beq.n	800240e <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	f023 0201 	bic.w	r2, r3, #1
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	611a      	str	r2, [r3, #16]
  }
}
 800240e:	bf00      	nop
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	bc80      	pop	{r7}
 8002416:	4770      	bx	lr
 8002418:	40012c00 	.word	0x40012c00
 800241c:	40000400 	.word	0x40000400

08002420 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002420:	b480      	push	{r7}
 8002422:	b087      	sub	sp, #28
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6a1b      	ldr	r3, [r3, #32]
 8002430:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	f023 0201 	bic.w	r2, r3, #1
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800244a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	011b      	lsls	r3, r3, #4
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	4313      	orrs	r3, r2
 8002454:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	f023 030a 	bic.w	r3, r3, #10
 800245c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	4313      	orrs	r3, r2
 8002464:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	621a      	str	r2, [r3, #32]
}
 8002472:	bf00      	nop
 8002474:	371c      	adds	r7, #28
 8002476:	46bd      	mov	sp, r7
 8002478:	bc80      	pop	{r7}
 800247a:	4770      	bx	lr

0800247c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800247c:	b480      	push	{r7}
 800247e:	b087      	sub	sp, #28
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	f023 0210 	bic.w	r2, r3, #16
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80024a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	031b      	lsls	r3, r3, #12
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80024b8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	011b      	lsls	r3, r3, #4
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	697a      	ldr	r2, [r7, #20]
 80024ce:	621a      	str	r2, [r3, #32]
}
 80024d0:	bf00      	nop
 80024d2:	371c      	adds	r7, #28
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc80      	pop	{r7}
 80024d8:	4770      	bx	lr

080024da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80024da:	b480      	push	{r7}
 80024dc:	b085      	sub	sp, #20
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
 80024e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	f043 0307 	orr.w	r3, r3, #7
 80024fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	609a      	str	r2, [r3, #8]
}
 8002504:	bf00      	nop
 8002506:	3714      	adds	r7, #20
 8002508:	46bd      	mov	sp, r7
 800250a:	bc80      	pop	{r7}
 800250c:	4770      	bx	lr

0800250e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800250e:	b480      	push	{r7}
 8002510:	b087      	sub	sp, #28
 8002512:	af00      	add	r7, sp, #0
 8002514:	60f8      	str	r0, [r7, #12]
 8002516:	60b9      	str	r1, [r7, #8]
 8002518:	607a      	str	r2, [r7, #4]
 800251a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002528:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	021a      	lsls	r2, r3, #8
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	431a      	orrs	r2, r3
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	4313      	orrs	r3, r2
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	4313      	orrs	r3, r2
 800253a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	609a      	str	r2, [r3, #8]
}
 8002542:	bf00      	nop
 8002544:	371c      	adds	r7, #28
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr

0800254c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800255c:	2b01      	cmp	r3, #1
 800255e:	d101      	bne.n	8002564 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002560:	2302      	movs	r3, #2
 8002562:	e041      	b.n	80025e8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2202      	movs	r2, #2
 8002570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800258a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	4313      	orrs	r3, r2
 8002594:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a14      	ldr	r2, [pc, #80]	; (80025f4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d009      	beq.n	80025bc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025b0:	d004      	beq.n	80025bc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a10      	ldr	r2, [pc, #64]	; (80025f8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d10c      	bne.n	80025d6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	68ba      	ldr	r2, [r7, #8]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68ba      	ldr	r2, [r7, #8]
 80025d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3714      	adds	r7, #20
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bc80      	pop	{r7}
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	40012c00 	.word	0x40012c00
 80025f8:	40000400 	.word	0x40000400

080025fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	bc80      	pop	{r7}
 800260c:	4770      	bx	lr

0800260e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800260e:	b480      	push	{r7}
 8002610:	b083      	sub	sp, #12
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr

08002620 <__libc_init_array>:
 8002620:	b570      	push	{r4, r5, r6, lr}
 8002622:	2600      	movs	r6, #0
 8002624:	4d0c      	ldr	r5, [pc, #48]	; (8002658 <__libc_init_array+0x38>)
 8002626:	4c0d      	ldr	r4, [pc, #52]	; (800265c <__libc_init_array+0x3c>)
 8002628:	1b64      	subs	r4, r4, r5
 800262a:	10a4      	asrs	r4, r4, #2
 800262c:	42a6      	cmp	r6, r4
 800262e:	d109      	bne.n	8002644 <__libc_init_array+0x24>
 8002630:	f000 f822 	bl	8002678 <_init>
 8002634:	2600      	movs	r6, #0
 8002636:	4d0a      	ldr	r5, [pc, #40]	; (8002660 <__libc_init_array+0x40>)
 8002638:	4c0a      	ldr	r4, [pc, #40]	; (8002664 <__libc_init_array+0x44>)
 800263a:	1b64      	subs	r4, r4, r5
 800263c:	10a4      	asrs	r4, r4, #2
 800263e:	42a6      	cmp	r6, r4
 8002640:	d105      	bne.n	800264e <__libc_init_array+0x2e>
 8002642:	bd70      	pop	{r4, r5, r6, pc}
 8002644:	f855 3b04 	ldr.w	r3, [r5], #4
 8002648:	4798      	blx	r3
 800264a:	3601      	adds	r6, #1
 800264c:	e7ee      	b.n	800262c <__libc_init_array+0xc>
 800264e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002652:	4798      	blx	r3
 8002654:	3601      	adds	r6, #1
 8002656:	e7f2      	b.n	800263e <__libc_init_array+0x1e>
 8002658:	080026c8 	.word	0x080026c8
 800265c:	080026c8 	.word	0x080026c8
 8002660:	080026c8 	.word	0x080026c8
 8002664:	080026cc 	.word	0x080026cc

08002668 <memset>:
 8002668:	4603      	mov	r3, r0
 800266a:	4402      	add	r2, r0
 800266c:	4293      	cmp	r3, r2
 800266e:	d100      	bne.n	8002672 <memset+0xa>
 8002670:	4770      	bx	lr
 8002672:	f803 1b01 	strb.w	r1, [r3], #1
 8002676:	e7f9      	b.n	800266c <memset+0x4>

08002678 <_init>:
 8002678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800267a:	bf00      	nop
 800267c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800267e:	bc08      	pop	{r3}
 8002680:	469e      	mov	lr, r3
 8002682:	4770      	bx	lr

08002684 <_fini>:
 8002684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002686:	bf00      	nop
 8002688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800268a:	bc08      	pop	{r3}
 800268c:	469e      	mov	lr, r3
 800268e:	4770      	bx	lr
